{"version":3,"sources":["type/actor.ts","components/StatusChip.tsx","components/TitleCard.tsx","util/hook.ts","service/node.ts","components/LogView/LogVirtualView.tsx","logo.svg","index.tsx","service/requestHandlers.ts","api.ts","pages/dashboard/LastUpdated.tsx","common/tableUtils.ts","common/util.ts","common/ExpandControls.tsx","common/LabeledDatum.tsx","common/UsageBar.tsx","pages/dashboard/logical-view/ActorStateRepr.tsx","pages/dashboard/logical-view/ActorDetailsPane.tsx","pages/dashboard/logical-view/Actor.tsx","pages/dashboard/logical-view/ActorClassGroup.tsx","pages/dashboard/logical-view/ActorClassGroups.tsx","pages/dashboard/logical-view/LogicalView.tsx","pages/dashboard/state.ts","common/formatUtils.ts","pages/dashboard/memory/MemorySummary.tsx","common/TableCell.tsx","common/SortableTableHead.tsx","pages/dashboard/memory/MemoryTableRow.tsx","pages/dashboard/memory/MemoryTable.tsx","pages/dashboard/memory/MemoryRowGroup.tsx","pages/dashboard/memory/Memory.tsx","common/DialogWithTitle.tsx","common/NumberedLines.tsx","pages/dashboard/node-info/dialogs/errors/Errors.tsx","pages/dashboard/node-info/dialogs/logs/Logs.tsx","pages/dashboard/node-info/features/CPU.tsx","pages/dashboard/node-info/features/Disk.tsx","common/SpanButton.tsx","pages/dashboard/node-info/features/Errors.tsx","common/CustomTypography.tsx","pages/dashboard/node-info/features/GPU.tsx","pages/dashboard/node-info/features/GRAM.tsx","pages/dashboard/node-info/features/Host.tsx","pages/dashboard/node-info/features/Logs.tsx","pages/dashboard/node-info/features/ObjectStoreMemory.tsx","pages/dashboard/node-info/features/RAM.tsx","pages/dashboard/node-info/features/Received.tsx","pages/dashboard/node-info/features/Sent.tsx","pages/dashboard/node-info/features/Uptime.tsx","pages/dashboard/node-info/features/Workers.tsx","pages/dashboard/node-info/NodeWorkerRow.tsx","pages/dashboard/node-info/NodeRowGroup.tsx","pages/dashboard/node-info/TotalRow.tsx","pages/dashboard/node-info/NodeInfo.tsx","pages/dashboard/ray-config/RayConfig.tsx","pages/dashboard/tune/TuneErrors.tsx","pages/dashboard/tune/TuneTable.tsx","pages/dashboard/tune/TuneTensorBoard.tsx","pages/dashboard/tune/Tune.tsx","pages/dashboard/Dashboard.tsx","service/event.ts","components/EventTable.tsx","pages/event/Events.tsx","pages/exception/Loading.tsx","store.ts","theme.ts","App.tsx","util/localData.ts"],"names":["ActorEnum","colorMap","node","ALIVE","green","DEAD","red","actor","PENDING","blue","RECONSTRUCTING","lightBlue","job","INIT","grey","SUBMITTED","DISPATCHED","RUNNING","COMPLETED","cyan","FINISHED","FAILED","typeMap","deps","INFO","ERROR","StatusChip","type","status","suffix","style","padding","border","borderRadius","fontSize","margin","color","blueGrey","borderColor","backgroundColor","useStyles","makeStyles","theme","card","spacing","paddingTop","map","e","join","title","typography","fontWeight","palette","text","secondary","marginBottom","body","TitleCard","children","classes","className","useFilter","useState","filters","setFilters","changeFilter","key","val","f","find","push","filterFunc","instance","every","get","toString","includes","useSorter","initialSortKey","desc","sorter","setSorter","sorterFunc","instanceA","instanceB","b","a","setSortKey","setOrderDesc","sorterKey","getNodeList","getNodeDetail","id","uniqueKeySelector","Math","random","slice","timeReg","value2react","tagName","properties","value","keywords","React","createElement","i","afterChildren","vals","split","tmp","shift","LogVirtualView","content","width","height","getDefaultTheme","language","focusLine","listRef","onScrollBottom","revert","startTime","endTime","logs","setLogs","total","length","timmer","useRef","el","outter","current","itemRenderer","index","origin","overflowX","whiteSpace","marginRight","display","low","highlight","v","useEffect","originContent","clearTimeout","setTimeout","time","match","filter","bool","dayjs","isAfter","isBefore","scrollTo","outterCurrentValue","scrollFunc","event","target","scrollTop","clientHeight","scrollHeight","addEventListener","removeEventListener","ref","outerRef","fontFamily","itemSize","itemCount","ReactDOM","render","document","getElementById","formatUrl","url","startsWith","config","axios","ActorState","path","params","formattedParams","Object","entries","pair","x","fetch","response","json","result","msg","data","Error","isFullActorInfo","actorInfo","state","Infeasible","PendingResources","getErrors","nodeIp","pid","getLogs","ip","launchProfiling","nodeId","duration","node_id","getProfilingResultURL","profilingId","uriComponent","encodeURIComponent","getTuneInfo","setTuneExperiment","experiment","enableTuneTensorBoard","setMemoryTableCollection","shouldFetch","LastUpdated","this","props","lastUpdatedAt","error","root","Typography","lastUpdated","Date","toLocaleString","Component","connect","dashboard","withStyles","createStyles","marginTop","textAlign","main","descendingComparator","orderBy","descendingComparatorFnAccessor","orderByFn","aVal","bVal","getFnComparator","order","stableSort","array","comparator","stabilizedThis","sort","getWeightedAverage","input","totalWeightTimesValue","totalWeight","weight","sum","reduce","acc","Minimizer","onClick","Expander","useLabeledDatumStyles","tooltipLabel","textDecorationLine","textDecorationColor","textDecorationThickness","textDecorationStyle","cursor","LabeledDatum","label","datum","tooltip","innerHtml","Grid","container","item","xs","Box","Tooltip","useUsageBarStyles","divider","borderStyle","borderWidth","flexGrow","inner","paddingLeft","paddingRight","UsageBar","percent","safePercent","max","min","minColor","leftColor","rightColor","ratio","r1","g1","b1","blend","gradient","background","align","Alive","Dead","PendingCreation","Restarting","DependenciesUnready","useActorStateReprStyles","infeasible","light","pendingResources","warning","unknown","creating","success","alive","dark","restarting","dead","stateToTooltip","ActorStateRepr","variant","showTooltip","variantOrDefault","memoryDebuggingDocLink","actorTitleWrapper","detailsPane","ActorDetailsPane","actorData","usedResources","localeCompare","resourceSlots","slot","allocation","taskQueueLength","numExecutedTasks","numObjectRefsInScope","numLocalObjects","usedObjectStoreMemory","actorId","requiredResources","labeledActorData","Fragment","actorClass","processStats","cpuPercent","gpus","gpu","gpuUtilization","utilizationGpu","component","uuid","name","Divider","useActorStyles","action","primary","textDecoration","webuiDisplay","inlineHTML","Actor","profiling","setProfiling","handleProfilingClick","now","latestResponse","checkProfilingStatusLoop","profiling_id","actorCustomDisplay","keys","_","__","valueEncoded","valueParsed","JSON","parse","valueRendered","dangerouslySetInnerHTML","__html","actorIpAddress","actorPort","ipAddress","port","round","href","rel","trim","undefined","asSeconds","n","CenteredBox","styled","useActorClassGroupStyles","marginLeft","actorEntry","ActorClassGroup","actorGroup","expanded","setExpanded","toggleExpanded","summary","Paper","stateToCount","avgLifetime","maxLifetime","ActorClassGroups","actorGroups","numInfeasible","group","totalInfeasible","values","warningOpen","setWarningOpen","title1","group1","title2","group2","infeasible1","infeasible2","Snackbar","open","Alert","severity","onClose","useLogicalViewStyles","actorGroupsSelector","LogicalView","nameFilter","setNameFilter","useDebounce","debouncedNameFilter","useSelector","filteredGroups","loweredNameFilter","toLowerCase","search","actorClassMatchesSearch","FormControl","InputLabel","htmlFor","Input","onChange","FormHelperText","fromEntries","createSlice","initialState","tab","rayConfig","nodeInfo","tuneInfo","tuneAvailability","memoryTable","shouldObtainMemoryTable","reducers","setTab","payload","setRayConfig","setNodeInfo","setActorGroups","setTuneInfo","setTuneAvailability","setError","setMemoryTable","setShouldObtainMemoryTable","dashboardActions","actions","dashboardReducer","reducer","formatByteAmount","amount","unit","pow","toFixed","formatUsage","used_b","total_b","includePercentage","usedFormatted","totalFormatted","ratioStr","formatDuration","durationInSeconds","durationSeconds","floor","durationMinutes","durationHours","durationDays","pad","padStart","formatValue","rawFloat","abs","valueOf","toPrecision","toExponential","useMemorySummaryStyles","expandCollapseIcon","verticalAlign","MemorySummary","memoryTableSummary","memoryData","totalLocalRefCount","totalPinnedInMemory","totalUsedByPendingTask","totalCapturedInObjects","totalObjectSize","totalActorHandles","StyledTableCell","TableCell","useSortableTableHeadStyles","visuallyHidden","clip","overflow","position","top","SortableTableHead","onRequestSort","headerInfo","firstColumnEmpty","TableHead","TableRow","sortable","numeric","sortDirection","TableSortLabel","active","direction","MemoryTableRow","memoryTableEntry","object_size","objectSize","memoryTableEntryValues","nodeIpAddress","objectRef","referenceType","callSite","hover","useMemoryTableStyles","cell","memoryHeaderInfo","MemoryTable","tableEntries","setOrder","setOrderBy","getComparator","tableRows","tableEntry","elevation","Table","property","TableBody","useMemoryRowGroupStyles","paddingBottom","MemoryRowGroup","groupKey","groupTitle","initialExpanded","initialVisibleEntries","numVisibleEntries","setNumVisibleEntries","visibleEntries","groupBy","stackTrace","PyStackTrace","renderedFrames","frame","useMemoryInfoStyles","pauseButton","float","select","minWidth","memoryTableSelector","isEmpty","loadTimerComplete","mountedAt","getTime","MemoryInfo","dispatch","useDispatch","paused","setPaused","pauseButtonIcon","setGroupBy","fetchData","useCallback","intervalId","setInterval","clearInterval","CircularProgress","memoryGroup","shrink","Select","labelId","displayEmpty","MenuItem","Button","DialogWithTitle","handleClose","Dialog","paper","fullWidth","maxWidth","scroll","IconButton","closeButton","right","zIndex","borderBottomColor","borderBottomStyle","borderBottomWidth","lineHeight","NumberedLines","lines","line","classNames","lineNumber","Errors","setState","errors","clearErrorDialog","header","message","timestamp","fade","borderLeftColor","borderLeftStyle","borderLeftWidth","Logs","clearLogDialog","log","cpuFeature","ClusterFeatureRenderFn","nodes","cpuWeightedAverage","cpus","cpu","NodeFeatureRenderFn","WorkerFeatureRenderFn","worker","nodeAccessor","workerAccessor","diskFeature","used","disk","SpanButton","otherProps","button","ClusterErrors","totalErrCount","errorCount","makeNodeErrors","setErrorDialog","nodeErrorsAccessor","makeWorkerErrors","workerErrorsAccessor","makeErrorsFeature","RightPaddedTypography","nodeGPUUtilization","NaN","gpusWithUtilInfo","NodeGPUEntry","WorkerGPUEntry","resourceSlot","slotMsg","gpuFeature","clusterAverageUtilization","utils","util","isNaN","clusterGPUUtilization","hasGPU","workerRes","coreWorkerStats","workerUsedGPUResources","slot1","slot2","workerGPUUtilization","nodeGRAMUtilization","utilization","memoryUsed","memoryTotal","GRAMEntry","gpuName","MiBRatioNoPercent","gramFeature","clusterGRAMUtilization","nodeGRAMEntries","workerGRAMEntries","process","processes","gpuMemoryUsage","entry","nodeGRAMUtil","workerUtilPerGPU","proc","workerGRAMUtilization","hostFeature","hostname","cmdline","ClusterLogs","totalLogCount","logCount","makeNodeLogs","setLogDialog","nodeLogsAccessor","makeWorkerLogs","workerLogsAccessor","makeLogsFeature","objectStoreMemoryFeature","totalAvailable","raylet","objectStoreAvailableMemory","totalUsed","objectStoreUsedMemory","usageRatio","ramFeature","mem","memoryInfo","rss","receivedFeature","totalReceived","networkSpeed","sentFeature","totalSent","getUptime","bootTime","uptimeFeature","createTime","workersFeature","totalCpus","totalWorkers","workers","NodeWorkerRow","features","WorkerFeature","useNodeRowGroupStyles","expandCollapseCell","extraInfo","NodeRowGroup","rayletInfo","workerFeatureData","renderedNodeFeatures","nodeInfoFeature","FeatureComponent","colSpan","featureData","feature","useTotalRowStyles","borderTopColor","borderTopStyle","borderTopWidth","totalIcon","TotalRow","ClusterFeature","sortWorkers","sortWorkerComparator","idleSortedClusterWorkers","wfd1","wfd2","w1","w2","useNodeInfoStyles","table","liveNodesSelector","clients","nodeInfoHeaders","NodeInfo","logDialog","errorDialog","isGrouped","setIsGrouped","clusterTotalWorkers","nodeInfoFeatures","sortNodeAccessor","sortNodeComparator","sortWorkerAccessor","showGPUs","showDisk","filterPredicate","filteredFeatures","filteredHeaders","tableContents","sortGroupComparator","sortedClusterWorkers","makeGroupedTableContents","workerInfoFeatures","allWorkerFeatures","flatMap","workerFeatureDatum","makeUngroupedTableContents","FormControlLabel","control","Checkbox","checked","useRayConfigStyles","configSelector","RayConfig","refreshData","formattedRayConfig","autoscalingMode","headType","workerType","minWorkers","initialWorkers","maxWorkers","idleTimeoutMinutes","mapDispatchToProps","TuneErrors","currentError","handleOpen","jobId","trialId","Link","TuneTable","timeout","sortedColumn","ascending","metricParamColumn","metricColumns","paramColumns","errorTrial","onColumnClick","column","humanize","str","part","charAt","toUpperCase","sortedCell","chosenMetricParam","sortedTrialRecords","trialRecords","trialDetails","getAttribute","trial","handleMetricChoiceChange","metricChoices","metricNames","FormLabel","FormGroup","handleParamChoiceChange","paramChoices","paramNames","paramChecklist","firstTrial","paramsDict","k","viewableParams","paramOptions","metrics","viewableMetrics","metricOptions","checkboxRoot","stickyHeader","Number","overflowY","TuneTensorBoard","tensorBoardEnabled","loading","handleSubmit","then","tensorBoard","tensorboard","tensorboardCurrent","src","board","enabled","tensorboardEnabled","progress","size","Tune","tabIndex","refreshTuneInfo","available","window","handleTabChange","handleExperimentChange","handleExperimentSubmit","experimentChoice","prompt","heading","TextField","submit","trialsAvailable","tabs","SelectedComponent","Tabs","indicatorColor","textColor","Tab","fontsize","warningIcon","formControl","useDashboardStyles","tabSelector","tuneAvailabilitySelector","allTabs","Dashboard","history","useHistory","refreshInfo","Promise","all","view","splice","usageStatsPromptEnabled","setUsageStatsPromptEnabled","usageStatsEnabled","setUsageStatsEnabled","res","getEvents","pageMeta","infokv","li","code","wordBreak","EventTable","job_id","nodeMap","useContext","GlobalContext","setLoading","_changeFilter","events","setEvents","jobOptions","setJobOp","pageNo","pageSize","pagination","setPagination","realLen","getEvent","rsp","concat","p","ceil","range","isJob","changePage","labelOptions","Array","from","Set","hostOptions","sourceHostname","hostName","sourceOptions","sourceType","severityOptions","reverseEvents","reverse","useEventTable","LinearProgress","Autocomplete","options","onInputChange","renderInput","InputProps","endAdornment","InputAdornment","SearchOutlined","Pagination","count","page","timeStamp","sourcePid","eventId","jobName","customFields","realTimestamp","format","realPid","interactive","stringify","Chip","to","useStyle","Events","fn","Logo","alt","store","configureStore","devTools","basicTheme","MuiPaper","lightTheme","createMuiTheme","disabled","hint","default","darkTheme","Actors","lazy","CMDResult","Index","Job","JobDetail","BasicLayout","Node","NodeDetail","RAY_DASHBOARD_THEME_KEY","createContext","ipLogMap","namespaceMap","localStorage","getItem","getLocalStorage","setLocalTheme","setItem","App","_setTheme","context","setContext","setTheme","forEach","logUrl","ThemeProvider","fallback","Loading","Provider","CssBaseline","exact"],"mappings":"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","file":"static/js/main.73cb1aa0.chunk.js","sourcesContent":["export enum ActorEnum {\n  ALIVE = \"ALIVE\",\n  PENDING = \"PENDING\",\n  RECONSTRUCTING = \"RECONSTRUCTING\",\n  DEAD = \"DEAD\",\n}\n\nexport type Address = {\n  rayletId: string;\n  ipAddress: string;\n  port: number;\n  workerId: string;\n};\n\nexport type TaskSpec = {\n  actorCreationTaskSpec: {\n    actorId: string;\n    dynamicWorkerOptions: string[];\n    extensionData: string;\n    isAsyncio: boolean;\n    isDetached: boolean;\n    maxActorRestarts: boolean;\n    maxConcurrency: number;\n    name: string;\n  };\n  args: {\n    data: string;\n    metadata: string;\n    nestedInlinedIds: string[];\n    objectIds: string[];\n  }[];\n  callerAddress: {\n    ipAddress: string;\n    port: number;\n    rayletId: string;\n    workerId: string;\n  };\n  callerId: string;\n  functionDescriptor: {\n    javaFunctionDescriptor: {\n      className: string;\n      functionName: string;\n      signature: string;\n    };\n    pythonFunctionDescriptor: {\n      className: string;\n      functionName: string;\n      signature: string;\n    };\n  };\n  jobId: string;\n  language: string;\n  maxRetries: number;\n  numReturns: string;\n  parentCounter: string;\n  parentTaskId: string;\n  requiredPlacementResources: {\n    [key: string]: number;\n  };\n  requiredResources: {\n    [key: string]: number;\n  };\n  sourceActorId: string;\n  taskId: string;\n  type: string;\n};\n\nexport type Actor = {\n  actorId: string;\n  jobId: string;\n  state: ActorEnum | string; // PENDING, ALIVE, RECONSTRUCTING, DEAD\n  nodeId: string;\n  pid: number;\n  address: Address;\n  name: string;\n  numRestarts: string;\n  taskSpec: TaskSpec;\n};\n","import { Color } from \"@material-ui/core\";\nimport {\n  blue,\n  blueGrey,\n  cyan,\n  green,\n  grey,\n  lightBlue,\n  red,\n} from \"@material-ui/core/colors\";\nimport { CSSProperties } from \"@material-ui/core/styles/withStyles\";\nimport React, { ReactNode } from \"react\";\nimport { ActorEnum } from \"../type/actor\";\n\nconst colorMap = {\n  node: {\n    ALIVE: green,\n    DEAD: red,\n  },\n  actor: {\n    [ActorEnum.ALIVE]: green,\n    [ActorEnum.DEAD]: red,\n    [ActorEnum.PENDING]: blue,\n    [ActorEnum.RECONSTRUCTING]: lightBlue,\n  },\n  job: {\n    INIT: grey,\n    SUBMITTED: blue,\n    DISPATCHED: lightBlue,\n    RUNNING: green,\n    COMPLETED: cyan,\n    FINISHED: cyan,\n    FAILED: red,\n  },\n} as {\n  [key: string]: {\n    [key: string]: Color;\n  };\n};\n\nconst typeMap = {\n  deps: blue,\n  INFO: cyan,\n  ERROR: red,\n} as {\n  [key: string]: Color;\n};\n\nexport const StatusChip = ({\n  type,\n  status,\n  suffix,\n}: {\n  type: string;\n  status: string | ActorEnum | ReactNode;\n  suffix?: string;\n}) => {\n  const style = {\n    padding: \"2px 8px\",\n    border: \"solid 1px\",\n    borderRadius: 4,\n    fontSize: 12,\n    margin: 2,\n  } as CSSProperties;\n\n  let color = blueGrey as Color;\n\n  if (typeMap[type]) {\n    color = typeMap[type];\n  } else if (\n    typeof status === \"string\" &&\n    colorMap[type] &&\n    colorMap[type][status]\n  ) {\n    color = colorMap[type][status];\n  }\n\n  style.color = color[500];\n  style.borderColor = color[500];\n  if (color !== blueGrey) {\n    style.backgroundColor = `${color[500]}20`;\n  }\n\n  return (\n    <span style={style}>\n      {status}\n      {suffix}\n    </span>\n  );\n};\n","import { makeStyles, Paper } from \"@material-ui/core\";\nimport React, { PropsWithChildren, ReactNode } from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    padding: theme.spacing(2),\n    paddingTop: theme.spacing(1.5),\n    margin: [theme.spacing(2), theme.spacing(1)].map((e) => `${e}px`).join(\" \"),\n  },\n  title: {\n    fontSize: theme.typography.fontSize + 2,\n    fontWeight: 500,\n    color: theme.palette.text.secondary,\n    marginBottom: theme.spacing(1),\n  },\n  body: {\n    padding: theme.spacing(0.5),\n  },\n}));\n\nconst TitleCard = ({\n  title,\n  children,\n}: PropsWithChildren<{ title: ReactNode | string }>) => {\n  const classes = useStyles();\n  return (\n    <Paper className={classes.card}>\n      <div className={classes.title}>{title}</div>\n      <div className={classes.body}>{children}</div>\n    </Paper>\n  );\n};\n\nexport default TitleCard;\n","import { get } from \"lodash\";\nimport { useState } from \"react\";\n\nexport const useFilter = <KeyType extends string>() => {\n  const [filters, setFilters] = useState<{ key: KeyType; val: string }[]>([]);\n  const changeFilter = (key: KeyType, val: string) => {\n    const f = filters.find((e) => e.key === key);\n    if (f) {\n      f.val = val;\n    } else {\n      filters.push({ key, val });\n    }\n    setFilters([...filters]);\n  };\n  const filterFunc = (instance: { [key: string]: any }) => {\n    return filters.every(\n      (f) => !f.val || get(instance, f.key, \"\").toString().includes(f.val),\n    );\n  };\n\n  return {\n    changeFilter,\n    filterFunc,\n  };\n};\n\nexport const useSorter = (initialSortKey?: string) => {\n  const [sorter, setSorter] = useState({\n    key: initialSortKey || \"\",\n    desc: false,\n  });\n\n  const sorterFunc = (\n    instanceA: { [key: string]: any },\n    instanceB: { [key: string]: any },\n  ) => {\n    if (!sorter.key) {\n      return 0;\n    }\n\n    let [b, a] = [instanceA, instanceB];\n    if (sorter.desc) {\n      [a, b] = [instanceA, instanceB];\n    }\n\n    if (!get(a, sorter.key)) {\n      return -1;\n    }\n\n    if (!get(b, sorter.key)) {\n      return 1;\n    }\n\n    return get(a, sorter.key) > get(b, sorter.key) ? 1 : -1;\n  };\n\n  return {\n    sorterFunc,\n    setSortKey: (key: string) => setSorter({ ...sorter, key }),\n    setOrderDesc: (desc: boolean) => setSorter({ ...sorter, desc }),\n    sorterKey: sorter.key,\n  };\n};\n","import { NodeDetailRsp, NodeListRsp } from \"../type/node\";\nimport { get } from \"./requestHandlers\";\n\nexport const getNodeList = async () => {\n  return await get<NodeListRsp>(\"nodes?view=summary\");\n};\n\nexport const getNodeDetail = async (id: string) => {\n  return await get<NodeDetailRsp>(`nodes/${id}`);\n};\n","import dayjs from \"dayjs\";\nimport low from \"lowlight\";\nimport React, { MutableRefObject, useEffect, useRef, useState } from \"react\";\nimport { FixedSizeList as List } from \"react-window\";\nimport \"./darcula.css\";\nimport \"./github.css\";\nimport \"./index.css\";\nimport { getDefaultTheme } from \"../../App\";\n\nconst uniqueKeySelector = () => Math.random().toString(16).slice(-8);\n\nconst timeReg =\n  /(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)\\s+([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]/;\n\nconst value2react = (\n  { type, tagName, properties, children, value = \"\" }: any,\n  key: string,\n  keywords: string = \"\",\n) => {\n  switch (type) {\n    case \"element\":\n      return React.createElement(\n        tagName,\n        {\n          className: properties.className[0],\n          key: `${key}line${uniqueKeySelector()}`,\n        },\n        children.map((e: any, i: number) =>\n          value2react(e, `${key}-${i}`, keywords),\n        ),\n      );\n    case \"text\":\n      if (keywords && value.includes(keywords)) {\n        const afterChildren = [];\n        const vals = value.split(keywords);\n        let tmp = vals.shift();\n        if (!tmp) {\n          return React.createElement(\n            \"span\",\n            { className: \"find-kws\" },\n            keywords,\n          );\n        }\n        while (typeof tmp === \"string\") {\n          if (tmp !== \"\") {\n            afterChildren.push(tmp);\n          } else {\n            afterChildren.push(\n              React.createElement(\"span\", { className: \"find-kws\" }, keywords),\n            );\n          }\n\n          tmp = vals.shift();\n          if (tmp) {\n            afterChildren.push(\n              React.createElement(\"span\", { className: \"find-kws\" }, keywords),\n            );\n          }\n        }\n        return afterChildren;\n      }\n      return value;\n    default:\n      return [];\n  }\n};\n\nexport type LogVirtualViewProps = {\n  content: string;\n  width?: number;\n  height?: number;\n  fontSize?: number;\n  theme?: \"light\" | \"dark\";\n  language?: string;\n  focusLine?: number;\n  keywords?: string;\n  style?: { [key: string]: string | number };\n  listRef?: MutableRefObject<HTMLDivElement | null>;\n  onScrollBottom?: (event: Event) => void;\n  revert?: boolean;\n  startTime?: string;\n  endTime?: string;\n};\n\nconst LogVirtualView: React.FC<LogVirtualViewProps> = ({\n  content,\n  width = \"100%\",\n  height,\n  fontSize = 12,\n  theme = getDefaultTheme(),\n  keywords = \"\",\n  language = \"dos\",\n  focusLine = 1,\n  style = {},\n  listRef,\n  onScrollBottom,\n  revert = false,\n  startTime,\n  endTime,\n}) => {\n  const [logs, setLogs] = useState<{ i: number; origin: string }[]>([]);\n  const total = logs.length;\n  const timmer = useRef<ReturnType<typeof setTimeout>>();\n  const el = useRef<List>(null);\n  const outter = useRef<HTMLDivElement>(null);\n  if (listRef) {\n    listRef.current = outter.current;\n  }\n  const itemRenderer = ({ index, style }: { index: number; style: any }) => {\n    const { i, origin } = logs[revert ? logs.length - 1 - index : index];\n    return (\n      <div\n        key={`${index}list`}\n        style={{ ...style, overflowX: \"visible\", whiteSpace: \"pre\" }}\n      >\n        <span\n          style={{\n            marginRight: 4,\n            width: `${logs.length}`.length * 6 + 4,\n            color: \"#999\",\n            display: \"inline-block\",\n          }}\n        >\n          {i + 1}\n        </span>\n        {low\n          .highlight(language, origin)\n          .value.map((v) => value2react(v, index.toString(), keywords))}\n      </div>\n    );\n  };\n\n  useEffect(() => {\n    const originContent = content.split(\"\\n\");\n    if (timmer.current) {\n      clearTimeout(timmer.current);\n    }\n    timmer.current = setTimeout(() => {\n      setLogs(\n        originContent\n          .map((e, i) => ({\n            i,\n            origin: e,\n            time: (e?.match(timeReg) || [\"\"])[0],\n          }))\n          .filter((e) => {\n            let bool = e.origin.includes(keywords);\n            if (\n              e.time &&\n              startTime &&\n              !dayjs(e.time).isAfter(dayjs(startTime))\n            ) {\n              bool = false;\n            }\n            if (e.time && endTime && !dayjs(e.time).isBefore(dayjs(endTime))) {\n              bool = false;\n            }\n            return bool;\n          })\n          .map((e) => ({\n            ...e,\n          })),\n      );\n    }, 500);\n  }, [content, keywords, language, startTime, endTime]);\n\n  useEffect(() => {\n    if (el.current) {\n      el.current?.scrollTo((focusLine - 1) * (fontSize + 6));\n    }\n  }, [focusLine, fontSize]);\n\n  useEffect(() => {\n    let outterCurrentValue: any = null;\n    if (outter.current) {\n      const scrollFunc = (event: any) => {\n        const { target } = event;\n        if (\n          target &&\n          target.scrollTop + target.clientHeight === target.scrollHeight\n        ) {\n          if (onScrollBottom) {\n            onScrollBottom(event);\n          }\n        }\n        outterCurrentValue = outter.current;\n      };\n      outter.current.addEventListener(\"scroll\", scrollFunc);\n      return () => {\n        if (outterCurrentValue) {\n          outterCurrentValue.removeEventListener(\"scroll\", scrollFunc);\n        }\n      };\n    }\n  }, [onScrollBottom]);\n\n  return (\n    <List\n      height={height || (content.split(\"\\n\").length + 1) * 18}\n      width={width}\n      ref={el}\n      outerRef={outter}\n      className={`hljs-${theme}`}\n      style={{\n        fontSize,\n        fontFamily: \"menlo, monospace\",\n        ...style,\n      }}\n      itemSize={fontSize + 6}\n      itemCount={total}\n    >\n      {itemRenderer}\n    </List>\n  );\n};\n\nexport default LogVirtualView;\n","export default __webpack_public_path__ + \"static/media/logo.3704c1bb.svg\";","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"typeface-roboto\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","/**\n * This utility file formats and sends HTTP requests such that\n * they fullfill the requirements expected by users of the dashboard.\n *\n * All HTTP requests should be sent using the helpers in this file.\n *\n * More HTTP Methods helpers should be added to this file when the need\n * arises.\n */\n\nimport axios, { AxiosRequestConfig, AxiosResponse } from \"axios\";\n\n/**\n * This function formats URLs such that the user's browser\n * sets the HTTP request's Request URL relative to the path at\n * which the dashboard is served.\n * This works behind a reverse proxy.\n *\n * @param {String} url The URL to be hit\n * @return {String}    The reverse proxy compatible URL\n */\nexport const formatUrl = (url: string): string => {\n  if (url.startsWith(\"/\")) {\n    return url.slice(1);\n  }\n  return url;\n};\n\nexport const get = <T = any, R = AxiosResponse<T>>(\n  url: string,\n  config?: AxiosRequestConfig,\n): Promise<R> => {\n  return axios.get<T, R>(formatUrl(url), config);\n};\n","import { formatUrl } from \"./service/requestHandlers\";\n\ntype APIResponse<T> = {\n  result: boolean;\n  msg: string;\n  data?: T;\n};\n// TODO(mitchellstern): Add JSON schema validation for the responses.\nconst get = async <T>(path: string, params: { [key: string]: any }) => {\n  const formattedParams = Object.entries(params)\n    .map((pair) => pair.join(\"=\"))\n    .join(\"&\");\n  const url = [formatUrl(path), formattedParams].filter((x) => x!!).join(\"?\");\n\n  const response = await fetch(url);\n  const json: APIResponse<T> = await response.json();\n\n  const { result, msg, data } = json;\n\n  if (!result) {\n    throw Error(msg);\n  }\n\n  return data as T;\n};\n\nexport type RayConfigResponse = {\n  minWorkers: number;\n  maxWorkers: number;\n  initialWorkers: number;\n  autoscalingMode: string;\n  idleTimeoutMinutes: number;\n  headType: string;\n  workerType: string;\n};\n\nexport const getRayConfig = () => get<RayConfigResponse>(\"/api/ray_config\", {});\n\nexport type UsageStatsEnabledResponse = {\n  usageStatsEnabled: boolean;\n  usageStatsPromptEnabled: boolean;\n};\n\nexport const getUsageStatsEnabled = () =>\n  get<UsageStatsEnabledResponse>(\"/usage_stats_enabled\", {});\n\ntype ProcessStats = {\n  pid: number;\n  memoryInfo: {\n    rss: number;\n    vms: number;\n    shared: number;\n    text: number;\n    lib: number;\n    data: number;\n    dirty: Number;\n  };\n  createTime: number;\n  cmdline: string[];\n  cpuTimes: {\n    user: number;\n    system: number;\n    childrenUser: number;\n    childrenSystem: number;\n    iowait: number;\n  };\n  cpuPercent: number;\n};\n\nexport type Worker = {\n  pid: number;\n  workerId: string;\n  logCount?: number;\n  errorCount?: number;\n  language: string;\n  jobId: string;\n  coreWorkerStats: CoreWorkerStats[];\n} & ProcessStats;\n\nexport type CoreWorkerStats = {\n  ipAddress: string;\n  port: number;\n  usedResources?: { [key: string]: ResourceAllocations };\n  numExecutedTasks: number;\n  workerId: string;\n  // We need the below but Ant's API does not yet support it.\n};\n\nexport type GPUProcessStats = {\n  // Sub stat of GPU stats, this type represents the GPU\n  // utilization of a single process of a single GPU.\n  username: string;\n  command: string;\n  gpuMemoryUsage: number;\n  pid: number;\n};\n\nexport type GPUStats = {\n  // This represents stats fetched from a node about a single GPU\n  uuid: string;\n  name: string;\n  temperatureGpu: number;\n  fanSpeed: number;\n  utilizationGpu?: number;\n  powerDraw: number;\n  enforcedPowerLimit: number;\n  memoryUsed: number;\n  memoryTotal: number;\n  processes: GPUProcessStats[];\n};\n\nexport type NodeSummary = BaseNodeInfo;\n\nexport type NodeDetails = {\n  workers: Worker[];\n  raylet: RayletData;\n} & BaseNodeInfo;\n\nexport type RayletData = {\n  // Merger of GCSNodeInfo and GetNodeStatsReply\n  // GetNodeStatsReply fields.\n  // Note workers are in an array in NodeDetails\n  objectStoreUsedMemory: number;\n  objectStoreAvailableMemory: number;\n  numWorkers: number;\n\n  // GCSNodeStats fields\n  nodeId: number;\n  nodeManagerAddress: string;\n  rayletSocketName: string;\n  objectStoreSocketName: string;\n  nodeManagerPort: number;\n  objectManagerPort: number;\n  state: \"ALIVE\" | \"DEAD\";\n  nodeManagerHostname: string;\n  metricsExportPort: number;\n};\n\nexport type ViewData = {\n  viewName: string;\n  measures: Measure[];\n};\n\nexport type Measure = {\n  tags: string; // e.g.  \"Tag1:Value1,Tag2:Value2,Tag3:Value3\"\n  intValue?: number;\n  doubleValue?: number;\n  distributionMin?: number;\n  distributionMean?: number;\n  distributionMax?: number;\n  distributionCount?: number;\n  distributionBucketBoundaries?: number[];\n  distributionBucketCounts?: number[];\n};\n\ntype BaseNodeInfo = {\n  now: number;\n  hostname: string;\n  ip: string;\n  bootTime: number; // System boot time expressed in seconds since epoch\n  cpu: number; // System-wide CPU utilization expressed as a percentage\n  cpus: [number, number]; // Number of logical CPUs and physical CPUs\n  gpus: Array<GPUStats>; // GPU stats fetched from node, 1 entry per GPU\n  mem: [number, number, number, number]; // Total (bytes), available (bytes), used (percentage), and used (bytes) of memory\n  disk: {\n    [dir: string]: {\n      total: number;\n      free: number;\n      used: number;\n      percent: number;\n    };\n  };\n  loadAvg: [[number, number, number], [number, number, number]];\n  networkSpeed: [number, number]; // Sent and received network traffic in bytes / second\n  logCount?: number;\n  errorCount?: number;\n};\n\nexport type NodeInfoResponse = {\n  clients: NodeDetails[];\n};\n\nexport const getNodeInfo = () =>\n  get<NodeInfoResponse>(\"/nodes\", { view: \"details\" });\n\nexport type ResourceSlot = {\n  slot: number;\n  allocation: number;\n};\n\nexport type ResourceAllocations = {\n  resourceSlots: ResourceSlot[];\n};\n\nexport const getActorGroups = () =>\n  get<ActorsResponse>(\"logical/actor_groups\", {});\n\nexport enum ActorState {\n  // These two are virtual states that we air because there is\n  // an existing task to create an actor\n  Infeasible = \"INFEASIBLE\", // Actor task is waiting on resources (e.g. RAM, CPUs or GPUs) that the cluster does not have\n  PendingResources = \"PENDING_RESOURCES\", // Actor task is waiting on resources the cluster has but are in-use\n  // The rest below are \"official\" GCS actor states\n  DependenciesUnready = \"PENDING\", // Actor is pending on an argument to be ready\n  PendingCreation = \"CREATING\", // Actor creation is running\n  Alive = \"ALIVE\", // Actor is alive and handling tasks\n  Restarting = \"RESTARTING\", // Actor died and is being restarted\n  Dead = \"DEAD\", // Actor died and is not being restarted\n}\n\nexport type ActorInfo = FullActorInfo | ActorTaskInfo;\n\nexport type FullActorInfo = {\n  actorId: string;\n  actorConstructor: string;\n  actorClass: string;\n  ipAddress: string;\n  jobId: string;\n  nodeId: string;\n  numExecutedTasks?: number;\n  numLocalObjects?: number;\n  numObjectRefsInScope?: number;\n  pid: number;\n  port: number;\n  state:\n    | ActorState.Alive\n    | ActorState.Restarting\n    | ActorState.Dead\n    | ActorState.DependenciesUnready\n    | ActorState.PendingCreation;\n  taskQueueLength?: number;\n  gpus: GPUStats[]; // Contains info about any GPUs the actor is using\n  timestamp: number;\n  usedObjectStoreMemory?: number;\n  usedResources: { [key: string]: ResourceAllocations };\n  currentTaskDesc?: string;\n  numPendingTasks?: number;\n  webuiDisplay?: Record<string, string>;\n  processStats?: ProcessStats;\n};\n\nexport type ActorTaskInfo = {\n  actorId: string;\n  actorClass: string;\n  requiredResources?: { [key: string]: number };\n  state: ActorState.Infeasible | ActorState.PendingResources;\n};\n\n// eslint-disable-next-line\nexport function isFullActorInfo(\n  actorInfo: ActorInfo,\n): actorInfo is FullActorInfo {\n  // Lint disabled because arrow functions don't play well with type guards.\n  // This function is used to determine what kind of information we have about\n  // a given actor in a response based on its state.\n  return (\n    actorInfo.state !== ActorState.Infeasible &&\n    actorInfo.state !== ActorState.PendingResources\n  );\n}\n\nexport type ActorGroupSummary = {\n  stateToCount: { [state in ActorState]: number };\n  avgLifetime: number;\n  maxLifetime: number;\n  numExecutedTasks: number;\n};\n\nexport type ActorGroup = {\n  entries: ActorInfo[];\n  summary: ActorGroupSummary;\n};\n\nexport type ActorsResponse = {\n  actorGroups: {\n    [key: string]: ActorGroup;\n  };\n};\n\nexport type ErrorsResponse = {\n  errors: ErrorsByPid;\n};\n\nexport type ErrorsByPid = {\n  [pid: string]: {\n    message: string;\n    timestamp: number;\n    type: string;\n  }[];\n};\nexport const getErrors = (nodeIp: string, pid: number | null) =>\n  get<ErrorsResponse>(\"/node_errors\", {\n    nodeIp,\n    pid: pid ?? \"\",\n  });\n\nexport type LogsResponse = {\n  logs: LogsByPid;\n};\n\nexport type LogsByPid = {\n  [pid: string]: string[];\n};\n\nexport const getLogs = (nodeIp: string, pid: number | null) =>\n  get<LogsResponse>(\"/node_logs\", {\n    ip: nodeIp,\n    pid: pid ?? \"\",\n  });\n\nexport type LaunchProfilingResponse = string;\n\nexport const launchProfiling = (\n  nodeId: string,\n  pid: number,\n  duration: number,\n) =>\n  get<LaunchProfilingResponse>(\"/api/launch_profiling\", {\n    node_id: nodeId,\n    pid: pid,\n    duration: duration,\n  });\n\nexport type CheckProfilingStatusResponse =\n  | { status: \"pending\" }\n  | { status: \"finished\" }\n  | { status: \"error\"; error: string };\n\nexport const checkProfilingStatus = (profilingId: string) =>\n  get<CheckProfilingStatusResponse>(\"/api/check_profiling_status\", {\n    profiling_id: profilingId,\n  });\n\nexport const getProfilingResultURL = (profilingId: string) => {\n  const uriComponent = encodeURIComponent(\n    formatUrl(`/api/get_profiling_info?profiling_id=${profilingId}`),\n  );\n  return formatUrl(`/speedscope/index.html#profileURL=${uriComponent}`);\n};\n\nexport const launchKillActor = (\n  actorId: string,\n  actorIpAddress: string,\n  actorPort: number,\n) =>\n  get<{}>(\"/logical/kill_actor\", {\n    // make sure object is okay\n    actorId: actorId,\n    ipAddress: actorIpAddress,\n    port: actorPort,\n  });\n\nexport type TuneTrial = {\n  date: string;\n  episodesTotal: string;\n  experimentId: string;\n  experimentTag: string;\n  hostname: string;\n  iterationsSinceRestore: number;\n  logdir: string;\n  nodeIp: string;\n  pid: number;\n  timeSinceRestore: number;\n  timeThisIterS: number;\n  timeTotalS: number;\n  timestamp: number;\n  timestepsSinceRestore: number;\n  timestepsTotal: number;\n  trainingIteration: number;\n  startTime: string;\n  status: string;\n  trialId: string | number;\n  jobId: string;\n  params: { [key: string]: string | number };\n  metrics: { [key: string]: string | number };\n  error: string;\n};\n\nexport type TuneError = {\n  text: string;\n  jobId: string;\n  trialId: string;\n};\n\nexport type TuneJobResponse = {\n  result: TuneJob;\n};\n\nexport type TuneJob = {\n  trialRecords: { [key: string]: TuneTrial };\n  errors: { [key: string]: TuneError };\n  tensorboard: {\n    tensorboardCurrent: boolean;\n    tensorboardEnabled: boolean;\n  };\n};\n\nexport const getTuneInfo = () => get<TuneJobResponse>(\"/tune/info\", {});\n\nexport type TuneAvailability = {\n  available: boolean;\n  trialsAvailable: boolean;\n};\n\nexport type TuneAvailabilityResponse = {\n  result: TuneAvailability;\n};\n\nexport const getTuneAvailability = () =>\n  get<TuneAvailabilityResponse>(\"/tune/availability\", {});\n\nexport type TuneSetExperimentResponse = {\n  experiment: string;\n};\n\nexport const setTuneExperiment = (experiment: string) =>\n  get<TuneSetExperimentResponse>(\"/tune/set_experiment\", {\n    experiment: experiment,\n  });\n\nexport const enableTuneTensorBoard = () =>\n  get<{}>(\"/tune/enable_tensorboard\", {});\n\nexport type MemoryTableSummary = {\n  totalActorHandles: number;\n  totalCapturedInObjects: number;\n  totalLocalRefCount: number;\n  // The measurement is B.\n  totalObjectSize: number;\n  totalPinnedInMemory: number;\n  totalUsedByPendingTask: number;\n};\n\nexport type MemoryTableEntry = {\n  nodeIpAddress: string;\n  pid: number;\n  type: string;\n  objectRef: string;\n  objectSize: number;\n  referenceType: string;\n  callSite: string;\n};\n\nexport type MemoryTable = {\n  group: MemoryTableGroups;\n  summary: MemoryTableSummary;\n};\n\nexport type MemoryTableGroups = {\n  [groupKey: string]: MemoryTableGroup;\n};\n\nexport type MemoryTableGroup = {\n  entries: MemoryTableEntry[];\n  summary: MemoryTableSummary;\n};\n\nexport type MemoryTableResponse = {\n  memoryTable: MemoryTable;\n};\n\n// This doesn't return anything.\nexport type StopMemoryTableResponse = {};\n\nexport type MemoryGroupByKey = \"node\" | \"stack_trace\" | \"\";\n\nexport const getMemoryTable = async (groupByKey: MemoryGroupByKey) => {\n  return get<MemoryTableResponse>(\"/memory/memory_table\", {\n    groupBy: groupByKey,\n  });\n};\n\nexport const setMemoryTableCollection = (value: boolean) =>\n  get<{}>(\"/memory/set_fetch\", { shouldFetch: value });\n","import {\n  createStyles,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"../../store\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      marginTop: theme.spacing(2),\n    },\n    lastUpdated: {\n      color: theme.palette.text.secondary,\n      fontSize: \"0.8125rem\",\n      textAlign: \"center\",\n    },\n    error: {\n      color: theme.palette.error.main,\n      fontSize: \"0.8125rem\",\n      textAlign: \"center\",\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  lastUpdatedAt: state.dashboard.lastUpdatedAt,\n  error: state.dashboard.error,\n});\n\nclass LastUpdated extends React.Component<\n  WithStyles<typeof styles> & ReturnType<typeof mapStateToProps>\n> {\n  render() {\n    const { classes, lastUpdatedAt, error } = this.props;\n    return (\n      <div className={classes.root}>\n        {lastUpdatedAt !== null && (\n          <Typography className={classes.lastUpdated}>\n            Last updated: {new Date(lastUpdatedAt).toLocaleString()}\n          </Typography>\n        )}\n        {error !== null && (\n          <Typography className={classes.error}>{error}</Typography>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(withStyles(styles)(LastUpdated));\n","export const descendingComparator = <T>(a: T, b: T, orderBy: keyof T) => {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n};\n\nconst descendingComparatorFnAccessor = <T>(\n  a: T,\n  b: T,\n  orderByFn: Accessor<T>,\n) => {\n  const aVal = orderByFn(a);\n  const bVal = orderByFn(b);\n  if (bVal < aVal) {\n    return -1;\n  }\n  if (bVal > aVal) {\n    return 1;\n  }\n  return 0;\n};\n\nexport type Order = \"asc\" | \"desc\";\nexport type Comparator<T> = (a: T, b: T) => number;\nexport type Accessor<T> = (a: T) => number | string;\n\nexport const getComparator = <Key extends keyof any>(\n  order: Order,\n  orderBy: Key,\n): ((\n  a: { [key in Key]: number | string },\n  b: { [key in Key]: number | string },\n) => number) => {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n};\n\nexport const getFnComparator =\n  <T>(order: Order, orderByFn: Accessor<T>) =>\n  (a: T, b: T): number => {\n    return order === \"desc\"\n      ? descendingComparatorFnAccessor(a, b, orderByFn)\n      : -descendingComparatorFnAccessor(a, b, orderByFn);\n  };\n\nexport const stableSort = <T>(array: T[], comparator: Comparator<T>) => {\n  const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) {\n      return order;\n    }\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n};\n","export const getWeightedAverage = (\n  input: {\n    weight: number;\n    value: number;\n  }[],\n) => {\n  if (input.length === 0) {\n    return 0;\n  }\n\n  let totalWeightTimesValue = 0;\n  let totalWeight = 0;\n  for (const { weight, value } of input) {\n    totalWeightTimesValue += weight * value;\n    totalWeight += weight;\n  }\n  return totalWeightTimesValue / totalWeight;\n};\n\nexport const sum = (vals: number[]) => vals.reduce((acc, val) => acc + val, 0);\n\nexport const filterObj = (obj: Object, filterFn: any) =>\n  Object.fromEntries(Object.entries(obj).filter(filterFn));\n\nexport const mapObj = (obj: Object, filterFn: any) =>\n  Object.fromEntries(Object.entries(obj).map(filterFn));\n","import ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport React from \"react\";\n\ntype MinimizerProps = {\n  onClick: React.MouseEventHandler;\n};\n\ntype ExpanderProps = {\n  onClick: React.MouseEventHandler;\n};\n\nexport const Minimizer: React.FC<MinimizerProps> = ({ onClick }) => (\n  <ExpandLessIcon onClick={onClick} />\n);\n\nexport const Expander: React.FC<ExpanderProps> = ({ onClick }) => (\n  <ExpandMoreIcon onClick={onClick} />\n);\n","import { Box, Grid, makeStyles, Tooltip } from \"@material-ui/core\";\nimport React, { ReactChild } from \"react\";\n\ntype LabeledDatumProps = {\n  label: ReactChild;\n  datum: any;\n  tooltip?: string;\n};\n\nconst useLabeledDatumStyles = makeStyles({\n  tooltipLabel: {\n    textDecorationLine: \"underline\",\n    textDecorationColor: \"#a6c3e3\",\n    textDecorationThickness: \"1px\",\n    textDecorationStyle: \"dotted\",\n    cursor: \"help\",\n  },\n});\n\nconst LabeledDatum: React.FC<LabeledDatumProps> = ({\n  label,\n  datum,\n  tooltip,\n}) => {\n  const classes = useLabeledDatumStyles();\n  const innerHtml = (\n    <Grid container item xs={12}>\n      <Grid item xs={6}>\n        <Box className={tooltip && classes.tooltipLabel}>{label}</Box>\n      </Grid>\n      <Grid item xs={6}>\n        <span>{datum}</span>\n      </Grid>\n    </Grid>\n  );\n  return tooltip ? <Tooltip title={tooltip}>{innerHtml}</Tooltip> : innerHtml;\n};\n\nexport default LabeledDatum;\n","import { createStyles, makeStyles, Theme, Typography } from \"@material-ui/core\";\nimport React from \"react\";\n\nconst blend = (\n  [r1, g1, b1]: number[],\n  [r2, g2, b2]: number[],\n  ratio: number,\n) => [\n  r1 * (1 - ratio) + r2 * ratio,\n  g1 * (1 - ratio) + g2 * ratio,\n  b1 * (1 - ratio) + b2 * ratio,\n];\n\nconst useUsageBarStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      borderColor: theme.palette.divider,\n      borderStyle: \"solid\",\n      borderWidth: 1,\n      display: \"flex\",\n      flexGrow: 1,\n    },\n    inner: {\n      paddingLeft: theme.spacing(1),\n      paddingRight: theme.spacing(1),\n    },\n  }),\n);\n\ntype UsageBarProps = {\n  percent: number;\n  text: string;\n};\n\nconst UsageBar: React.FC<UsageBarProps> = ({ percent, text }) => {\n  const classes = useUsageBarStyles();\n  const safePercent = Math.max(Math.min(percent, 100), 0);\n  const minColor = [0, 255, 0];\n  const maxColor = [255, 0, 0];\n\n  const leftColor = minColor;\n  const rightColor = blend(minColor, maxColor, safePercent / 100);\n  const alpha = 0.2;\n\n  const gradient = `\n    linear-gradient(\n      to right,\n      rgba(${leftColor.join(\",\")}, ${alpha}) 0%,\n      rgba(${rightColor.join(\",\")}, ${alpha}) ${safePercent}%,\n      transparent ${safePercent}%\n    )\n  `;\n\n  // Use a nested `span` here because the right border is affected by the\n  // gradient background otherwise.\n  return (\n    <span className={classes.root}>\n      <span\n        className={classes.inner}\n        style={{ background: gradient, flexGrow: 1 }}\n      >\n        <Typography align=\"center\">{text}</Typography>\n      </span>\n    </span>\n  );\n};\n\nexport default UsageBar;\n","import {\n  createStyles,\n  makeStyles,\n  Theme,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { ActorState } from \"../../../api\";\n\ntype ActorStateReprProps = {\n  state: ActorState;\n  showTooltip?: boolean;\n  variant?: any;\n};\n\nconst {\n  Alive,\n  Dead,\n  PendingCreation,\n  Restarting,\n  DependenciesUnready,\n  Infeasible,\n  PendingResources,\n} = ActorState;\n\nconst useActorStateReprStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    infeasible: {\n      color: theme.palette.error.light,\n    },\n    pendingResources: {\n      color: theme.palette.warning.light,\n    },\n    unknown: {\n      color: theme.palette.warning.light,\n    },\n    creating: {\n      color: theme.palette.success.light,\n    },\n    alive: {\n      color: theme.palette.success.dark,\n    },\n    restarting: {\n      color: theme.palette.warning.light,\n    },\n    dead: {\n      color: \"#cccccc\",\n    },\n    tooltip: {\n      cursor: \"help\",\n    },\n  }),\n);\nconst infeasibleTooltip =\n  \"The actor cannot be created because of insufficient resources in the cluster. Please examine its resource constraints to make sure they are correct or add additional compute to your cluster.\";\nconst pendingResourcesTooltip =\n  \"The actor is pending resources, such as GPU, Memory, or CPU. It will be created when they become available.\";\nconst aliveTooltip = \"The actor is alive and handling remote calls.\";\nconst deadTooltip = \"The actor is dead and will not be restarted anymore.\";\nconst restartingTooltip = \"The actor died and is restarting.\";\nconst pendingCreationTooltip =\n  \"The actor's resources and other dependencies are ready, and the Ray backend is processing its creation.\";\nconst dependenciesUnreadyTooltip =\n  \"The actor is pending creation because it is waiting for one or more of its initialization arguments to be ready.\";\n\nconst stateToTooltip = {\n  [Alive]: aliveTooltip,\n  [Dead]: deadTooltip,\n  [Infeasible]: infeasibleTooltip,\n  [Restarting]: restartingTooltip,\n  [PendingCreation]: pendingCreationTooltip,\n  [DependenciesUnready]: dependenciesUnreadyTooltip,\n  [PendingResources]: pendingResourcesTooltip,\n};\n\nconst ActorStateRepr: React.FC<ActorStateReprProps> = ({\n  state,\n  variant,\n  showTooltip,\n}) => {\n  const classes = useActorStateReprStyles();\n  const variantOrDefault = variant ?? \"body1\";\n  let body;\n  switch (state) {\n    case Infeasible:\n      body = (\n        <Typography variant={variantOrDefault} className={classes.infeasible}>\n          Infeasible\n        </Typography>\n      );\n      break;\n    case PendingResources:\n      body = (\n        <Typography\n          variant={variantOrDefault}\n          className={classes.pendingResources}\n        >\n          Pending Resources\n        </Typography>\n      );\n      break;\n    case PendingCreation:\n      body = (\n        <Typography variant={variantOrDefault} className={classes.creating}>\n          Creating\n        </Typography>\n      );\n      break;\n    case DependenciesUnready:\n      body = (\n        <Typography variant={variantOrDefault} className={classes.creating}>\n          Dependencies Unready\n        </Typography>\n      );\n      break;\n    case Alive:\n      body = (\n        <Typography variant={variantOrDefault} className={classes.alive}>\n          Alive\n        </Typography>\n      );\n      break;\n    case Restarting:\n      body = (\n        <Typography variant={variantOrDefault} className={classes.restarting}>\n          Restarting\n        </Typography>\n      );\n      break;\n    case Dead:\n      body = (\n        <Typography variant={variantOrDefault} className={classes.dead}>\n          Dead\n        </Typography>\n      );\n      break;\n  }\n  return showTooltip ? (\n    <Tooltip className={classes.tooltip} title={stateToTooltip[state]}>\n      {body}\n    </Tooltip>\n  ) : (\n    body\n  );\n};\n\nexport default ActorStateRepr;\n","import {\n  Divider,\n  Grid,\n  makeStyles,\n  Theme,\n  Typography,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { ActorInfo, isFullActorInfo } from \"../../../api\";\nimport LabeledDatum from \"../../../common/LabeledDatum\";\nimport UsageBar from \"../../../common/UsageBar\";\nimport { sum } from \"../../../common/util\";\nimport ActorStateRepr from \"./ActorStateRepr\";\n\nconst memoryDebuggingDocLink =\n  \"https://docs.ray.io/en/master/memory-management.html#debugging-using-ray-memory\";\n\ntype ActorDatum = {\n  label: string;\n  value: any;\n  tooltip?: string;\n};\n\nconst labeledActorData = (actor: ActorInfo) =>\n  isFullActorInfo(actor)\n    ? [\n        {\n          label: \"Resources\",\n          value:\n            actor.usedResources &&\n            Object.entries(actor.usedResources).length > 0 &&\n            Object.entries(actor.usedResources)\n              .sort((a, b) => a[0].localeCompare(b[0]))\n              .map(\n                ([key, value]) =>\n                  `${sum(\n                    value.resourceSlots.map((slot) => slot.allocation),\n                  )} ${key}`,\n              )\n              .join(\", \"),\n        },\n        {\n          label: \"Number of pending tasks\",\n          value: actor.taskQueueLength?.toLocaleString() ?? \"0\",\n          tooltip:\n            \"The number of tasks that are currently pending to execute on this actor. If this number \" +\n            \"remains consistently high, it may indicate that this actor is a bottleneck in your application.\",\n        },\n        {\n          label: \"Number of executed tasks\",\n          value: actor.numExecutedTasks?.toLocaleString() ?? \"0\",\n          tooltip:\n            \"The number of tasks this actor has executed throughout its lifetimes.\",\n        },\n        {\n          label: \"Number of ObjectRefs in scope\",\n          value: actor.numObjectRefsInScope?.toLocaleString() ?? \"0\",\n          tooltip:\n            \"The number of ObjectRefs that this actor is keeping in scope via its internal state. \" +\n            \"This does not imply that the objects are in active use or colocated on the node with the actor \" +\n            `currently. This can be useful for debugging memory leaks. See the docs at ${memoryDebuggingDocLink} ` +\n            \"for more information.\",\n        },\n        {\n          label: \"Number of local objects\",\n          value: actor.numLocalObjects?.toLocaleString() ?? \"0\",\n          tooltip:\n            \"The number of small objects that this actor has stored in its local in-process memory store. This can be useful for \" +\n            `debugging memory leaks. See the docs at ${memoryDebuggingDocLink} for more information`,\n        },\n        {\n          label: \"Object store memory used (MiB)\",\n          value: actor.usedObjectStoreMemory?.toLocaleString() ?? \"0\",\n          tooltip:\n            \"The total amount of memory that this actor is occupying in the Ray object store. \" +\n            \"If this number is increasing without bounds, you might have a memory leak. See \" +\n            `the docs at: ${memoryDebuggingDocLink} for more information.`,\n        },\n      ]\n    : [\n        {\n          label: \"Actor ID\",\n          value: actor.actorId,\n          tooltip: \"\",\n        },\n        {\n          label: \"Required resources\",\n          value:\n            actor.requiredResources &&\n            Object.entries(actor.requiredResources).length > 0 &&\n            Object.entries(actor.requiredResources)\n              .sort((a, b) => a[0].localeCompare(b[0]))\n              .map(([key, value]) => `${value.toLocaleString()} ${key}`)\n              .join(\", \"),\n          tooltip: \"\",\n        },\n      ];\n\ntype ActorDetailsPaneProps = {\n  actor: ActorInfo;\n};\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  divider: {\n    width: \"100%\",\n    margin: \"0 auto\",\n  },\n  actorTitleWrapper: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    fontWeight: \"bold\",\n    fontSize: \"130%\",\n  },\n  detailsPane: {\n    margin: theme.spacing(1),\n  },\n}));\n\nconst ActorDetailsPane: React.FC<ActorDetailsPaneProps> = ({ actor }) => {\n  const classes = useStyles();\n  const actorData: ActorDatum[] = labeledActorData(actor);\n  return (\n    <React.Fragment>\n      <div className={classes.actorTitleWrapper}>\n        <div>{actor.actorClass}</div>\n        <ActorStateRepr state={actor.state} />\n      </div>\n      {isFullActorInfo(actor) && (\n        <Grid container spacing={3} className={classes.detailsPane}>\n          <Grid container item xs={6}>\n            <Grid item xs={4}>\n              <Typography>CPU Usage</Typography>\n            </Grid>\n            <Grid item xs={4}>\n              <UsageBar\n                percent={actor.processStats?.cpuPercent ?? 0}\n                text={`${actor.processStats?.cpuPercent ?? 0}%`}\n              />\n            </Grid>\n            <Grid item xs={4} />\n          </Grid>\n          {actor.gpus.length > 0 && (\n            <Grid container item xs={6}>\n              <Grid item xs={12}>\n                <Typography>GPU Usage</Typography>\n              </Grid>\n              {actor.gpus.map((gpu) => {\n                const gpuUtilization = gpu.utilizationGpu ? (\n                  <UsageBar\n                    percent={gpu.utilizationGpu * 100}\n                    text={`${gpu.utilizationGpu * 100}%`}\n                  />\n                ) : (\n                  <Typography\n                    color=\"textSecondary\"\n                    component=\"span\"\n                    variant=\"inherit\"\n                  >\n                    N/A\n                  </Typography>\n                );\n                return (\n                  <React.Fragment key={gpu.uuid}>\n                    <Grid item xs={4}>\n                      {`[${gpu.name}]`}\n                    </Grid>\n                    <Grid item xs={4}>\n                      {gpuUtilization}\n                    </Grid>\n                    <Grid item xs={4} />\n                  </React.Fragment>\n                );\n              })}\n            </Grid>\n          )}\n        </Grid>\n      )}\n      <Divider className={classes.divider} />\n      <Grid container className={classes.detailsPane}>\n        {actorData.map(\n          ({ label, value, tooltip }) =>\n            value &&\n            value.length > 0 && (\n              <LabeledDatum\n                key={label}\n                label={label}\n                datum={value}\n                tooltip={tooltip}\n              />\n            ),\n        )}\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default ActorDetailsPane;\n","import { createStyles, makeStyles, Theme, Typography } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport {\n  ActorInfo,\n  ActorState,\n  checkProfilingStatus,\n  CheckProfilingStatusResponse,\n  getProfilingResultURL,\n  isFullActorInfo,\n  launchKillActor,\n  launchProfiling,\n} from \"../../../api\";\nimport ActorDetailsPane from \"./ActorDetailsPane\";\n\nconst useActorStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      borderColor: theme.palette.divider,\n      borderStyle: \"solid\",\n      borderWidth: 1,\n      marginTop: theme.spacing(2),\n      padding: theme.spacing(2),\n      width: \"100%\",\n    },\n    title: {\n      color: theme.palette.text.secondary,\n      fontSize: \"0.75rem\",\n    },\n    action: {\n      color: theme.palette.primary.main,\n      textDecoration: \"none\",\n      \"&:hover\": {\n        cursor: \"pointer\",\n      },\n    },\n    infeasible: {\n      color: theme.palette.error.main,\n    },\n    pendingResources: {\n      color: theme.palette.secondary.main,\n    },\n\n    webuiDisplay: {\n      fontSize: \"0.875rem\",\n    },\n    inlineHTML: {\n      fontSize: \"0.875rem\",\n      display: \"inline\",\n    },\n  }),\n);\n\ntype ActorProps = {\n  actor: ActorInfo;\n};\n\ntype profilingInfo = {\n  [profilingId: string]: {\n    startTime: number;\n    latestResponse: CheckProfilingStatusResponse | null;\n  };\n};\n\nconst Actor: React.FC<ActorProps> = ({ actor }) => {\n  const [profiling, setProfiling] = useState<profilingInfo>({});\n  const classes = useActorStyles();\n\n  const handleProfilingClick = (duration: number) => async () => {\n    if (actor.state === ActorState.Alive) {\n      const profilingId = await launchProfiling(\n        actor.nodeId,\n        actor.pid,\n        duration,\n      );\n      setProfiling({\n        ...profiling,\n        [profilingId]: { startTime: Date.now(), latestResponse: null },\n      });\n      const checkProfilingStatusLoop = async () => {\n        const response = await checkProfilingStatus(profilingId);\n        setProfiling({\n          ...profiling,\n          [profilingId]: {\n            ...profiling[profilingId],\n            latestResponse: response,\n          },\n        });\n        if (response.status === \"pending\") {\n          setTimeout(checkProfilingStatusLoop, 1000);\n        }\n      };\n      await checkProfilingStatusLoop();\n    }\n  };\n\n  const killActor = () => {\n    if (actor.state === ActorState.Alive) {\n      launchKillActor(actor.actorId, actor.ipAddress, actor.port);\n    }\n  };\n\n  // Construct the custom message from the actor.\n  let actorCustomDisplay: JSX.Element[] = [];\n  if (isFullActorInfo(actor) && actor.webuiDisplay) {\n    actorCustomDisplay = Object.keys(actor.webuiDisplay)\n      .sort()\n      .map((key, _, __) => {\n        // Construct the value from actor.\n        // Please refer to worker.py::show_in_webui for schema.\n        const valueEncoded = actor.webuiDisplay![key];\n        const valueParsed = JSON.parse(valueEncoded);\n        let valueRendered = valueParsed[\"message\"];\n        if (valueParsed[\"dtype\"] === \"html\") {\n          valueRendered = (\n            <div\n              className={classes.inlineHTML}\n              dangerouslySetInnerHTML={{ __html: valueRendered }}\n            ></div>\n          );\n        }\n\n        if (key === \"\") {\n          return (\n            <Typography className={classes.webuiDisplay}>\n              &nbsp; &nbsp; {valueRendered}\n            </Typography>\n          );\n        } else {\n          return (\n            <Typography className={classes.webuiDisplay}>\n              &nbsp; &nbsp; {key}: {valueRendered}\n            </Typography>\n          );\n        }\n      });\n  }\n\n  return (\n    <div className={classes.root}>\n      <Typography className={classes.title}>\n        {isFullActorInfo(actor) ? (\n          <React.Fragment>\n            Actor {actor.actorId} (Profile for\n            {[10, 30, 60].map((duration) => (\n              <React.Fragment key={duration}>\n                {\" \"}\n                <span\n                  className={classes.action}\n                  onClick={handleProfilingClick(duration)}\n                >\n                  {duration}s\n                </span>\n              </React.Fragment>\n            ))}\n            ){\" \"}\n            {actor.state === ActorState.Alive && (\n              <span className={classes.action} onClick={killActor}>\n                Kill Actor\n              </span>\n            )}\n            {Object.entries(profiling).map(\n              ([profilingId, { startTime, latestResponse }]) =>\n                latestResponse !== null && (\n                  <React.Fragment key={profilingId}>\n                    (\n                    {latestResponse.status === \"pending\" ? (\n                      `Profiling for ${Math.round(\n                        (Date.now() - startTime) / 1000,\n                      )}s...`\n                    ) : latestResponse.status === \"finished\" ? (\n                      <a\n                        className={classes.action}\n                        href={getProfilingResultURL(profilingId)}\n                        rel=\"noopener noreferrer\"\n                        target=\"_blank\"\n                      >\n                        Profiling result\n                      </a>\n                    ) : latestResponse.status === \"error\" ? (\n                      `Profiling error: ${latestResponse.error.trim()}`\n                    ) : undefined}\n                    ){\" \"}\n                  </React.Fragment>\n                ),\n            )}\n          </React.Fragment>\n        ) : actor.state === ActorState.Infeasible ? (\n          <span className={classes.infeasible}>\n            {actor.actorClass} cannot be created because the Ray cluster cannot\n            satisfy its resource requirements.\n          </span>\n        ) : (\n          <span className={classes.pendingResources}>\n            {actor.actorClass} is pending until resources are available.\n          </span>\n        )}\n      </Typography>\n      <ActorDetailsPane actor={actor} />\n      {isFullActorInfo(actor) && (\n        <React.Fragment>\n          {actorCustomDisplay.length > 0 && (\n            <React.Fragment>{actorCustomDisplay}</React.Fragment>\n          )}\n        </React.Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default Actor;\n","import {\n  Box,\n  createStyles,\n  Grid,\n  makeStyles,\n  Paper,\n  styled,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { ActorGroup, ActorState } from \"../../../api\";\nimport { Expander, Minimizer } from \"../../../common/ExpandControls\";\nimport LabeledDatum from \"../../../common/LabeledDatum\";\nimport Actor from \"./Actor\";\nimport ActorStateRepr from \"./ActorStateRepr\";\n\nconst asSeconds = (n: number) => `${n}s`;\nconst CenteredBox = styled(Box)({\n  textAlign: \"center\",\n});\n\nconst useActorClassGroupStyles = makeStyles((theme) =>\n  createStyles({\n    container: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1),\n      marginLeft: theme.spacing(2),\n    },\n    title: {\n      margin: theme.spacing(1),\n    },\n    actorEntry: {\n      width: \"100%\",\n    },\n  }),\n);\n\ntype ActorClassGroupProps = {\n  title: string;\n  actorGroup: ActorGroup;\n};\n\nconst ActorClassGroup: React.FC<ActorClassGroupProps> = ({\n  actorGroup,\n  title,\n}) => {\n  const classes = useActorClassGroupStyles();\n  const [expanded, setExpanded] = useState(false);\n  const toggleExpanded = () => setExpanded(!expanded);\n  const entries = actorGroup.entries.map((actor, i) => (\n    <Box\n      component=\"div\"\n      className={classes.actorEntry}\n      key={actor.actorId ?? i}\n    >\n      <Actor actor={actor} />\n    </Box>\n  ));\n  const { Alive, PendingResources, Infeasible } = ActorState;\n  const summary = actorGroup.summary;\n  return (\n    <Paper className={classes.container}>\n      <Box display=\"block\" className={classes.title}>\n        <Typography variant=\"h5\">{title}</Typography>\n      </Box>\n      <Grid container xs={12} spacing={2}>\n        <Grid container item xs={5} className={classes.title}>\n          {Infeasible in summary.stateToCount && (\n            <LabeledDatum\n              label={\n                <ActorStateRepr\n                  state={Infeasible}\n                  variant=\"body1\"\n                  showTooltip={true}\n                />\n              }\n              datum={summary.stateToCount[Infeasible]}\n            />\n          )}\n          <LabeledDatum\n            label={\n              <ActorStateRepr\n                state={Alive}\n                variant=\"body1\"\n                showTooltip={true}\n              />\n            }\n            datum={\n              Alive in summary.stateToCount ? summary.stateToCount[Alive] : 0\n            }\n          />\n\n          <LabeledDatum\n            label={\n              <ActorStateRepr\n                state={PendingResources}\n                variant=\"body1\"\n                showTooltip={true}\n              />\n            }\n            datum={\n              PendingResources in summary.stateToCount\n                ? summary.stateToCount[PendingResources]\n                : 0\n            }\n          />\n        </Grid>\n        <Grid container item xs={5} className={classes.title}>\n          <LabeledDatum\n            label={\"Mean Lifetime\"}\n            datum={asSeconds(summary.avgLifetime)}\n          />\n          <LabeledDatum\n            label={\"Max Lifetime\"}\n            datum={asSeconds(summary.maxLifetime)}\n          />\n          <LabeledDatum\n            label={\"Executed Tasks\"}\n            datum={summary.numExecutedTasks}\n          />\n        </Grid>\n      </Grid>\n\n      {expanded ? (\n        <React.Fragment>\n          <Box>{entries}</Box>\n          <CenteredBox>\n            <Minimizer onClick={toggleExpanded} />\n          </CenteredBox>\n        </React.Fragment>\n      ) : (\n        <CenteredBox>\n          <Expander onClick={toggleExpanded} />\n        </CenteredBox>\n      )}\n    </Paper>\n  );\n};\n\nexport default ActorClassGroup;\n","import { Snackbar } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport React, { useState } from \"react\";\nimport { ActorGroup, ActorState } from \"../../../api\";\nimport { stableSort } from \"../../../common/tableUtils\";\n\nimport { sum } from \"../../../common/util\";\nimport ActorClassGroup from \"./ActorClassGroup\";\n\ntype ActorClassGroupsProps = {\n  actorGroups: { [groupKey: string]: ActorGroup };\n};\n\nconst ActorClassGroups: React.FC<ActorClassGroupsProps> = ({ actorGroups }) => {\n  const numInfeasible = (group: ActorGroup) =>\n    group.summary.stateToCount[ActorState.Infeasible] ?? 0;\n  const totalInfeasible = sum(Object.values(actorGroups).map(numInfeasible));\n  const [warningOpen, setWarningOpen] = useState(totalInfeasible > 0);\n  const groupComparator = (\n    [title1, group1]: [string, ActorGroup],\n    [title2, group2]: [string, ActorGroup],\n  ) => {\n    const infeasible1 = numInfeasible(group1);\n    const infeasible2 = numInfeasible(group2);\n    if (infeasible1 !== infeasible2) {\n      return infeasible1 > infeasible2 ? -1 : 1;\n    }\n    return title1 > title2 ? 1 : -1;\n  };\n  const children = stableSort(Object.entries(actorGroups), groupComparator).map(\n    ([title, actorGroup]) => (\n      <ActorClassGroup\n        actorGroup={actorGroup}\n        title={title}\n        key={`acg-${title}`}\n      />\n    ),\n  );\n\n  return (\n    <React.Fragment>\n      <Snackbar open={warningOpen}>\n        <Alert severity=\"warning\" onClose={() => setWarningOpen(false)}>\n          There are one or more actors that cannot currently be created due to\n          insufficient cluster resources. These have been sorted to the top of\n          the list. If you are using autoscaling functionality, you may ignore\n          this message.\n        </Alert>\n      </Snackbar>\n      {children}\n    </React.Fragment>\n  );\n};\n\nexport default ActorClassGroups;\n","import {\n  Box,\n  createStyles,\n  FormControl,\n  FormHelperText,\n  Input,\n  InputLabel,\n  makeStyles,\n  Theme,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDebounce } from \"use-debounce\";\nimport { StoreState } from \"../../../store\";\nimport ActorClassGroups from \"./ActorClassGroups\";\n\nconst useLogicalViewStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      marginBottom: theme.spacing(1),\n    },\n  }),\n);\n\nconst actorClassMatchesSearch = (\n  actorClass: string,\n  nameFilter: string,\n): boolean => {\n  const loweredNameFilter = nameFilter.toLowerCase();\n  return actorClass.toLowerCase().search(loweredNameFilter) !== -1;\n};\n\nconst actorGroupsSelector = (state: StoreState) => state.dashboard.actorGroups;\n\nconst LogicalView: React.FC = () => {\n  const [nameFilter, setNameFilter] = useState(\"\");\n  const [debouncedNameFilter] = useDebounce(nameFilter, 500);\n  const classes = useLogicalViewStyles();\n  const actorGroups = useSelector(actorGroupsSelector);\n  if (!actorGroups) {\n    return <Typography color=\"textSecondary\">Loading...</Typography>;\n  }\n  if (Object.keys(actorGroups).length === 0) {\n    return (\n      <Typography color=\"textSecondary\">\n        Finished loading, but have found no actors yet.\n      </Typography>\n    );\n  }\n  const filteredGroups =\n    debouncedNameFilter === \"\"\n      ? Object.entries(actorGroups)\n      : Object.entries(actorGroups).filter(([key, _]) =>\n          actorClassMatchesSearch(key, debouncedNameFilter),\n        );\n  return (\n    <Box className={classes.container}>\n      {filteredGroups.length === 0 ? (\n        <Typography color=\"textSecondary\">No actors found.</Typography>\n      ) : (\n        <React.Fragment>\n          <FormControl>\n            <InputLabel htmlFor=\"actor-name-filter\">Actor Search</InputLabel>\n            <Input\n              id=\"actor-name-filter\"\n              aria-describedby=\"actor-name-helper-text\"\n              value={nameFilter}\n              onChange={(event) => setNameFilter(event.target.value)}\n            />\n            <FormHelperText id=\"actor-name-helper-text\">\n              Search for an actor by name\n            </FormHelperText>\n          </FormControl>\n          <ActorClassGroups actorGroups={Object.fromEntries(filteredGroups)} />\n        </React.Fragment>\n      )}\n    </Box>\n  );\n};\n\nexport default LogicalView;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  ActorGroup,\n  ActorsResponse,\n  MemoryTable,\n  MemoryTableResponse,\n  NodeInfoResponse,\n  RayConfigResponse,\n  TuneAvailability,\n  TuneAvailabilityResponse,\n  TuneJob,\n  TuneJobResponse,\n} from \"../../api\";\n\nconst name = \"dashboard\";\n\ntype State = {\n  tab: number;\n  rayConfig: RayConfigResponse | null;\n  nodeInfo: NodeInfoResponse | null;\n  actorGroups: { [key: string]: ActorGroup } | null;\n  tuneInfo: TuneJob | null;\n  tuneAvailability: TuneAvailability | null;\n  lastUpdatedAt: number | null;\n  error: string | null;\n  memoryTable: MemoryTable | null;\n  shouldObtainMemoryTable: boolean;\n};\n\nconst initialState: State = {\n  actorGroups: null,\n  tab: 0,\n  rayConfig: null,\n  nodeInfo: null,\n  tuneInfo: null,\n  tuneAvailability: null,\n  lastUpdatedAt: null,\n  error: null,\n  memoryTable: null,\n  shouldObtainMemoryTable: false,\n};\n\nconst slice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setTab: (state, action: PayloadAction<number>) => {\n      state.tab = action.payload;\n    },\n    setRayConfig: (state, action: PayloadAction<RayConfigResponse>) => {\n      state.rayConfig = action.payload;\n    },\n    setNodeInfo: (\n      state,\n      action: PayloadAction<{\n        nodeInfo: NodeInfoResponse;\n      }>,\n    ) => {\n      state.nodeInfo = action.payload.nodeInfo;\n      state.lastUpdatedAt = Date.now();\n    },\n    setActorGroups: (state, action: PayloadAction<ActorsResponse>) => {\n      state.actorGroups = action.payload.actorGroups;\n    },\n    setTuneInfo: (state, action: PayloadAction<TuneJobResponse>) => {\n      state.tuneInfo = action.payload.result;\n      state.lastUpdatedAt = Date.now();\n    },\n    setTuneAvailability: (\n      state,\n      action: PayloadAction<TuneAvailabilityResponse>,\n    ) => {\n      state.tuneAvailability = action.payload.result;\n      state.lastUpdatedAt = Date.now();\n    },\n    setError: (state, action: PayloadAction<string | null>) => {\n      state.error = action.payload;\n    },\n    setMemoryTable: (state, action: PayloadAction<MemoryTableResponse>) => {\n      state.memoryTable = action.payload.memoryTable;\n    },\n    setShouldObtainMemoryTable: (state, action: PayloadAction<boolean>) => {\n      state.shouldObtainMemoryTable = action.payload;\n    },\n  },\n});\n\nexport const dashboardActions = slice.actions;\nexport const dashboardReducer = slice.reducer;\n","export const formatByteAmount = (\n  amount: number,\n  unit: \"mebibyte\" | \"gibibyte\",\n) =>\n  `${(\n    amount / (unit === \"mebibyte\" ? Math.pow(1024, 2) : Math.pow(1024, 3))\n  ).toFixed(1)} ${unit === \"mebibyte\" ? \"MiB\" : \"GiB\"}`;\n\nexport const formatUsage = (\n  used_b: number,\n  total_b: number,\n  unit: \"mebibyte\" | \"gibibyte\",\n  includePercentage: boolean,\n) => {\n  const usedFormatted = formatByteAmount(used_b, unit);\n  const totalFormatted = formatByteAmount(total_b, unit);\n  const percent = (100 * used_b) / total_b;\n  const ratioStr = `${usedFormatted} / ${totalFormatted}`;\n  if (includePercentage) {\n    return `${ratioStr} (${percent.toFixed(0)}%)`;\n  }\n  return ratioStr;\n};\n\n// Formats, e.g. 400 and 6000 as \"400 MiB / 6000 MiB (6.7%)\"\nexport const MiBRatio = (used: number, total: number) =>\n  `${used} MiB / ${total} MiB (${(100 * (used / total)).toFixed(1)}%)`;\n\nexport const MiBRatioNoPercent = (used: number, total: number) =>\n  `${used} MiB / ${total} MiB`;\n\nexport const formatDuration = (durationInSeconds: number) => {\n  const durationSeconds = Math.floor(durationInSeconds) % 60;\n  const durationMinutes = Math.floor(durationInSeconds / 60) % 60;\n  const durationHours = Math.floor(durationInSeconds / 60 / 60) % 24;\n  const durationDays = Math.floor(durationInSeconds / 60 / 60 / 24);\n  const pad = (value: number) => value.toString().padStart(2, \"0\");\n  return [\n    durationDays ? `${durationDays}d` : \"\",\n    `${pad(durationHours)}h`,\n    `${pad(durationMinutes)}m`,\n    `${pad(durationSeconds)}s`,\n  ].join(\" \");\n};\n\nexport const formatValue = (rawFloat: number) => {\n  try {\n    const decimals = rawFloat.toString().split(\".\")[1].length || 0;\n    if (decimals <= 3) {\n      return rawFloat.toString();\n    } // Few decimals\n    if (Math.abs(rawFloat.valueOf()) >= 1.0) {\n      return rawFloat.toPrecision(5);\n    } // Values >= 1\n    return rawFloat.toExponential(); // Values in (-1; 1)\n  } catch (e) {\n    return rawFloat.toString();\n  }\n};\n","import { createStyles, Grid, makeStyles, Theme } from \"@material-ui/core\";\nimport React from \"react\";\nimport { MemoryTableSummary } from \"../../../api\";\nimport { formatByteAmount } from \"../../../common/formatUtils\";\nimport LabeledDatum from \"../../../common/LabeledDatum\";\n\nconst useMemorySummaryStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    expandCollapseIcon: {\n      color: theme.palette.text.secondary,\n      fontSize: \"1.5em\",\n      verticalAlign: \"middle\",\n    },\n    container: {\n      padding: theme.spacing(1),\n      margin: theme.spacing(1),\n    },\n  }),\n);\n\ntype MemorySummaryProps = {\n  memoryTableSummary: MemoryTableSummary;\n  initialExpanded: boolean;\n};\n\nconst MemorySummary: React.FC<MemorySummaryProps> = ({\n  memoryTableSummary,\n}) => {\n  const classes = useMemorySummaryStyles();\n  const memoryData = [\n    [\"Total Local Reference Count\", `${memoryTableSummary.totalLocalRefCount}`],\n    [\"Pinned in Memory Count\", `${memoryTableSummary.totalPinnedInMemory}`],\n    [\n      \"Total Used by Pending Tasks Count\",\n      `${memoryTableSummary.totalUsedByPendingTask}`,\n    ],\n    [\n      \"Total Captured in Objects Count\",\n      `${memoryTableSummary.totalCapturedInObjects}`,\n    ],\n    [\n      \"Total Memory Used by Objects\",\n      `${formatByteAmount(memoryTableSummary.totalObjectSize, \"mebibyte\")}`,\n    ],\n    [\"Total Actor Handle Count\", `${memoryTableSummary.totalActorHandles}`],\n  ];\n\n  return (\n    <Grid container className={classes.container}>\n      {memoryData.map(([label, value]) => (\n        <LabeledDatum key={label} label={label} datum={value} />\n      ))}\n    </Grid>\n  );\n};\nexport default MemorySummary;\n","import { TableCell } from \"@material-ui/core\";\nimport { styled } from \"@material-ui/core/styles\";\n\nexport const StyledTableCell = styled(TableCell)(({ theme }) => ({\n  padding: theme.spacing(1),\n  textAlign: \"center\",\n}));\n\nexport const ExpandableStyledTableCell = styled(TableCell)(({ theme }) => ({\n  padding: theme.spacing(1),\n  textAlign: \"center\",\n  cursor: \"pointer\",\n}));\n","import {\n  createStyles,\n  makeStyles,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  Theme,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { StyledTableCell } from \"./TableCell\";\nimport { Order } from \"./tableUtils\";\n\nconst useSortableTableHeadStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    visuallyHidden: {\n      border: 0,\n      clip: \"rect(0 0 0 0)\",\n      height: 1,\n      margin: -1,\n      overflow: \"hidden\",\n      padding: 0,\n      position: \"absolute\",\n      top: 20,\n      width: 1,\n    },\n  }),\n);\n\nexport type HeaderInfo<T> = {\n  sortable: boolean;\n  id: T;\n  label: string;\n  numeric: boolean;\n};\n\ntype SortableTableHeadProps<T> = {\n  onRequestSort: (event: React.MouseEvent<unknown>, id: T) => void;\n  order: Order;\n  orderBy: T | null;\n  headerInfo: HeaderInfo<T>[];\n  firstColumnEmpty: boolean;\n};\n\nconst SortableTableHead = <T,>(props: SortableTableHeadProps<T>) => {\n  const { order, orderBy, onRequestSort, headerInfo, firstColumnEmpty } = props;\n  const classes = useSortableTableHeadStyles();\n  const createSortHandler = (id: T) => (event: React.MouseEvent<unknown>) => {\n    onRequestSort(event, id);\n  };\n  return (\n    <TableHead>\n      <TableRow>\n        {firstColumnEmpty && <StyledTableCell />}\n        {headerInfo.map((headerInfo) => {\n          if (headerInfo.sortable) {\n            return (\n              <StyledTableCell\n                key={headerInfo.label}\n                align={headerInfo.numeric ? \"right\" : \"left\"}\n                sortDirection={orderBy === headerInfo.id ? order : false}\n              >\n                <TableSortLabel\n                  active={orderBy === headerInfo.id}\n                  direction={orderBy === headerInfo.id ? order : \"asc\"}\n                  onClick={createSortHandler(headerInfo.id)}\n                >\n                  {headerInfo.label}\n                  {orderBy === headerInfo.id ? (\n                    <span className={classes.visuallyHidden}>\n                      {order === \"desc\"\n                        ? \"sorted descending\"\n                        : \"sorted ascending\"}\n                    </span>\n                  ) : null}\n                </TableSortLabel>\n              </StyledTableCell>\n            );\n          } else {\n            return (\n              <StyledTableCell\n                key={headerInfo.label}\n                align={headerInfo.numeric ? \"right\" : \"left\"}\n              >\n                {headerInfo.label}\n              </StyledTableCell>\n            );\n          }\n        })}\n      </TableRow>\n    </TableHead>\n  );\n};\n\nexport default SortableTableHead;\n","import { TableRow } from \"@material-ui/core\";\nimport React from \"react\";\nimport { MemoryTableEntry } from \"../../../api\";\nimport { formatByteAmount } from \"../../../common/formatUtils\";\nimport { StyledTableCell } from \"../../../common/TableCell\";\n\ntype Props = {\n  memoryTableEntry: MemoryTableEntry;\n};\n\nexport const MemoryTableRow = (props: Props) => {\n  const { memoryTableEntry } = props;\n  const object_size =\n    memoryTableEntry.objectSize === -1\n      ? \"?\"\n      : formatByteAmount(memoryTableEntry.objectSize, \"mebibyte\");\n  const memoryTableEntryValues = [\n    memoryTableEntry.nodeIpAddress,\n    memoryTableEntry.pid,\n    memoryTableEntry.type,\n    memoryTableEntry.objectRef,\n    object_size,\n    memoryTableEntry.referenceType,\n    memoryTableEntry.callSite,\n  ];\n  return (\n    <TableRow hover>\n      {memoryTableEntryValues.map((value, index) => (\n        <StyledTableCell key={`${index}`}>{value}</StyledTableCell>\n      ))}\n    </TableRow>\n  );\n};\n","import {\n  createStyles,\n  makeStyles,\n  Paper,\n  Table,\n  TableBody,\n  Theme,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { MemoryTableEntry } from \"../../../api\";\nimport SortableTableHead, {\n  HeaderInfo,\n} from \"../../../common/SortableTableHead\";\nimport { getComparator, Order, stableSort } from \"../../../common/tableUtils\";\n\nimport { MemoryTableRow } from \"./MemoryTableRow\";\n\nconst useMemoryTableStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1),\n    },\n    cell: {\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n    },\n  }),\n);\n\ntype memoryColumnId =\n  | \"nodeIpAddress\"\n  | \"pid\"\n  | \"type\"\n  | \"objectRef\"\n  | \"objectSize\"\n  | \"referenceType\"\n  | \"callSite\";\n\nconst memoryHeaderInfo: HeaderInfo<memoryColumnId>[] = [\n  {\n    id: \"nodeIpAddress\",\n    label: \"IP Address\",\n    numeric: false,\n    sortable: true,\n  },\n  { id: \"pid\", label: \"PID\", numeric: false, sortable: true },\n  { id: \"type\", label: \"Type\", numeric: false, sortable: true },\n  { id: \"objectRef\", label: \"Object Ref\", numeric: false, sortable: true },\n  {\n    id: \"objectSize\",\n    label: \"Object Size\",\n    numeric: false,\n    sortable: true,\n  },\n  {\n    id: \"referenceType\",\n    label: \"Reference Type\",\n    numeric: false,\n    sortable: true,\n  },\n  { id: \"callSite\", label: \"Call Site\", numeric: false, sortable: true },\n];\n\ntype MemoryTableProps = {\n  tableEntries: MemoryTableEntry[];\n};\n\nconst MemoryTable: React.FC<MemoryTableProps> = ({ tableEntries }) => {\n  const toggleOrder = () => setOrder(order === \"asc\" ? \"desc\" : \"asc\");\n  const classes = useMemoryTableStyles();\n  const [order, setOrder] = React.useState<Order>(\"asc\");\n  const [orderBy, setOrderBy] = React.useState<memoryColumnId | null>(null);\n  const comparator = orderBy && getComparator(order, orderBy);\n  const sortedTableEntries = comparator\n    ? stableSort(tableEntries, comparator)\n    : tableEntries;\n  const tableRows = sortedTableEntries.map((tableEntry) => (\n    <MemoryTableRow memoryTableEntry={tableEntry} key={tableEntry.objectRef} />\n  ));\n  // Todo(max) add in sorting code\n  return (\n    <Paper className={classes.container} elevation={2}>\n      <Table>\n        <SortableTableHead\n          orderBy={orderBy}\n          order={order}\n          onRequestSort={(_, property) => {\n            if (property === orderBy) {\n              toggleOrder();\n            } else {\n              setOrderBy(property);\n              setOrder(\"asc\");\n            }\n          }}\n          headerInfo={memoryHeaderInfo}\n          firstColumnEmpty={false}\n        />\n        <TableBody>{tableRows}</TableBody>\n      </Table>\n    </Paper>\n  );\n};\n\nexport default MemoryTable;\n","import {\n  Box,\n  createStyles,\n  makeStyles,\n  Paper,\n  styled,\n  Theme,\n} from \"@material-ui/core\";\nimport React, { ReactChild, useState } from \"react\";\nimport { MemoryTableEntry, MemoryTableSummary } from \"../../../api\";\nimport { Expander, Minimizer } from \"../../../common/ExpandControls\";\nimport MemorySummary from \"./MemorySummary\";\nimport MemoryTable from \"./MemoryTable\";\n\nconst CenteredBox = styled(Box)({\n  textAlign: \"center\",\n});\n\nconst useMemoryRowGroupStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      paddingTop: theme.spacing(2),\n      paddingBottom: theme.spacing(1),\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n    },\n  }),\n);\n\ntype MemoryRowGroupProps = {\n  groupKey: string;\n  groupTitle: ReactChild;\n  summary: MemoryTableSummary;\n  entries: MemoryTableEntry[];\n  initialExpanded: boolean;\n  initialVisibleEntries: number;\n};\n\nconst MemoryRowGroup: React.FC<MemoryRowGroupProps> = ({\n  groupKey,\n  groupTitle,\n  entries,\n  summary,\n  initialExpanded,\n  initialVisibleEntries,\n}) => {\n  const classes = useMemoryRowGroupStyles();\n  const [expanded, setExpanded] = useState(initialExpanded);\n  const [numVisibleEntries, setNumVisibleEntries] = useState(\n    initialVisibleEntries,\n  );\n  const toggleExpanded = () => setExpanded(!expanded);\n  const showMoreEntries = () => setNumVisibleEntries(numVisibleEntries + 10);\n  const visibleEntries = entries.slice(0, numVisibleEntries);\n  return (\n    <Paper key={groupKey} className={classes.container}>\n      {groupTitle}\n      <MemorySummary initialExpanded={false} memoryTableSummary={summary} />\n      {expanded ? (\n        <React.Fragment>\n          <MemoryTable tableEntries={visibleEntries} />\n          <CenteredBox>\n            {entries.length > numVisibleEntries && (\n              <Expander onClick={showMoreEntries} />\n            )}\n            <Minimizer onClick={toggleExpanded} />\n          </CenteredBox>\n        </React.Fragment>\n      ) : (\n        <CenteredBox>\n          <Expander onClick={toggleExpanded} />\n        </CenteredBox>\n      )}\n    </Paper>\n  );\n};\n\nexport default MemoryRowGroup;\n","import {\n  Box,\n  Button,\n  CircularProgress,\n  createStyles,\n  FormControl,\n  InputLabel,\n  makeStyles,\n  MenuItem,\n  Select,\n  Theme,\n  Typography,\n} from \"@material-ui/core\";\nimport PauseIcon from \"@material-ui/icons/Pause\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport SubdirectoryArrowRightIcon from \"@material-ui/icons/SubdirectoryArrowRight\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getMemoryTable,\n  MemoryGroupByKey,\n  MemoryTable,\n  MemoryTableResponse,\n  setMemoryTableCollection,\n} from \"../../../api\";\nimport { StoreState } from \"../../../store\";\nimport { dashboardActions } from \"../state\";\nimport MemoryRowGroup from \"./MemoryRowGroup\";\n\nconst groupTitle = (groupKey: string, groupBy: MemoryGroupByKey) => {\n  if (groupBy === \"node\") {\n    return <Typography variant=\"h6\">{`Node ${groupKey}`}</Typography>;\n  }\n  if (groupBy === \"stack_trace\") {\n    return <PyStackTrace stackTrace={groupKey} />;\n  }\n  if (groupBy === \"\") {\n    return <Typography variant=\"h6\">All entries</Typography>;\n  }\n  return <Typography variant=\"h6\">Unknown Group</Typography>;\n};\n\nconst PyStackTrace: React.FC<{ stackTrace: string }> = ({ stackTrace }) => {\n  const stackFrames = stackTrace.split(\" | \");\n  const renderedFrames = stackFrames.map((frame, i) => (\n    <Typography\n      variant={i === 0 ? \"h6\" : \"subtitle2\"}\n      style={{ marginLeft: `${i}em` }}\n      key={i}\n    >\n      {i !== 0 && <SubdirectoryArrowRightIcon />}\n      {frame}\n    </Typography>\n  ));\n  return <Box>{renderedFrames}</Box>;\n};\n\nconst MEMORY_POLLING_INTERVAL_MS = 4000;\n\nconst useMemoryInfoStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    pauseButton: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1),\n      float: \"right\",\n    },\n    select: {\n      minWidth: \"7em\",\n    },\n  }),\n);\n\nconst memoryTableSelector = (state: StoreState) => state.dashboard.memoryTable;\nconst isEmpty = (memoryTable: MemoryTable) =>\n  Object.keys(memoryTable.group).length === 0;\nconst loadTimerComplete = (mountedAt: Date) => {\n  const secondsBetween = Math.abs(\n    (new Date().getTime() - mountedAt.getTime()) / 1000,\n  );\n  return secondsBetween > 10;\n};\n\nconst fetchMemoryTable = (\n  groupByKey: MemoryGroupByKey,\n  setResults: (mtr: MemoryTableResponse) => void,\n) => {\n  return async () => {\n    const resp = await getMemoryTable(groupByKey);\n    setResults(resp);\n  };\n};\n\nconst MemoryInfo: React.FC<{}> = () => {\n  const memoryTable = useSelector(memoryTableSelector);\n  const dispatch = useDispatch();\n  const mountedAt = new Date();\n  const [paused, setPaused] = useState(false);\n  const pauseButtonIcon = paused ? <PlayArrowIcon /> : <PauseIcon />;\n\n  const classes = useMemoryInfoStyles();\n  const [groupBy, setGroupBy] = useState<MemoryGroupByKey>(\"node\");\n\n  // Turn memory collection on render\n  useEffect(() => {\n    setMemoryTableCollection(true);\n    return () => {\n      setMemoryTableCollection(false);\n    };\n  }, []);\n\n  // Set up polling memory data\n  const fetchData = useCallback(() => {\n    fetchMemoryTable(groupBy, (resp) =>\n      dispatch(dashboardActions.setMemoryTable(resp)),\n    );\n  }, [groupBy, dispatch]);\n  const intervalId = useRef<any>(null);\n  useEffect(() => {\n    if (!intervalId.current && !paused) {\n      fetchData();\n      intervalId.current = setInterval(fetchData, MEMORY_POLLING_INTERVAL_MS);\n    }\n    const cleanup = () => {\n      if (intervalId.current) {\n        clearInterval(intervalId.current);\n        intervalId.current = null;\n      }\n    };\n    return cleanup;\n  }, [paused, fetchData, dispatch]);\n\n  if (!memoryTable || (isEmpty(memoryTable) && !loadTimerComplete(mountedAt))) {\n    return (\n      <Typography align=\"center\" color=\"textSecondary\" variant=\"h3\">\n        <CircularProgress /> Loading\n      </Typography>\n    );\n  }\n  if (isEmpty(memoryTable) && loadTimerComplete(mountedAt)) {\n    return (\n      <Typography align=\"center\" color=\"textSecondary\" variant=\"h3\">\n        Finished loading, but nothing found.\n      </Typography>\n    );\n  }\n\n  const children = Object.entries(memoryTable.group)\n    .sort(([key1], [key2]) => (key1 < key2 ? -1 : 1))\n    .map(([groupKey, memoryGroup]) => (\n      <MemoryRowGroup\n        key={groupKey}\n        groupKey={groupKey}\n        groupTitle={groupTitle(groupKey, groupBy)}\n        entries={memoryGroup.entries}\n        summary={memoryGroup.summary}\n        initialExpanded={false}\n        initialVisibleEntries={10}\n      />\n    ));\n  return (\n    <Box>\n      <FormControl>\n        <InputLabel shrink id=\"group-by-label\">\n          Group by\n        </InputLabel>\n        <Select\n          labelId=\"group-by-label\"\n          value={groupBy}\n          className={classes.select}\n          onChange={(e: any) => setGroupBy(e.target.value)}\n          color=\"primary\"\n          displayEmpty\n        >\n          <MenuItem value=\"\">\n            <em>None</em>\n          </MenuItem>\n          <MenuItem value={\"node\"}>Node IP Address</MenuItem>\n          <MenuItem value={\"stack_trace\"}>Stack Trace</MenuItem>\n        </Select>\n      </FormControl>\n      <Button\n        color=\"primary\"\n        className={classes.pauseButton}\n        onClick={() => {\n          if (intervalId.current) {\n            clearInterval(intervalId.current);\n            intervalId.current = null;\n          }\n          setMemoryTableCollection(!paused);\n          setPaused(!paused);\n        }}\n      >\n        {pauseButtonIcon}\n        {paused ? \"Resume Collection\" : \"Pause Collection\"}\n      </Button>\n      {children}\n    </Box>\n  );\n};\n\nexport default MemoryInfo;\n","import {\n  createStyles,\n  Dialog,\n  IconButton,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport React from \"react\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    paper: {\n      padding: theme.spacing(3),\n    },\n    closeButton: {\n      position: \"absolute\",\n      right: theme.spacing(1.5),\n      top: theme.spacing(1.5),\n      zIndex: 1,\n    },\n    title: {\n      borderBottomColor: theme.palette.divider,\n      borderBottomStyle: \"solid\",\n      borderBottomWidth: 1,\n      fontSize: \"1.5rem\",\n      lineHeight: 1,\n      marginBottom: theme.spacing(3),\n      paddingBottom: theme.spacing(3),\n    },\n  });\n\ntype Props = {\n  handleClose: () => void;\n  title: string;\n};\n\nclass DialogWithTitle extends React.Component<\n  Props & WithStyles<typeof styles>\n> {\n  render() {\n    const { classes, handleClose, title } = this.props;\n    return (\n      <Dialog\n        classes={{ paper: classes.paper }}\n        fullWidth\n        maxWidth=\"md\"\n        onClose={handleClose}\n        open\n        scroll=\"body\"\n      >\n        <IconButton className={classes.closeButton} onClick={handleClose}>\n          <CloseIcon />\n        </IconButton>\n        <Typography className={classes.title}>{title}</Typography>\n        {this.props.children}\n      </Dialog>\n    );\n  }\n}\n\nexport default withStyles(styles)(DialogWithTitle);\n","import {\n  createStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  Theme,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport classNames from \"classnames\";\nimport React from \"react\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      overflowX: \"auto\",\n    },\n    cell: {\n      borderWidth: 0,\n      fontFamily: \"SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace\",\n      padding: 0,\n      \"&:last-child\": {\n        paddingRight: 0,\n      },\n    },\n    lineNumber: {\n      color: theme.palette.text.secondary,\n      paddingRight: theme.spacing(2),\n      textAlign: \"right\",\n      verticalAlign: \"top\",\n      width: \"1%\",\n      // Use a ::before pseudo-element for the line number so that it won't\n      // interact with user selections or searching.\n      \"&::before\": {\n        content: \"attr(data-line-number)\",\n      },\n    },\n    line: {\n      textAlign: \"left\",\n      whiteSpace: \"pre-wrap\",\n    },\n  });\n\ntype Props = {\n  lines: string[];\n};\n\nclass NumberedLines extends React.Component<Props & WithStyles<typeof styles>> {\n  render() {\n    const { classes, lines } = this.props;\n    return (\n      <Table>\n        <TableBody>\n          {lines.map((line, index) => (\n            <TableRow key={index}>\n              <TableCell\n                className={classNames(classes.cell, classes.lineNumber)}\n                data-line-number={index + 1}\n              />\n              <TableCell className={classNames(classes.cell, classes.line)}>\n                {line}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    );\n  }\n}\n\nexport default withStyles(styles)(NumberedLines);\n","import {\n  createStyles,\n  fade,\n  Theme,\n  Typography,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { ErrorsByPid, getErrors } from \"../../../../../api\";\nimport DialogWithTitle from \"../../../../../common/DialogWithTitle\";\nimport NumberedLines from \"../../../../../common/NumberedLines\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    header: {\n      lineHeight: 1,\n      marginBottom: theme.spacing(3),\n      marginTop: theme.spacing(3),\n    },\n    error: {\n      backgroundColor: fade(theme.palette.error.main, 0.04),\n      borderLeftColor: theme.palette.error.main,\n      borderLeftStyle: \"solid\",\n      borderLeftWidth: 2,\n      marginTop: theme.spacing(3),\n      padding: theme.spacing(2),\n    },\n    timestamp: {\n      color: theme.palette.text.secondary,\n      marginBottom: theme.spacing(1),\n    },\n  });\n\ntype Props = {\n  clearErrorDialog: () => void;\n  nodeIp: string;\n  pid: number | null;\n};\n\ntype State = {\n  result: ErrorsByPid | null;\n  error: string | null;\n};\n\nclass Errors extends React.Component<Props & WithStyles<typeof styles>, State> {\n  state: State = {\n    result: null,\n    error: null,\n  };\n\n  async componentDidMount() {\n    try {\n      const { nodeIp, pid } = this.props;\n      const result = await getErrors(nodeIp, pid);\n      this.setState({ result: result.errors, error: null });\n    } catch (error) {\n      this.setState({ result: null, error: error.toString() });\n    }\n  }\n\n  render() {\n    const { classes, clearErrorDialog, nodeIp } = this.props;\n    const { result, error } = this.state;\n\n    return (\n      <DialogWithTitle handleClose={clearErrorDialog} title=\"Errors\">\n        {error !== null ? (\n          <Typography color=\"error\">{error}</Typography>\n        ) : result === null ? (\n          <Typography color=\"textSecondary\">Loading...</Typography>\n        ) : (\n          Object.entries(result).map(([pid, errors]) => (\n            <React.Fragment key={pid}>\n              <Typography className={classes.header}>\n                {nodeIp} (PID: {pid})\n              </Typography>\n              {errors.length > 0 ? (\n                errors.map(({ message, timestamp }, index) => (\n                  <div className={classes.error} key={index}>\n                    <Typography className={classes.timestamp}>\n                      Error at {new Date(timestamp * 1000).toLocaleString()}\n                    </Typography>\n                    <NumberedLines lines={message.trim().split(\"\\n\")} />\n                  </div>\n                ))\n              ) : (\n                <Typography color=\"textSecondary\">No errors found.</Typography>\n              )}\n            </React.Fragment>\n          ))\n        )}\n      </DialogWithTitle>\n    );\n  }\n}\n\nexport default withStyles(styles)(Errors);\n","import {\n  createStyles,\n  fade,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { getLogs, LogsByPid } from \"../../../../../api\";\nimport DialogWithTitle from \"../../../../../common/DialogWithTitle\";\nimport NumberedLines from \"../../../../../common/NumberedLines\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    header: {\n      lineHeight: 1,\n      marginBottom: theme.spacing(3),\n      marginTop: theme.spacing(3),\n    },\n    log: {\n      backgroundColor: fade(theme.palette.primary.main, 0.04),\n      borderLeftColor: theme.palette.primary.main,\n      borderLeftStyle: \"solid\",\n      borderLeftWidth: 2,\n      padding: theme.spacing(2),\n    },\n  });\n\ntype Props = {\n  clearLogDialog: () => void;\n  nodeIp: string;\n  pid: number | null;\n};\n\ntype State = {\n  result: LogsByPid | null;\n  error: string | null;\n};\n\nclass Logs extends React.Component<Props & WithStyles<typeof styles>, State> {\n  state: State = {\n    result: null,\n    error: null,\n  };\n\n  async componentDidMount() {\n    try {\n      const { nodeIp, pid } = this.props;\n      const result = await getLogs(nodeIp, pid);\n      this.setState({ result: result.logs, error: null });\n    } catch (error) {\n      this.setState({ result: null, error: error.toString() });\n    }\n  }\n\n  render() {\n    const { classes, clearLogDialog, nodeIp } = this.props;\n    const { result, error } = this.state;\n\n    return (\n      <DialogWithTitle handleClose={clearLogDialog} title=\"Logs\">\n        {error !== null ? (\n          <Typography color=\"error\">{error}</Typography>\n        ) : result === null ? (\n          <Typography color=\"textSecondary\">Loading...</Typography>\n        ) : (\n          Object.entries(result).map(([pid, lines]) => (\n            <React.Fragment key={pid}>\n              <Typography className={classes.header}>\n                {nodeIp} (PID: {pid})\n              </Typography>\n              {lines.length > 0 ? (\n                <div className={classes.log}>\n                  <NumberedLines lines={lines} />\n                </div>\n              ) : (\n                <Typography color=\"textSecondary\">No logs found.</Typography>\n              )}\n            </React.Fragment>\n          ))\n        )}\n      </DialogWithTitle>\n    );\n  }\n}\n\nexport default withStyles(styles)(Logs);\n","import React from \"react\";\nimport { Accessor } from \"../../../../common/tableUtils\";\nimport UsageBar from \"../../../../common/UsageBar\";\nimport { getWeightedAverage } from \"../../../../common/util\";\nimport {\n  ClusterFeatureRenderFn,\n  NodeFeatureData,\n  NodeFeatureRenderFn,\n  NodeInfoFeature,\n  WorkerFeatureData,\n  WorkerFeatureRenderFn,\n} from \"./types\";\n\nexport const ClusterCPU: ClusterFeatureRenderFn = ({ nodes }) => {\n  const cpuWeightedAverage = getWeightedAverage(\n    nodes.map((node) => ({ weight: node.cpus[0], value: node.cpu })),\n  );\n  return (\n    <div style={{ minWidth: 60 }}>\n      <UsageBar\n        percent={cpuWeightedAverage}\n        text={`${cpuWeightedAverage.toFixed(1)}%`}\n      />\n    </div>\n  );\n};\n\nexport const NodeCPU: NodeFeatureRenderFn = ({ node }) => (\n  <div style={{ minWidth: 60 }}>\n    <UsageBar percent={node.cpu} text={`${node.cpu.toFixed(1)}%`} />\n  </div>\n);\nexport const nodeCPUAccessor: Accessor<NodeFeatureData> = ({ node }) => {\n  return node.cpu;\n};\n\nexport const WorkerCPU: WorkerFeatureRenderFn = ({ worker }) => (\n  <div style={{ minWidth: 60 }}>\n    <UsageBar\n      percent={worker.cpuPercent}\n      text={`${worker.cpuPercent.toFixed(1)}%`}\n    />\n  </div>\n);\n\nexport const workerCPUAccessor: Accessor<WorkerFeatureData> = ({ worker }) => {\n  return worker.cpuPercent;\n};\n\nconst cpuFeature: NodeInfoFeature = {\n  id: \"cpu\",\n  ClusterFeatureRenderFn: ClusterCPU,\n  NodeFeatureRenderFn: NodeCPU,\n  WorkerFeatureRenderFn: WorkerCPU,\n  nodeAccessor: nodeCPUAccessor,\n  workerAccessor: workerCPUAccessor,\n};\n\nexport default cpuFeature;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { formatUsage } from \"../../../../common/formatUtils\";\nimport { Accessor } from \"../../../../common/tableUtils\";\nimport UsageBar from \"../../../../common/UsageBar\";\nimport {\n  ClusterFeatureRenderFn,\n  NodeFeatureData,\n  NodeFeatureRenderFn,\n  NodeInfoFeature,\n  WorkerFeatureRenderFn,\n} from \"./types\";\n\nexport const ClusterDisk: ClusterFeatureRenderFn = ({ nodes }) => {\n  let used = 0;\n  let total = 0;\n  for (const node of nodes) {\n    if (\"/\" in node.disk) {\n      used += node.disk[\"/\"].used;\n      total += node.disk[\"/\"].total;\n    }\n  }\n  return (\n    <UsageBar\n      percent={(100 * used) / total}\n      text={formatUsage(used, total, \"gibibyte\", true)}\n    />\n  );\n};\n\nexport const NodeDisk: NodeFeatureRenderFn = ({ node }) => (\n  <UsageBar\n    percent={(100 * node.disk[\"/\"].used) / node.disk[\"/\"].total}\n    text={formatUsage(\n      node.disk[\"/\"].used,\n      node.disk[\"/\"].total,\n      \"gibibyte\",\n      true,\n    )}\n  />\n);\n\nexport const nodeDiskAccessor: Accessor<NodeFeatureData> = ({ node }) =>\n  node.disk[\"/\"].used;\n\nexport const WorkerDisk: WorkerFeatureRenderFn = () => (\n  <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n    N/A\n  </Typography>\n);\n\nconst diskFeature: NodeInfoFeature = {\n  id: \"disk\",\n  ClusterFeatureRenderFn: ClusterDisk,\n  NodeFeatureRenderFn: NodeDisk,\n  WorkerFeatureRenderFn: WorkerDisk,\n  nodeAccessor: nodeDiskAccessor,\n};\n\nexport default diskFeature;\n","import { createStyles, Theme, withStyles, WithStyles } from \"@material-ui/core\";\nimport React, { HTMLAttributes } from \"react\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    button: {\n      color: theme.palette.primary.main,\n      \"&:hover\": {\n        cursor: \"pointer\",\n        textDecoration: \"underline\",\n      },\n    },\n  });\n\nclass SpanButton extends React.Component<\n  HTMLAttributes<HTMLSpanElement> & WithStyles<typeof styles>\n> {\n  render() {\n    const { classes, ...otherProps } = this.props;\n    return <span className={classes.button} {...otherProps} />;\n  }\n}\n\nexport default withStyles(styles)(SpanButton);\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport SpanButton from \"../../../../common/SpanButton\";\nimport { Accessor } from \"../../../../common/tableUtils\";\nimport { sum } from \"../../../../common/util\";\nimport {\n  ClusterFeatureRenderFn,\n  NodeFeatureData,\n  NodeFeatureRenderFn,\n  NodeInfoFeature,\n  WorkerFeatureData,\n  WorkerFeatureRenderFn,\n} from \"./types\";\n\nconst ClusterErrors: ClusterFeatureRenderFn = ({ nodes }) => {\n  const totalErrCount = sum(nodes.map((node) => node.errorCount ?? 0));\n  return totalErrCount === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No errors\n    </Typography>\n  ) : (\n    <React.Fragment>\n      {totalErrCount.toLocaleString()}{\" \"}\n      {totalErrCount === 1 ? \"error\" : \"errors\"}\n    </React.Fragment>\n  );\n};\n\nconst makeNodeErrors =\n  (\n    setErrorDialog: (nodeIp: string, pid: number | null) => void,\n  ): NodeFeatureRenderFn =>\n  ({ node }) => {\n    const errorCount = node.errorCount ?? 0;\n    return errorCount === 0 ? (\n      <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n        No errors\n      </Typography>\n    ) : (\n      <SpanButton onClick={() => setErrorDialog(node.ip, null)}>\n        View all errors ({errorCount.toLocaleString()})\n      </SpanButton>\n    );\n  };\n\nconst nodeErrorsAccessor: Accessor<NodeFeatureData> = ({ node }) =>\n  node.errorCount ?? 0;\n\nconst makeWorkerErrors =\n  (\n    setErrorDialog: (nodeIp: string, pid: number | null) => void,\n  ): WorkerFeatureRenderFn =>\n  ({ node, worker }) => {\n    return worker.errorCount !== 0 ? (\n      <SpanButton onClick={() => setErrorDialog(node.ip, worker.pid)}>\n        View errors ({worker.errorCount?.toLocaleString()})\n      </SpanButton>\n    ) : (\n      <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n        No errors\n      </Typography>\n    );\n  };\n\nconst workerErrorsAccessor: Accessor<WorkerFeatureData> = ({ worker }) =>\n  worker.errorCount ?? 0;\n\nconst makeErrorsFeature = (\n  setErrorDialog: (nodeIp: string, pid: number | null) => void,\n): NodeInfoFeature => ({\n  id: \"errors\",\n  ClusterFeatureRenderFn: ClusterErrors,\n  WorkerFeatureRenderFn: makeWorkerErrors(setErrorDialog),\n  NodeFeatureRenderFn: makeNodeErrors(setErrorDialog),\n  nodeAccessor: nodeErrorsAccessor,\n  workerAccessor: workerErrorsAccessor,\n});\n\nexport default makeErrorsFeature;\n","import { styled, Typography } from \"@material-ui/core\";\n\nexport const RightPaddedTypography = styled(Typography)(({ theme }) => ({\n  paddingRight: theme.spacing(1),\n}));\n","import { Box, Tooltip, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { GPUStats, ResourceSlot, Worker } from \"../../../../api\";\nimport { RightPaddedTypography } from \"../../../../common/CustomTypography\";\nimport { Accessor } from \"../../../../common/tableUtils\";\n\nimport UsageBar from \"../../../../common/UsageBar\";\nimport { getWeightedAverage, sum } from \"../../../../common/util\";\nimport {\n  ClusterFeatureRenderFn,\n  Node,\n  NodeFeatureData,\n  NodeFeatureRenderFn,\n  NodeInfoFeature,\n  WorkerFeatureData,\n  WorkerFeatureRenderFn,\n} from \"./types\";\n\nconst GPU_COL_WIDTH = 120;\n\nconst clusterGPUUtilization = (nodes: Array<Node>): number => {\n  const utils = nodes\n    .map((node) => ({\n      weight: node.gpus.length,\n      value: nodeGPUUtilization(node),\n    }))\n    .filter((util) => !isNaN(util.value));\n  if (utils.length === 0) {\n    return NaN;\n  }\n  return getWeightedAverage(utils);\n};\n\nconst nodeGPUUtilization = (node: Node): number => {\n  if (node.gpus === null) {\n    return NaN;\n  }\n  const gpusWithUtilInfo = node.gpus.filter((gpu) => gpu.utilizationGpu);\n  if (gpusWithUtilInfo.length === 0) {\n    return NaN;\n  }\n\n  const utilizationSum = sum(\n    gpusWithUtilInfo.map((gpu) => gpu.utilizationGpu ?? 0),\n  );\n  const avgUtilization = utilizationSum / gpusWithUtilInfo.length;\n  return avgUtilization;\n};\n\nconst nodeGPUAccessor: Accessor<NodeFeatureData> = ({ node }) =>\n  nodeGPUUtilization(node);\n\nconst ClusterGPU: ClusterFeatureRenderFn = ({ nodes }) => {\n  const clusterAverageUtilization = clusterGPUUtilization(nodes);\n  return (\n    <div style={{ minWidth: GPU_COL_WIDTH }}>\n      {isNaN(clusterAverageUtilization) ? (\n        <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n          N/A\n        </Typography>\n      ) : (\n        <UsageBar\n          percent={clusterAverageUtilization}\n          text={`${clusterAverageUtilization.toFixed(1)}%`}\n        />\n      )}\n    </div>\n  );\n};\n\nconst NodeGPU: NodeFeatureRenderFn = ({ node }) => {\n  const hasGPU = node.gpus !== undefined && node.gpus.length !== 0;\n  return (\n    <div style={{ minWidth: GPU_COL_WIDTH }}>\n      {hasGPU ? (\n        node.gpus.map((gpu, i) => <NodeGPUEntry gpu={gpu} slot={i} />)\n      ) : (\n        <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n          N/A\n        </Typography>\n      )}\n    </div>\n  );\n};\n\ntype NodeGPUEntryProps = {\n  slot: number;\n  gpu: GPUStats;\n};\n\nconst NodeGPUEntry: React.FC<NodeGPUEntryProps> = ({ gpu, slot }) => {\n  return (\n    <Box display=\"flex\" style={{ minWidth: GPU_COL_WIDTH }}>\n      <Tooltip title={gpu.name}>\n        <RightPaddedTypography variant=\"body1\">[{slot}]:</RightPaddedTypography>\n      </Tooltip>\n      {gpu.utilizationGpu ? (\n        <UsageBar\n          percent={gpu.utilizationGpu}\n          text={`${gpu.utilizationGpu.toFixed(1)}%`}\n        />\n      ) : (\n        <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n          N/A\n        </Typography>\n      )}\n    </Box>\n  );\n};\n\ntype WorkerGPUEntryProps = {\n  resourceSlot: ResourceSlot;\n};\n\nconst WorkerGPUEntry: React.FC<WorkerGPUEntryProps> = ({ resourceSlot }) => {\n  const { allocation, slot } = resourceSlot;\n  // This is a bit of  a dirty hack . For some reason, the slot GPU slot\n  // 0 as assigned always shows up as undefined in the API response.\n  // There are other times, such as a partial allocation, where we truly don't\n  // know the slot, however this will just plug the hole of 0s coming through\n  // as undefined. I have not been able to figure out the root cause.\n  const slotMsg =\n    allocation >= 1 && slot === undefined\n      ? \"0\"\n      : slot === undefined\n      ? \"?\"\n      : slot.toString();\n  return (\n    <Typography variant=\"body1\">\n      [{slotMsg}]: {allocation}\n    </Typography>\n  );\n};\n\nconst WorkerGPU: WorkerFeatureRenderFn = ({ worker }) => {\n  const workerRes = worker.coreWorkerStats[0]?.usedResources;\n  const workerUsedGPUResources = workerRes?.[\"GPU\"];\n  let message;\n  if (workerUsedGPUResources === undefined) {\n    message = (\n      <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n        N/A\n      </Typography>\n    );\n  } else {\n    message = workerUsedGPUResources.resourceSlots\n      .sort((slot1, slot2) => {\n        if (slot1.slot === undefined && slot2.slot === undefined) {\n          return 0;\n        } else if (slot1.slot === undefined) {\n          return 1;\n        } else if (slot2.slot === undefined) {\n          return -1;\n        } else {\n          return slot1.slot - slot2.slot;\n        }\n      })\n      .map((resourceSlot) => <WorkerGPUEntry resourceSlot={resourceSlot} />);\n  }\n  return <div style={{ minWidth: 60 }}>{message}</div>;\n};\n\nconst workerGPUUtilization = (worker: Worker | null) => {\n  const workerRes = worker?.coreWorkerStats[0]?.usedResources;\n  const workerUsedGPUResources = workerRes?.[\"GPU\"];\n  return (\n    workerUsedGPUResources &&\n    sum(\n      workerUsedGPUResources.resourceSlots.map(\n        (resourceSlot) => resourceSlot.allocation,\n      ),\n    )\n  );\n};\n\nconst workerGPUAccessor: Accessor<WorkerFeatureData> = ({ worker }) => {\n  return workerGPUUtilization(worker) ?? 0;\n};\n\nconst gpuFeature: NodeInfoFeature = {\n  id: \"gpu\",\n  ClusterFeatureRenderFn: ClusterGPU,\n  NodeFeatureRenderFn: NodeGPU,\n  WorkerFeatureRenderFn: WorkerGPU,\n  nodeAccessor: nodeGPUAccessor,\n  workerAccessor: workerGPUAccessor,\n};\n\nexport default gpuFeature;\n","import { Box, Tooltip, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { GPUStats } from \"../../../../api\";\nimport { RightPaddedTypography } from \"../../../../common/CustomTypography\";\nimport { MiBRatioNoPercent } from \"../../../../common/formatUtils\";\nimport { Accessor } from \"../../../../common/tableUtils\";\nimport UsageBar from \"../../../../common/UsageBar\";\nimport { getWeightedAverage, sum } from \"../../../../common/util\";\nimport {\n  ClusterFeatureRenderFn,\n  Node,\n  NodeFeatureData,\n  NodeFeatureRenderFn,\n  NodeInfoFeature,\n  WorkerFeatureData,\n  WorkerFeatureRenderFn,\n} from \"./types\";\n\nconst GRAM_COL_WIDTH = 120;\n\nconst nodeGRAMUtilization = (node: Node) => {\n  const utilization = (gpu: GPUStats) => {\n    if (!gpu.memoryUsed || !gpu.memoryTotal) {\n      return NaN;\n    }\n    return gpu.memoryUsed / gpu.memoryTotal;\n  };\n  const gramUtils = node.gpus.map(utilization).filter((util) => !!util);\n  if (gramUtils.length === 0) {\n    return NaN;\n  }\n  const utilizationSum = sum(node.gpus.map((gpu) => utilization(gpu)));\n  const avgUtilization = utilizationSum / node.gpus.length;\n  // Convert to a percent before returning\n  return avgUtilization * 100;\n};\n\nconst nodeGRAMAccessor: Accessor<NodeFeatureData> = ({ node }) => {\n  const nodeGRAMUtil = nodeGRAMUtilization(node);\n  return isNaN(nodeGRAMUtil) ? -1 : nodeGRAMUtil;\n};\n\nconst clusterGRAMUtilization = (nodes: Array<Node>) => {\n  const utils = nodes\n    .map((node) => ({\n      weight: node.gpus.length,\n      value: nodeGRAMUtilization(node),\n    }))\n    .filter((util) => !isNaN(util.value));\n  if (utils.length === 0) {\n    return NaN;\n  }\n  return getWeightedAverage(utils);\n};\n\nexport const ClusterGRAM: ClusterFeatureRenderFn = ({ nodes }) => {\n  const clusterAverageUtilization = clusterGRAMUtilization(nodes);\n  return (\n    <div style={{ minWidth: 60 }}>\n      {isNaN(clusterAverageUtilization) ? (\n        <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n          N/A\n        </Typography>\n      ) : (\n        <UsageBar\n          percent={clusterAverageUtilization}\n          text={`${clusterAverageUtilization.toFixed(1)}%`}\n        />\n      )}\n    </div>\n  );\n};\n\nexport const NodeGRAM: NodeFeatureRenderFn = ({ node }) => {\n  const nodeGRAMEntries = node.gpus.map((gpu, i) => {\n    const props = {\n      gpuName: gpu.name,\n      utilization: gpu.memoryUsed,\n      total: gpu.memoryTotal,\n      slot: i,\n    };\n    return <GRAMEntry {...props} />;\n  });\n  return (\n    <div style={{ minWidth: 60 }}>\n      {nodeGRAMEntries.length === 0 ? (\n        <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n          N/A\n        </Typography>\n      ) : (\n        <div style={{ minWidth: GRAM_COL_WIDTH }}>{nodeGRAMEntries}</div>\n      )}\n    </div>\n  );\n};\n\ntype GRAMEntryProps = {\n  gpuName: string;\n  slot: number;\n  utilization: number;\n  total: number;\n};\n\nconst GRAMEntry: React.FC<GRAMEntryProps> = ({\n  gpuName,\n  slot,\n  utilization,\n  total,\n}) => {\n  const ratioStr = MiBRatioNoPercent(utilization, total);\n  return (\n    <Box display=\"flex\" style={{ minWidth: GRAM_COL_WIDTH }}>\n      <Tooltip title={gpuName}>\n        <RightPaddedTypography variant=\"body1\">\n          [{slot}]: {ratioStr}\n        </RightPaddedTypography>\n      </Tooltip>\n    </Box>\n  );\n};\n\nexport const WorkerGRAM: WorkerFeatureRenderFn = ({ worker, node }) => {\n  const workerGRAMEntries = node.gpus\n    .map((gpu, i) => {\n      const process = gpu.processes.find(\n        (process) => process.pid === worker.pid,\n      );\n      if (!process) {\n        return undefined;\n      }\n      const props = {\n        gpuName: gpu.name,\n        total: gpu.memoryTotal,\n        utilization: process.gpuMemoryUsage,\n        slot: i,\n      };\n      return <GRAMEntry {...props} />;\n    })\n    .filter((entry) => entry !== undefined);\n\n  return workerGRAMEntries.length === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      N/A\n    </Typography>\n  ) : (\n    <div style={{ minWidth: GRAM_COL_WIDTH }}>{workerGRAMEntries}</div>\n  );\n};\n\nconst workerGRAMUtilization = (worker: any, node: Node) => {\n  const workerProcessPerGPU = node.gpus\n    .map((gpu) => gpu.processes)\n    .map((processes) =>\n      processes.find((process) => process.pid === worker.pid),\n    );\n  const workerUtilPerGPU = workerProcessPerGPU.map(\n    (proc) => proc?.gpuMemoryUsage || 0,\n  );\n  return sum(workerUtilPerGPU);\n};\n\nconst workerGRAMAccessor: Accessor<WorkerFeatureData> = ({ worker, node }) => {\n  if (node.gpus.length === 0) {\n    return -1;\n  }\n  return workerGRAMUtilization(worker, node);\n};\n\nconst gramFeature: NodeInfoFeature = {\n  id: \"gram\",\n  ClusterFeatureRenderFn: ClusterGRAM,\n  NodeFeatureRenderFn: NodeGRAM,\n  WorkerFeatureRenderFn: WorkerGRAM,\n  nodeAccessor: nodeGRAMAccessor,\n  workerAccessor: workerGRAMAccessor,\n};\n\nexport default gramFeature;\n","import React from \"react\";\nimport { Accessor } from \"../../../../common/tableUtils\";\nimport {\n  ClusterFeatureRenderFn,\n  NodeFeatureData,\n  NodeFeatureRenderFn,\n  NodeInfoFeature,\n  WorkerFeatureRenderFn,\n} from \"./types\";\n\nexport const ClusterHost: ClusterFeatureRenderFn = ({ nodes }) => (\n  <React.Fragment>\n    Totals ({nodes.length.toLocaleString()}{\" \"}\n    {nodes.length === 1 ? \"host\" : \"hosts\"})\n  </React.Fragment>\n);\n\nexport const NodeHost: NodeFeatureRenderFn = ({ node }) => (\n  <React.Fragment>\n    {node.hostname} ({node.ip})\n  </React.Fragment>\n);\n\nexport const nodeHostAccessor: Accessor<NodeFeatureData> = ({ node }) =>\n  node.hostname;\n\n// Ray worker process titles have one of the following forms: `ray::IDLE`,\n// `ray::function()`, `ray::Class`, or `ray::Class.method()`. We extract the\n// first portion here for display in the \"Host\" column. Note that this will\n// always be `ray` under the current setup, but it may vary in the future.\nexport const WorkerHost: WorkerFeatureRenderFn = ({ worker }) => (\n  <React.Fragment>\n    {worker.cmdline[0].split(\"::\", 2)[0]} (PID: {worker.pid})\n  </React.Fragment>\n);\n\nconst hostFeature: NodeInfoFeature = {\n  id: \"host\",\n  ClusterFeatureRenderFn: ClusterHost,\n  NodeFeatureRenderFn: NodeHost,\n  WorkerFeatureRenderFn: WorkerHost,\n  nodeAccessor: nodeHostAccessor,\n};\n\nexport default hostFeature;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport SpanButton from \"../../../../common/SpanButton\";\nimport { Accessor } from \"../../../../common/tableUtils\";\nimport { sum } from \"../../../../common/util\";\nimport {\n  ClusterFeatureRenderFn,\n  NodeFeatureData,\n  NodeFeatureRenderFn,\n  NodeInfoFeature,\n  WorkerFeatureData,\n  WorkerFeatureRenderFn,\n} from \"./types\";\n\nconst ClusterLogs: ClusterFeatureRenderFn = ({ nodes }) => {\n  const totalLogCount = sum(nodes.map((n) => n.logCount ?? 0));\n  return totalLogCount === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No logs\n    </Typography>\n  ) : (\n    <React.Fragment>\n      {totalLogCount.toLocaleString()} {totalLogCount === 1 ? \"line\" : \"lines\"}\n    </React.Fragment>\n  );\n};\n\nconst makeNodeLogs =\n  (\n    setLogDialog: (nodeIp: string, pid: number | null) => void,\n  ): NodeFeatureRenderFn =>\n  ({ node }) => {\n    const logCount = node.logCount ?? 0;\n    return logCount === 0 ? (\n      <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n        No logs\n      </Typography>\n    ) : (\n      <SpanButton onClick={() => setLogDialog(node.ip, null)}>\n        View all logs ({logCount.toLocaleString()}{\" \"}\n        {node.logCount === 1 ? \"line\" : \"lines\"})\n      </SpanButton>\n    );\n  };\n\nconst nodeLogsAccessor: Accessor<NodeFeatureData> = ({ node }) =>\n  node.logCount ? sum(Object.values(node.logCount)) : 0;\n\nconst makeWorkerLogs =\n  (\n    setLogDialog: (nodeIp: string, pid: number | null) => void,\n  ): WorkerFeatureRenderFn =>\n  ({ worker, node }) => {\n    const logCount = worker.logCount ?? 0;\n    return logCount !== 0 ? (\n      <SpanButton onClick={() => setLogDialog(node.ip, worker.pid)}>\n        View log ({logCount.toLocaleString()}{\" \"}\n        {worker.logCount === 1 ? \"line\" : \"lines\"})\n      </SpanButton>\n    ) : (\n      <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n        No logs\n      </Typography>\n    );\n  };\n\nconst workerLogsAccessor: Accessor<WorkerFeatureData> = ({ worker }) =>\n  worker.logCount ?? 0;\n\nconst makeLogsFeature = (\n  setLogDialog: (nodeIp: string, pid: number | null) => void,\n): NodeInfoFeature => ({\n  id: \"logs\",\n  ClusterFeatureRenderFn: ClusterLogs,\n  WorkerFeatureRenderFn: makeWorkerLogs(setLogDialog),\n  NodeFeatureRenderFn: makeNodeLogs(setLogDialog),\n  workerAccessor: workerLogsAccessor,\n  nodeAccessor: nodeLogsAccessor,\n});\n\nexport default makeLogsFeature;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { formatUsage } from \"../../../../common/formatUtils\";\nimport { Accessor } from \"../../../../common/tableUtils\";\nimport UsageBar from \"../../../../common/UsageBar\";\nimport { sum } from \"../../../../common/util\";\nimport {\n  ClusterFeatureRenderFn,\n  NodeFeatureData,\n  NodeFeatureRenderFn,\n  NodeInfoFeature,\n  WorkerFeatureData,\n  WorkerFeatureRenderFn,\n} from \"./types\";\n\nexport const ClusterObjectStoreMemory: ClusterFeatureRenderFn = ({ nodes }) => {\n  const totalAvailable = sum(\n    nodes.map((n) => n.raylet.objectStoreAvailableMemory),\n  );\n  const totalUsed = sum(nodes.map((n) => n.raylet.objectStoreUsedMemory));\n  const total = totalUsed + totalAvailable;\n  return (\n    <div style={{ minWidth: 60 }}>\n      <UsageBar\n        percent={100 * (totalUsed / total)}\n        text={formatUsage(totalUsed, total, \"mebibyte\", false)}\n      />\n    </div>\n  );\n};\n\nexport const NodeObjectStoreMemory: NodeFeatureRenderFn = ({ node }) => {\n  const totalAvailable = node.raylet.objectStoreAvailableMemory;\n  const used = node.raylet.objectStoreUsedMemory;\n  const total = totalAvailable + used;\n  if (used === undefined || totalAvailable === undefined || total === 0) {\n    return (\n      <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n        N/A\n      </Typography>\n    );\n  }\n  const usageRatio = used / total;\n  return (\n    <div style={{ minWidth: 60 }}>\n      <UsageBar\n        percent={usageRatio * 100}\n        text={formatUsage(used, total, \"mebibyte\", false)}\n      />\n    </div>\n  );\n};\n\nexport const nodeObjectStoreMemoryAccessor: Accessor<NodeFeatureData> = ({\n  node,\n}) => node.raylet.objectStoreUsedMemory;\n\nexport const WorkerObjectStoreMemory: WorkerFeatureRenderFn = () => (\n  <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n    N/A\n  </Typography>\n);\n\nexport const workerObjectStoreMemoryAccessor: Accessor<WorkerFeatureData> =\n  () => 0;\n\nconst objectStoreMemoryFeature: NodeInfoFeature = {\n  id: \"objectStoreMemory\",\n  ClusterFeatureRenderFn: ClusterObjectStoreMemory,\n  NodeFeatureRenderFn: NodeObjectStoreMemory,\n  WorkerFeatureRenderFn: WorkerObjectStoreMemory,\n  nodeAccessor: nodeObjectStoreMemoryAccessor,\n  workerAccessor: workerObjectStoreMemoryAccessor,\n};\n\nexport default objectStoreMemoryFeature;\n","import React from \"react\";\nimport { formatByteAmount, formatUsage } from \"../../../../common/formatUtils\";\nimport { Accessor } from \"../../../../common/tableUtils\";\nimport UsageBar from \"../../../../common/UsageBar\";\nimport {\n  ClusterFeatureRenderFn,\n  NodeFeatureData,\n  NodeFeatureRenderFn,\n  NodeInfoFeature,\n  WorkerFeatureData,\n  WorkerFeatureRenderFn,\n} from \"./types\";\n\nexport const ClusterRAM: ClusterFeatureRenderFn = ({ nodes }) => {\n  let used = 0;\n  let total = 0;\n  for (const node of nodes) {\n    used += node.mem[0] - node.mem[1];\n    total += node.mem[0];\n  }\n  return (\n    <UsageBar\n      percent={(100 * used) / total}\n      text={formatUsage(used, total, \"gibibyte\", true)}\n    />\n  );\n};\n\nexport const NodeRAM: NodeFeatureRenderFn = ({ node }) => (\n  <UsageBar\n    percent={(100 * (node.mem[0] - node.mem[1])) / node.mem[0]}\n    text={formatUsage(node.mem[0] - node.mem[1], node.mem[0], \"gibibyte\", true)}\n  />\n);\n\nexport const nodeRAMAccessor: Accessor<NodeFeatureData> = ({ node }) =>\n  100 * (node.mem[0] - node.mem[1]);\n\nexport const WorkerRAM: WorkerFeatureRenderFn = ({ node, worker }) => (\n  <UsageBar\n    percent={(100 * worker.memoryInfo.rss) / node.mem[0]}\n    text={formatByteAmount(worker.memoryInfo.rss, \"mebibyte\")}\n  />\n);\n\nexport const workerRAMAccessor: Accessor<WorkerFeatureData> = ({ worker }) =>\n  worker.memoryInfo.rss;\n\nconst ramFeature: NodeInfoFeature = {\n  id: \"ram\",\n  ClusterFeatureRenderFn: ClusterRAM,\n  NodeFeatureRenderFn: NodeRAM,\n  WorkerFeatureRenderFn: WorkerRAM,\n  nodeAccessor: nodeRAMAccessor,\n  workerAccessor: workerRAMAccessor,\n};\n\nexport default ramFeature;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { formatByteAmount } from \"../../../../common/formatUtils\";\nimport { Accessor } from \"../../../../common/tableUtils\";\nimport {\n  ClusterFeatureRenderFn,\n  NodeFeatureData,\n  NodeFeatureRenderFn,\n  NodeInfoFeature,\n  WorkerFeatureRenderFn,\n} from \"./types\";\n\nexport const ClusterReceived: ClusterFeatureRenderFn = ({ nodes }) => {\n  let totalReceived = 0;\n  for (const node of nodes) {\n    totalReceived += node.networkSpeed[1];\n  }\n  return (\n    <React.Fragment>\n      {formatByteAmount(totalReceived, \"mebibyte\")}/s\n    </React.Fragment>\n  );\n};\n\nexport const NodeReceived: NodeFeatureRenderFn = ({ node }) => (\n  <React.Fragment>\n    {formatByteAmount(node.networkSpeed[1], \"mebibyte\")}/s\n  </React.Fragment>\n);\n\nexport const nodeReceivedAccessor: Accessor<NodeFeatureData> = ({ node }) =>\n  node.networkSpeed[1];\n\nexport const WorkerReceived: WorkerFeatureRenderFn = () => (\n  <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n    N/A\n  </Typography>\n);\n\nconst receivedFeature: NodeInfoFeature = {\n  id: \"received\",\n  ClusterFeatureRenderFn: ClusterReceived,\n  NodeFeatureRenderFn: NodeReceived,\n  WorkerFeatureRenderFn: WorkerReceived,\n  nodeAccessor: nodeReceivedAccessor,\n};\n\nexport default receivedFeature;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { formatByteAmount } from \"../../../../common/formatUtils\";\nimport { Accessor } from \"../../../../common/tableUtils\";\nimport {\n  ClusterFeatureRenderFn,\n  NodeFeatureData,\n  NodeFeatureRenderFn,\n  NodeInfoFeature,\n  WorkerFeatureRenderFn,\n} from \"./types\";\n\nexport const ClusterSent: ClusterFeatureRenderFn = ({ nodes }) => {\n  let totalSent = 0;\n  for (const node of nodes) {\n    totalSent += node.networkSpeed[0];\n  }\n  return (\n    <React.Fragment>{formatByteAmount(totalSent, \"mebibyte\")}/s</React.Fragment>\n  );\n};\n\nexport const NodeSent: NodeFeatureRenderFn = ({ node }) => (\n  <React.Fragment>\n    {formatByteAmount(node.networkSpeed[0], \"mebibyte\")}/s\n  </React.Fragment>\n);\n\nexport const nodeSentAccessor: Accessor<NodeFeatureData> = ({ node }) =>\n  node.networkSpeed[0];\n\nexport const WorkerSent: WorkerFeatureRenderFn = () => (\n  <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n    N/A\n  </Typography>\n);\n\nconst sentFeature: NodeInfoFeature = {\n  id: \"sent\",\n  ClusterFeatureRenderFn: ClusterSent,\n  NodeFeatureRenderFn: NodeSent,\n  WorkerFeatureRenderFn: WorkerSent,\n  nodeAccessor: nodeSentAccessor,\n};\n\nexport default sentFeature;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { formatDuration } from \"../../../../common/formatUtils\";\nimport { Accessor } from \"../../../../common/tableUtils\";\nimport {\n  ClusterFeatureRenderFn,\n  NodeFeatureData,\n  NodeFeatureRenderFn,\n  NodeInfoFeature,\n  WorkerFeatureData,\n  WorkerFeatureRenderFn,\n} from \"./types\";\n\nconst getUptime = (bootTime: number) => Date.now() / 1000 - bootTime;\n\nexport const ClusterUptime: ClusterFeatureRenderFn = ({ nodes }) => (\n  <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n    N/A\n  </Typography>\n);\n\nexport const NodeUptime: NodeFeatureRenderFn = ({ node }) => (\n  <React.Fragment>{formatDuration(getUptime(node.bootTime))}</React.Fragment>\n);\n\nexport const nodeUptimeAccessor: Accessor<NodeFeatureData> = ({ node }) =>\n  getUptime(node.bootTime);\n\nexport const WorkerUptime: WorkerFeatureRenderFn = ({ worker }) => (\n  <React.Fragment>\n    {formatDuration(getUptime(worker.createTime))}\n  </React.Fragment>\n);\n\nconst workerUptimeAccessor: Accessor<WorkerFeatureData> = ({ worker }) =>\n  getUptime(worker.createTime);\n\nconst uptimeFeature: NodeInfoFeature = {\n  id: \"uptime\",\n  NodeFeatureRenderFn: NodeUptime,\n  WorkerFeatureRenderFn: WorkerUptime,\n  nodeAccessor: nodeUptimeAccessor,\n  workerAccessor: workerUptimeAccessor,\n};\n\nexport default uptimeFeature;\n","import React from \"react\";\nimport {\n  ClusterFeatureRenderFn,\n  NodeFeatureRenderFn,\n  NodeInfoFeature,\n  WorkerFeatureRenderFn,\n} from \"./types\";\n\nexport const ClusterWorkers: ClusterFeatureRenderFn = ({ nodes }) => {\n  let totalCpus = 0;\n  let totalWorkers = 0;\n  for (const node of nodes) {\n    totalCpus += node.cpus[0];\n    totalWorkers += node.workers.length;\n  }\n  return (\n    <React.Fragment>\n      {totalWorkers.toLocaleString()}{\" \"}\n      {totalWorkers === 1 ? \"worker\" : \"workers\"} / {totalCpus.toLocaleString()}{\" \"}\n      {totalCpus === 1 ? \"core\" : \"cores\"}\n    </React.Fragment>\n  );\n};\n\nexport const NodeWorkers: NodeFeatureRenderFn = ({ node }) => {\n  const cpus = node.cpus[0];\n  const totalWorkers = node.workers.length;\n  return (\n    <React.Fragment>\n      {totalWorkers.toLocaleString()}{\" \"}\n      {totalWorkers === 1 ? \"worker\" : \"workers\"} / {cpus.toLocaleString()}{\" \"}\n      {cpus === 1 ? \"core\" : \"cores\"}\n    </React.Fragment>\n  );\n};\n\n// Ray worker process titles have one of the following forms: `ray::IDLE`,\n// `ray::function()`, `ray::Class`, or `ray::Class.method()`. We extract the\n// second portion here for display in the \"Workers\" column.\nexport const WorkerWorkers: WorkerFeatureRenderFn = ({ worker }) => (\n  <React.Fragment>{worker.cmdline[0].split(\"::\", 2)[1]}</React.Fragment>\n);\n\nconst workersFeature: NodeInfoFeature = {\n  id: \"workers\",\n  ClusterFeatureRenderFn: ClusterWorkers,\n  NodeFeatureRenderFn: NodeWorkers,\n  WorkerFeatureRenderFn: WorkerWorkers,\n};\n\nexport default workersFeature;\n","import { TableRow } from \"@material-ui/core\";\nimport React from \"react\";\nimport { StyledTableCell } from \"../../../common/TableCell\";\nimport { WorkerFeatureData, WorkerFeatureRenderFn } from \"./features/types\";\n\ntype NodeWorkerRowProps = {\n  features: WorkerFeatureRenderFn[];\n  data: WorkerFeatureData;\n};\n\nexport const NodeWorkerRow: React.FC<NodeWorkerRowProps> = ({\n  features,\n  data,\n}) => {\n  const { node, worker } = data;\n  return (\n    <TableRow hover>\n      <StyledTableCell />\n      {features.map((WorkerFeature, index) => (\n        <StyledTableCell key={index}>\n          <WorkerFeature node={node} worker={worker} />\n        </StyledTableCell>\n      ))}\n    </TableRow>\n  );\n};\n","import {\n  createStyles,\n  makeStyles,\n  TableCell,\n  TableRow,\n  Theme,\n} from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport classNames from \"classnames\";\nimport React, { useState } from \"react\";\nimport { NodeInfoResponse } from \"../../../api\";\nimport { StyledTableCell } from \"../../../common/TableCell\";\nimport { NodeInfoFeature, WorkerFeatureData } from \"./features/types\";\nimport { NodeWorkerRow } from \"./NodeWorkerRow\";\n\nconst useNodeRowGroupStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    cell: {\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(1),\n      },\n    },\n    expandCollapseCell: {\n      cursor: \"pointer\",\n    },\n    expandCollapseIcon: {\n      color: theme.palette.text.secondary,\n      fontSize: \"1.5em\",\n      verticalAlign: \"middle\",\n    },\n    extraInfo: {\n      fontFamily: \"SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace\",\n      whiteSpace: \"pre\",\n    },\n  }),\n);\n\ntype ArrayType<T> = T extends Array<infer U> ? U : never;\ntype Node = ArrayType<NodeInfoResponse[\"clients\"]>;\n\ntype NodeRowGroupProps = {\n  features: NodeInfoFeature[];\n  node: Node;\n  rayletInfo?: string;\n  workerFeatureData: WorkerFeatureData[];\n  initialExpanded: boolean;\n};\n\nconst NodeRowGroup: React.FC<NodeRowGroupProps> = ({\n  features,\n  node,\n  initialExpanded,\n  rayletInfo,\n  workerFeatureData,\n}) => {\n  const [expanded, setExpanded] = useState<boolean>(initialExpanded);\n  const toggleExpand = () => setExpanded(!expanded);\n  const classes = useNodeRowGroupStyles();\n  const renderedNodeFeatures = features.map((nodeInfoFeature, i) => {\n    const FeatureComponent = nodeInfoFeature.NodeFeatureRenderFn;\n    return (\n      <StyledTableCell className={classes.cell} key={i}>\n        <FeatureComponent node={node} />\n      </StyledTableCell>\n    );\n  });\n  return (\n    <React.Fragment>\n      <TableRow hover>\n        <TableCell\n          className={classNames(classes.cell, classes.expandCollapseCell)}\n          onClick={toggleExpand}\n        >\n          {!expanded ? (\n            <AddIcon className={classes.expandCollapseIcon} />\n          ) : (\n            <RemoveIcon className={classes.expandCollapseIcon} />\n          )}\n        </TableCell>\n        {renderedNodeFeatures}\n      </TableRow>\n      {expanded && (\n        <React.Fragment>\n          {rayletInfo !== undefined && (\n            <TableRow hover>\n              <TableCell className={classes.cell} />\n              <TableCell\n                className={classNames(classes.cell, classes.extraInfo)}\n                colSpan={features.length}\n              >\n                {rayletInfo}\n              </TableCell>\n            </TableRow>\n          )}\n          {workerFeatureData.map((featureData, index: number) => {\n            return (\n              <NodeWorkerRow\n                key={index}\n                features={features.map(\n                  (feature) => feature.WorkerFeatureRenderFn,\n                )}\n                data={featureData}\n              />\n            );\n          })}\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default NodeRowGroup;\n","import {\n  createStyles,\n  makeStyles,\n  TableCell,\n  TableRow,\n  Theme,\n} from \"@material-ui/core\";\nimport LayersIcon from \"@material-ui/icons/Layers\";\nimport React from \"react\";\nimport { NodeInfoResponse } from \"../../../api\";\nimport { StyledTableCell } from \"../../../common/TableCell\";\nimport { ClusterFeatureRenderFn } from \"./features/types\";\n\nconst useTotalRowStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    cell: {\n      borderTopColor: theme.palette.divider,\n      borderTopStyle: \"solid\",\n      borderTopWidth: 2,\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(1),\n      },\n    },\n    totalIcon: {\n      color: theme.palette.text.secondary,\n      fontSize: \"1.5em\",\n      verticalAlign: \"middle\",\n    },\n  }),\n);\n\ntype TotalRowProps = {\n  nodes: NodeInfoResponse[\"clients\"];\n  clusterTotalWorkers: number;\n  features: (ClusterFeatureRenderFn | undefined)[];\n};\n\nconst TotalRow: React.FC<TotalRowProps> = ({ nodes, features }) => {\n  const classes = useTotalRowStyles();\n  return (\n    <TableRow hover>\n      <TableCell className={classes.cell}>\n        <LayersIcon className={classes.totalIcon} />\n      </TableCell>\n      {features.map((ClusterFeature, index) =>\n        ClusterFeature ? (\n          <TableCell className={classes.cell} key={index}>\n            <ClusterFeature nodes={nodes} />\n          </TableCell>\n        ) : (\n          <StyledTableCell key={index} />\n        ),\n      )}\n    </TableRow>\n  );\n};\n\nexport default TotalRow;\n","import {\n  Checkbox,\n  createStyles,\n  FormControlLabel,\n  makeStyles,\n  Table,\n  TableBody,\n  Theme,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport SortableTableHead, {\n  HeaderInfo,\n} from \"../../../common/SortableTableHead\";\nimport { getFnComparator, Order, stableSort } from \"../../../common/tableUtils\";\nimport { sum } from \"../../../common/util\";\nimport { StoreState } from \"../../../store\";\nimport Errors from \"./dialogs/errors/Errors\";\nimport Logs from \"./dialogs/logs/Logs\";\nimport cpuFeature from \"./features/CPU\";\nimport diskFeature from \"./features/Disk\";\nimport makeErrorsFeature from \"./features/Errors\";\nimport gpuFeature from \"./features/GPU\";\nimport gramFeature from \"./features/GRAM\";\nimport hostFeature from \"./features/Host\";\nimport makeLogsFeature from \"./features/Logs\";\nimport objectStoreMemoryFeature from \"./features/ObjectStoreMemory\";\nimport ramFeature from \"./features/RAM\";\nimport receivedFeature from \"./features/Received\";\nimport sentFeature from \"./features/Sent\";\nimport {\n  Node,\n  nodeInfoColumnId,\n  NodeInfoFeature,\n  WorkerFeatureData,\n} from \"./features/types\";\nimport uptimeFeature from \"./features/Uptime\";\nimport workersFeature from \"./features/Workers\";\nimport NodeRowGroup from \"./NodeRowGroup\";\nimport { NodeWorkerRow } from \"./NodeWorkerRow\";\nimport TotalRow from \"./TotalRow\";\n\nconst sortWorkers = (\n  workerFeatureData: WorkerFeatureData[],\n  sortWorkerComparator: any,\n) => {\n  // Sorts idle workers to end, applies the worker comparator function to sort\n  // then returns a new list of worker feature data.\n  const idleSortedClusterWorkers = workerFeatureData.sort((wfd1, wfd2) => {\n    const w1 = wfd1.worker;\n    const w2 = wfd2.worker;\n    if (w2.cmdline[0] === \"ray::IDLE\") {\n      return -1;\n    }\n    if (w1.cmdline[0] === \"ray::IDLE\") {\n      return 1;\n    }\n    return w1.pid < w2.pid ? -1 : 1;\n  });\n  return sortWorkerComparator\n    ? stableSort(idleSortedClusterWorkers, sortWorkerComparator)\n    : idleSortedClusterWorkers;\n};\n\nconst makeGroupedTableContents = (\n  nodes: Node[],\n  sortWorkerComparator: any,\n  sortGroupComparator: any,\n  nodeInfoFeatures: NodeInfoFeature[],\n) => {\n  const sortedGroups = sortGroupComparator\n    ? stableSort(nodes, sortGroupComparator)\n    : nodes;\n  return sortedGroups.map((node) => {\n    const workerFeatureData: WorkerFeatureData[] = node.workers.map(\n      (worker) => {\n        return {\n          node,\n          worker,\n        };\n      },\n    );\n\n    const sortedClusterWorkers = sortWorkers(\n      workerFeatureData,\n      sortWorkerComparator,\n    );\n    return (\n      <NodeRowGroup\n        key={node.raylet.nodeId}\n        node={node}\n        workerFeatureData={sortedClusterWorkers}\n        features={nodeInfoFeatures}\n        initialExpanded={nodes.length <= 1}\n      />\n    );\n  });\n};\n\nconst makeUngroupedTableContents = (\n  nodes: Node[],\n  sortWorkerComparator: any,\n  nodeInfoFeatures: NodeInfoFeature[],\n) => {\n  const workerInfoFeatures = nodeInfoFeatures.map(\n    (feature) => feature.WorkerFeatureRenderFn,\n  );\n  const allWorkerFeatures: WorkerFeatureData[] = nodes.flatMap((node) => {\n    return node.workers.map((worker) => {\n      return {\n        node,\n        worker,\n      };\n    });\n  });\n  const sortedWorkers = sortWorkers(allWorkerFeatures, sortWorkerComparator);\n  return sortedWorkers.map((workerFeatureDatum, i) => (\n    <NodeWorkerRow\n      features={workerInfoFeatures}\n      data={workerFeatureDatum}\n      key={`worker-${i}`}\n    />\n  ));\n};\n\nconst useNodeInfoStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    table: {\n      marginTop: theme.spacing(1),\n    },\n    cell: {\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(1),\n      },\n    },\n  }),\n);\n\n// Dead node payloads don't contain the full information needed to render\n// so we filter them out here.\nconst liveNodesSelector = (state: StoreState) =>\n  state.dashboard?.nodeInfo?.clients.filter(\n    (node) => node.raylet.state === \"ALIVE\",\n  );\n\ntype DialogState = {\n  nodeIp: string;\n  pid: number | null;\n} | null;\n\nconst nodeInfoHeaders: HeaderInfo<nodeInfoColumnId>[] = [\n  { id: \"host\", label: \"Host\", numeric: true, sortable: true },\n  { id: \"workers\", label: \"PID\", numeric: true, sortable: false },\n  { id: \"uptime\", label: \"Uptime (s)\", numeric: true, sortable: true },\n  { id: \"cpu\", label: \"CPU\", numeric: false, sortable: true },\n  { id: \"ram\", label: \"RAM\", numeric: true, sortable: true },\n  { id: \"gpu\", label: \"GPU\", numeric: true, sortable: true },\n  { id: \"gram\", label: \"GRAM\", numeric: true, sortable: true },\n  { id: \"objectStoreMemory\", label: \"Plasma\", numeric: false, sortable: true },\n  { id: \"disk\", label: \"Disk\", numeric: true, sortable: true },\n  { id: \"sent\", label: \"Sent\", numeric: true, sortable: true },\n  { id: \"received\", label: \"Received\", numeric: false, sortable: true },\n  { id: \"logs\", label: \"Logs\", numeric: false, sortable: true },\n  { id: \"errors\", label: \"Errors\", numeric: false, sortable: true },\n];\n\nconst NodeInfo: React.FC<{}> = () => {\n  const [logDialog, setLogDialog] = useState<DialogState>(null);\n  const [errorDialog, setErrorDialog] = useState<DialogState>(null);\n  const [isGrouped, setIsGrouped] = useState(true);\n  const [order, setOrder] = React.useState<Order>(\"asc\");\n  const toggleOrder = () => setOrder(order === \"asc\" ? \"desc\" : \"asc\");\n  const [orderBy, setOrderBy] = React.useState<nodeInfoColumnId | null>(null);\n  const classes = useNodeInfoStyles();\n  const nodes = useSelector(liveNodesSelector);\n  if (!nodes) {\n    return <Typography color=\"textSecondary\">Loading...</Typography>;\n  }\n  const clusterTotalWorkers = sum(nodes.map((n) => n.workers.length));\n  const nodeInfoFeatures: NodeInfoFeature[] = [\n    hostFeature,\n    workersFeature,\n    uptimeFeature,\n    cpuFeature,\n    ramFeature,\n    gpuFeature,\n    gramFeature,\n    objectStoreMemoryFeature,\n    diskFeature,\n    sentFeature,\n    receivedFeature,\n    makeLogsFeature((nodeIp, pid) => setLogDialog({ nodeIp, pid })),\n    makeErrorsFeature((nodeIp, pid) => setErrorDialog({ nodeIp, pid })),\n  ];\n  const sortNodeAccessor = nodeInfoFeatures.find(\n    (feature) => feature.id === orderBy,\n  )?.nodeAccessor;\n  const sortNodeComparator =\n    sortNodeAccessor && getFnComparator(order, sortNodeAccessor);\n  const sortWorkerAccessor = nodeInfoFeatures.find(\n    (feature) => feature.id === orderBy,\n  )?.workerAccessor;\n  const sortWorkerComparator =\n    sortWorkerAccessor && getFnComparator(order, sortWorkerAccessor);\n\n  // Show GPU features only if there is at least one GPU in cluster.\n  const showGPUs =\n    nodes\n      .map((n) => n.gpus)\n      .filter((gpus) => gpus !== undefined && gpus.length !== 0).length !== 0;\n\n  // Don't show disk on Kubernetes. K8s node disk usage should be monitored\n  // elsewhere.\n  // If a Ray node is running in a K8s pod, it marks available disk as 1 byte.\n  // (See ReporterAgent._get_disk_usage() in reporter_agent.py)\n  // Check if there are any nodes with realistic disk total:\n  const showDisk = nodes.filter((n) => n.disk[\"/\"].total > 10).length !== 0;\n\n  const filterPredicate = (\n    feature: NodeInfoFeature | HeaderInfo<nodeInfoColumnId>,\n  ) =>\n    (showGPUs || (feature.id !== \"gpu\" && feature.id !== \"gram\")) &&\n    (showDisk || feature.id !== \"disk\");\n  const filteredFeatures = nodeInfoFeatures.filter(filterPredicate);\n  const filteredHeaders = nodeInfoHeaders.filter(filterPredicate);\n\n  const tableContents = isGrouped\n    ? makeGroupedTableContents(\n        nodes,\n        sortWorkerComparator,\n        sortNodeComparator,\n        filteredFeatures,\n      )\n    : makeUngroupedTableContents(nodes, sortWorkerComparator, filteredFeatures);\n  return (\n    <React.Fragment>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={isGrouped}\n            onChange={() => setIsGrouped(!isGrouped)}\n            color=\"primary\"\n          />\n        }\n        label=\"Group by host\"\n      />\n      <Table className={classes.table}>\n        <SortableTableHead\n          onRequestSort={(_, property) => {\n            if (property === orderBy) {\n              toggleOrder();\n            } else {\n              setOrderBy(property);\n              setOrder(\"asc\");\n            }\n          }}\n          headerInfo={filteredHeaders}\n          order={order}\n          orderBy={orderBy}\n          firstColumnEmpty={true}\n        />\n        <TableBody>\n          {tableContents}\n          <TotalRow\n            clusterTotalWorkers={clusterTotalWorkers}\n            nodes={nodes}\n            features={filteredFeatures.map(\n              (feature) => feature.ClusterFeatureRenderFn,\n            )}\n          />\n        </TableBody>\n      </Table>\n      {logDialog !== null && (\n        <Logs\n          clearLogDialog={() => setLogDialog(null)}\n          nodeIp={logDialog.nodeIp}\n          pid={logDialog.pid}\n        />\n      )}\n      {errorDialog !== null && (\n        <Errors\n          clearErrorDialog={() => setErrorDialog(null)}\n          nodeIp={errorDialog.nodeIp}\n          pid={errorDialog.pid}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default NodeInfo;\n","import {\n  createStyles,\n  makeStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Theme,\n  Typography,\n} from \"@material-ui/core\";\nimport classNames from \"classnames\";\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getRayConfig } from \"../../../api\";\nimport { StoreState } from \"../../../store\";\nimport { dashboardActions } from \"../state\";\n\nconst useRayConfigStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    table: {\n      marginTop: theme.spacing(1),\n      width: \"auto\",\n    },\n    cell: {\n      paddingTop: theme.spacing(1),\n      paddingBottom: theme.spacing(1),\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(3),\n      },\n    },\n    key: {\n      color: theme.palette.text.secondary,\n    },\n  }),\n);\nconst { setRayConfig, setError } = dashboardActions;\nconst configSelector = (state: StoreState) => state.dashboard.rayConfig;\n\nconst RayConfig: React.FC = () => {\n  const classes = useRayConfigStyles();\n  const rayConfig = useSelector(configSelector);\n  const dispatch = useDispatch();\n  const refreshData = useCallback(async () => {\n    try {\n      const rayConfig = await getRayConfig();\n      dispatch(setRayConfig(rayConfig));\n    } catch (error) {\n      dispatch(setError(error.toString()));\n    }\n  }, [dispatch]);\n  const intervalId = useRef<any>(null);\n  useEffect(() => {\n    if (intervalId.current === null) {\n      refreshData();\n      intervalId.current = setInterval(refreshData, 10000);\n    }\n    const cleanup = () => {\n      clearInterval(intervalId.current);\n    };\n    return cleanup;\n  }, [refreshData]);\n  if (rayConfig === null) {\n    return (\n      <Typography color=\"textSecondary\">\n        No Ray configuration detected.\n      </Typography>\n    );\n  }\n\n  const formattedRayConfig = [\n    {\n      key: \"Autoscaling mode\",\n      value: rayConfig.autoscalingMode,\n    },\n    {\n      key: \"Head node type\",\n      value: rayConfig.headType,\n    },\n    {\n      key: \"Worker node type\",\n      value: rayConfig.workerType,\n    },\n    {\n      key: \"Min worker nodes\",\n      value: rayConfig.minWorkers,\n    },\n    {\n      key: \"Initial worker nodes\",\n      value: rayConfig.initialWorkers,\n    },\n    {\n      key: \"Max worker nodes\",\n      value: rayConfig.maxWorkers,\n    },\n    {\n      key: \"Idle timeout\",\n      value: `${rayConfig.idleTimeoutMinutes} ${\n        rayConfig.idleTimeoutMinutes === 1 ? \"minute\" : \"minutes\"\n      }`,\n    },\n  ];\n\n  return (\n    <div>\n      <Typography>Ray cluster configuration:</Typography>\n      <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell className={classes.cell}>Setting</TableCell>\n            <TableCell className={classes.cell}>Value</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {formattedRayConfig.map(({ key, value }, index) => (\n            <TableRow key={index}>\n              <TableCell className={classNames(classes.cell, classes.key)}>\n                {key}\n              </TableCell>\n              <TableCell className={classes.cell}>{value}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </div>\n  );\n};\n\nexport default RayConfig;\n","import {\n  createStyles,\n  Link,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Theme,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport DialogWithTitle from \"../../../common/DialogWithTitle\";\nimport NumberedLines from \"../../../common/NumberedLines\";\nimport { StoreState } from \"../../../store\";\nimport { dashboardActions } from \"../state\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    table: {\n      marginTop: theme.spacing(1),\n    },\n    cell: {\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(1),\n      },\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  tuneInfo: state.dashboard.tuneInfo,\n});\n\nconst mapDispatchToProps = dashboardActions;\n\ntype State = {\n  currentError: string;\n  open: boolean;\n};\n\nclass TuneErrors extends React.Component<\n  WithStyles<typeof styles> &\n    ReturnType<typeof mapStateToProps> &\n    typeof mapDispatchToProps,\n  State\n> {\n  state: State = {\n    currentError: \"\",\n    open: false,\n  };\n\n  handleOpen = (key: string) => {\n    this.setState({\n      open: true,\n      currentError: key,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      open: false,\n    });\n  };\n\n  render() {\n    const { classes, tuneInfo } = this.props;\n    const { currentError, open } = this.state;\n\n    if (tuneInfo === null || Object.keys(tuneInfo.errors).length === 0) {\n      return null;\n    }\n\n    return (\n      <React.Fragment>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell className={classes.cell}> Job ID</TableCell>\n              <TableCell className={classes.cell}> Trial ID </TableCell>\n              <TableCell className={classes.cell}> Trial Directory </TableCell>\n              <TableCell className={classes.cell}> Error </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {tuneInfo.errors !== null &&\n              Object.keys(tuneInfo.errors).map((key, index) => (\n                <TableRow key={index}>\n                  <TableCell className={classes.cell}>\n                    {tuneInfo.errors[key].jobId}\n                  </TableCell>\n                  <TableCell className={classes.cell}>\n                    {tuneInfo.errors[key].trialId}\n                  </TableCell>\n                  <TableCell className={classes.cell}>{key}</TableCell>\n                  <TableCell className={classes.cell}>\n                    <Link\n                      component=\"button\"\n                      variant=\"body2\"\n                      onClick={() => {\n                        this.handleOpen(key);\n                      }}\n                    >\n                      Show Error\n                    </Link>\n                  </TableCell>\n                </TableRow>\n              ))}\n          </TableBody>\n        </Table>\n        {open && (\n          <DialogWithTitle handleClose={this.handleClose} title=\"Error Log\">\n            {open && (\n              <NumberedLines\n                lines={tuneInfo.errors[currentError].text.trim().split(\"\\n\")}\n              />\n            )}\n          </DialogWithTitle>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(TuneErrors));\n","import {\n  Checkbox,\n  createStyles,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  Grid,\n  Link,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  Theme,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { TuneTrial } from \"../../../api\";\nimport DialogWithTitle from \"../../../common/DialogWithTitle\";\nimport { formatValue } from \"../../../common/formatUtils\";\nimport NumberedLines from \"../../../common/NumberedLines\";\nimport { StoreState } from \"../../../store\";\nimport { dashboardActions } from \"../state\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      padding: theme.spacing(2),\n      \"& > :not(:first-child)\": {\n        marginTop: theme.spacing(2),\n      },\n    },\n    table: {\n      marginTop: theme.spacing(1),\n      height: \"700px\",\n      overflowY: \"auto\",\n    },\n    cell: {\n      padding: theme.spacing(1),\n      textAlign: \"right\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(1),\n      },\n    },\n    checkboxRoot: {\n      height: \"500px\",\n      overflowY: \"auto\",\n      overflowX: \"auto\",\n    },\n    paramChecklist: {\n      marginBottom: theme.spacing(2),\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  tuneInfo: state.dashboard.tuneInfo,\n});\n\ntype State = {\n  metricParamColumn: string;\n  ascending: boolean;\n  sortedColumn: keyof TuneTrial | undefined;\n  metricColumns: string[];\n  paramColumns: string[];\n  errorTrial: string;\n  open: boolean;\n};\n\nconst mapDispatchToProps = dashboardActions;\n\nclass TuneTable extends React.Component<\n  WithStyles<typeof styles> &\n    ReturnType<typeof mapStateToProps> &\n    typeof mapDispatchToProps,\n  State\n> {\n  timeout: number = 0;\n\n  state: State = {\n    sortedColumn: undefined,\n    ascending: true,\n    metricParamColumn: \"\",\n    metricColumns: [],\n    paramColumns: [],\n    errorTrial: \"\",\n    open: false,\n  };\n\n  onColumnClick = (column: keyof TuneTrial, metricParamColumn?: string) => {\n    let ascending = this.state.ascending;\n    if (column === this.state.sortedColumn) {\n      ascending = !ascending;\n    } else {\n      ascending = true;\n    }\n    this.setState({\n      sortedColumn: column,\n      ascending: ascending,\n    });\n\n    if (metricParamColumn) {\n      this.setState({\n        metricParamColumn: metricParamColumn,\n      });\n    }\n  };\n\n  /**\n   * Replaces all underscores with spaces and capitalizes all words\n   * in str\n   */\n  humanize = (str: string) =>\n    str\n      .split(\"_\")\n      .map((part) => part.charAt(0).toUpperCase() + part.slice(1))\n      .join(\" \");\n\n  handleOpen = (key: string | number) => {\n    if (typeof key === \"number\") {\n      key = key.toString();\n    }\n    this.setState({\n      open: true,\n      errorTrial: key,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      open: false,\n    });\n  };\n\n  sortedCell = (\n    name: keyof TuneTrial,\n    chosenMetricParam?: string,\n    index?: number,\n  ) => {\n    const { tuneInfo, classes } = this.props;\n    const { sortedColumn, ascending, metricParamColumn } = this.state;\n    let label: \"desc\" | \"asc\" = \"asc\";\n\n    if (name === sortedColumn && !ascending) {\n      label = \"desc\";\n    }\n\n    if (tuneInfo === null) {\n      return;\n    }\n\n    let onClick = () => this.onColumnClick(name);\n    if (chosenMetricParam) {\n      onClick = () => this.onColumnClick(name, chosenMetricParam);\n    }\n\n    if (!index) {\n      index = 0;\n    }\n\n    let active = false;\n    let key: string = name + index.toString();\n    if (chosenMetricParam) {\n      key = chosenMetricParam + index.toString();\n      active = chosenMetricParam === metricParamColumn && sortedColumn === name;\n    } else {\n      active = name === sortedColumn;\n    }\n\n    return (\n      <TableCell className={classes.cell} key={key} onClick={onClick}>\n        <TableSortLabel active={active} direction={label} />\n        {chosenMetricParam\n          ? this.humanize(chosenMetricParam)\n          : this.humanize(name)}\n      </TableCell>\n    );\n  };\n\n  sortedTrialRecords = () => {\n    const { tuneInfo } = this.props;\n    const { sortedColumn, ascending, metricParamColumn } = this.state;\n\n    if (tuneInfo === null || Object.keys(tuneInfo.trialRecords).length === 0) {\n      return null;\n    }\n\n    const trialDetails = Object.values(tuneInfo.trialRecords);\n\n    if (!sortedColumn) {\n      return trialDetails;\n    }\n\n    let getAttribute = (trial: TuneTrial) => trial[sortedColumn!];\n    if (sortedColumn === \"metrics\" || sortedColumn === \"params\") {\n      getAttribute = (trial: TuneTrial) =>\n        trial[sortedColumn!][metricParamColumn];\n    }\n\n    if (sortedColumn) {\n      if (ascending) {\n        trialDetails.sort((a, b) =>\n          getAttribute(a) > getAttribute(b) ? 1 : -1,\n        );\n      } else if (!ascending) {\n        trialDetails.sort((a, b) =>\n          getAttribute(a) < getAttribute(b) ? 1 : -1,\n        );\n      }\n    }\n\n    return trialDetails;\n  };\n\n  handleMetricChoiceChange =\n    (name: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n      let { metricColumns } = this.state;\n      if (event.target.checked) {\n        metricColumns.push(name);\n        this.setState({\n          metricColumns: metricColumns,\n        });\n      } else {\n        metricColumns = metricColumns.filter((value) => value !== name);\n        this.setState({\n          metricColumns: metricColumns,\n        });\n      }\n    };\n\n  metricChoices = (metricNames: string[]) => {\n    const { metricColumns } = this.state;\n\n    return (\n      <FormControl>\n        <FormLabel component=\"legend\">Select Metrics </FormLabel>\n        <FormGroup>\n          {metricNames.map((value) => (\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={metricColumns.includes(value)}\n                  onChange={this.handleMetricChoiceChange(value)}\n                  value={value}\n                  color=\"primary\"\n                />\n              }\n              label={value}\n            />\n          ))}\n        </FormGroup>\n      </FormControl>\n    );\n  };\n\n  handleParamChoiceChange =\n    (name: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n      let { paramColumns } = this.state;\n      if (event.target.checked) {\n        paramColumns.push(name);\n        this.setState({\n          paramColumns: paramColumns,\n        });\n      } else {\n        paramColumns = paramColumns.filter((value) => value !== name);\n        this.setState({\n          paramColumns: paramColumns,\n        });\n      }\n    };\n\n  paramChoices = (paramNames: string[]) => {\n    const { classes } = this.props;\n    const { paramColumns } = this.state;\n    return (\n      <FormControl className={classes.paramChecklist}>\n        <FormLabel component=\"legend\">Select Parameters </FormLabel>\n        <FormGroup>\n          {paramNames.map((value) => (\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={paramColumns.includes(value)}\n                  onChange={this.handleParamChoiceChange(value)}\n                  value={value}\n                  color=\"primary\"\n                />\n              }\n              label={value}\n            />\n          ))}\n        </FormGroup>\n      </FormControl>\n    );\n  };\n\n  render() {\n    const { classes, tuneInfo } = this.props;\n\n    const { metricColumns, paramColumns, open, errorTrial } = this.state;\n\n    if (tuneInfo === null || Object.keys(tuneInfo.trialRecords).length === 0) {\n      return null;\n    }\n\n    const firstTrial = Object.keys(tuneInfo.trialRecords)[0];\n    const paramsDict = tuneInfo.trialRecords[firstTrial].params;\n    const paramNames = Object.keys(paramsDict).filter((k) => k !== \"args\");\n\n    let viewableParams = paramNames;\n    const paramOptions = paramNames.length > 3;\n    if (paramOptions) {\n      if (paramColumns.length === 0) {\n        this.setState({\n          paramColumns: paramNames.slice(0, 3),\n        });\n      }\n      viewableParams = paramColumns;\n    }\n\n    const metricNames = Object.keys(tuneInfo.trialRecords[firstTrial].metrics);\n\n    let viewableMetrics = metricNames;\n    const metricOptions = metricNames.length > 3;\n    if (metricOptions) {\n      if (metricColumns.length === 0) {\n        this.setState({\n          metricColumns: metricNames.slice(0, 3),\n        });\n      }\n      viewableMetrics = metricColumns;\n    }\n\n    const trialDetails = this.sortedTrialRecords();\n\n    return (\n      <div className={classes.root}>\n        <Grid container spacing={0}>\n          {(paramOptions || metricOptions) && (\n            <Grid item xs={2} className={classes.checkboxRoot}>\n              {paramOptions && this.paramChoices(paramNames)}\n              {metricOptions && this.metricChoices(metricNames)}\n            </Grid>\n          )}\n          <Grid\n            item\n            xs={paramOptions || metricOptions ? 10 : 12}\n            className={classes.table}\n          >\n            <Table stickyHeader>\n              <TableHead>\n                <TableRow>\n                  {this.sortedCell(\"trialId\")}\n                  {this.sortedCell(\"jobId\")}\n                  {this.sortedCell(\"startTime\")}\n                  {viewableParams.map((value, index) =>\n                    this.sortedCell(\"params\", value, index),\n                  )}\n                  {this.sortedCell(\"status\")}\n                  {viewableMetrics.map((value, index) =>\n                    this.sortedCell(\"metrics\", value, index),\n                  )}\n                  <TableCell className={classes.cell} key=\"error\">\n                    Error\n                  </TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {trialDetails !== null &&\n                  trialDetails.map((trial, index) => (\n                    <TableRow key={index}>\n                      <TableCell className={classes.cell}>\n                        {trial.trialId}\n                      </TableCell>\n                      <TableCell className={classes.cell}>\n                        {trial.jobId}\n                      </TableCell>\n                      <TableCell className={classes.cell}>\n                        {trial.startTime}\n                      </TableCell>\n                      {viewableParams.map((value, index) => (\n                        <TableCell className={classes.cell} key={index}>\n                          {typeof trial.params[value] === \"number\"\n                            ? formatValue(Number(trial.params[value]))\n                            : trial.params[value]}\n                        </TableCell>\n                      ))}\n                      <TableCell className={classes.cell}>\n                        {trial[\"status\"]}\n                      </TableCell>\n                      {trial.metrics &&\n                        viewableMetrics.map((value, index) => (\n                          <TableCell className={classes.cell} key={index}>\n                            {typeof trial.metrics[value] === \"number\"\n                              ? formatValue(Number(trial.metrics[value]))\n                              : trial.metrics[value]}\n                          </TableCell>\n                        ))}\n                      <TableCell className={classes.cell}>\n                        {trial[\"error\"] === \"No Error\" ? (\n                          \"No Error\"\n                        ) : (\n                          <Link\n                            component=\"button\"\n                            variant=\"body2\"\n                            onClick={() => {\n                              this.handleOpen(trial.trialId);\n                            }}\n                          >\n                            Show Error\n                          </Link>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n              </TableBody>\n            </Table>\n          </Grid>\n        </Grid>\n        {open && (\n          <DialogWithTitle handleClose={this.handleClose} title=\"Error Log\">\n            {open && (\n              <NumberedLines\n                lines={tuneInfo.trialRecords[errorTrial].error\n                  .trim()\n                  .split(\"\\n\")}\n              />\n            )}\n          </DialogWithTitle>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(TuneTable));\n","import {\n  Button,\n  CircularProgress,\n  createStyles,\n  Theme,\n  Typography,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { enableTuneTensorBoard } from \"../../../api\";\nimport { StoreState } from \"../../../store\";\nimport { dashboardActions } from \"../state\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      backgroundColor: theme.palette.background.paper,\n      padding: theme.spacing(2),\n      \"& > :not(:first-child)\": {\n        marginTop: theme.spacing(4),\n      },\n    },\n    board: {\n      width: \"100%\",\n      height: \"1000px\",\n      border: \"none\",\n    },\n    warning: {\n      fontSize: \"0.8125rem\",\n    },\n    progress: {\n      marginLeft: \"10px\",\n      marginTop: \"2px\",\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  error: state.dashboard.error,\n  tuneInfo: state.dashboard.tuneInfo,\n});\n\ntype State = {\n  tensorBoardEnabled: boolean;\n  loading: boolean;\n};\n\nconst mapDispatchToProps = dashboardActions;\n\nclass TuneTensorBoard extends React.Component<\n  WithStyles<typeof styles> &\n    ReturnType<typeof mapStateToProps> &\n    typeof mapDispatchToProps,\n  State\n> {\n  state: State = {\n    tensorBoardEnabled: false,\n    loading: false,\n  };\n\n  enableTensorBoard() {\n    enableTuneTensorBoard();\n    this.setState({\n      tensorBoardEnabled: true,\n    });\n  }\n\n  handleSubmit = () => {\n    this.setState({ loading: true });\n    enableTuneTensorBoard().then(() => {\n      this.setState({ loading: false });\n    });\n  };\n\n  tensorBoard = () => {\n    const { classes, error, tuneInfo } = this.props;\n\n    return (\n      <div>\n        {error === \"TypeError: Failed to fetch\" && (\n          <Typography className={classes.warning} color=\"textSecondary\">\n            Warning: Tensorboard server closed. View Tensorboard by running\n            \"tensorboard --logdir\" if not displaying below.\n          </Typography>\n        )}\n        {tuneInfo && !tuneInfo.tensorboard.tensorboardCurrent && (\n          <Typography className={classes.warning} color=\"textSecondary\">\n            The below Tensorboard reflects a previously entered log directory.\n            Restart the Ray Dashboard to change the Tensorboard logdir.\n          </Typography>\n        )}\n        <iframe\n          src=\"http://localhost:6006/\"\n          className={classes.board}\n          title=\"TensorBoard\"\n        ></iframe>\n      </div>\n    );\n  };\n\n  render() {\n    const { classes, tuneInfo } = this.props;\n\n    const { loading } = this.state;\n\n    if (tuneInfo === null) {\n      return;\n    }\n    const enabled = tuneInfo.tensorboard.tensorboardEnabled;\n    return (\n      <div className={classes.root}>\n        {!enabled && (\n          <div>\n            <Button\n              variant=\"outlined\"\n              onClick={this.handleSubmit}\n              className={classes.warning}\n            >\n              Enable TensorBoard\n            </Button>\n            {loading && (\n              <CircularProgress className={classes.progress} size={25} />\n            )}\n          </div>\n        )}\n\n        {enabled && this.tensorBoard()}\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(TuneTensorBoard));\n","import {\n  Button,\n  CircularProgress,\n  createStyles,\n  Tab,\n  Tabs,\n  TextField,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getTuneInfo, setTuneExperiment } from \"../../../api\";\nimport { StoreState } from \"../../../store\";\nimport { dashboardActions } from \"../state\";\nimport TuneErrors from \"./TuneErrors\";\nimport TuneTable from \"./TuneTable\";\nimport TuneTensorBoard from \"./TuneTensorBoard\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      backgroundColor: theme.palette.background.paper,\n    },\n    tabs: {\n      borderBottomColor: theme.palette.divider,\n      borderBottomStyle: \"solid\",\n      borderBottomWidth: 1,\n    },\n    heading: {\n      fontsize: \"0.9em\",\n      marginTop: theme.spacing(2),\n    },\n    warning: {\n      fontSize: \"1em\",\n    },\n    warningIcon: {\n      fontSize: \"1.25em\",\n      verticalAlign: \"text-bottom\",\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    submit: {\n      marginLeft: theme.spacing(2),\n      fontSize: \"0.8125em\",\n    },\n    prompt: {\n      fontSize: \"1em\",\n      marginTop: theme.spacing(1),\n    },\n    input: {\n      width: \"85%\",\n    },\n    progress: {\n      marginLeft: theme.spacing(2),\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  tuneInfo: state.dashboard.tuneInfo,\n  tuneAvailability: state.dashboard.tuneAvailability,\n});\n\nconst mapDispatchToProps = dashboardActions;\n\ntype State = {\n  tabIndex: number;\n  experiment: string;\n  loading: boolean;\n};\n\nclass Tune extends React.Component<\n  WithStyles<typeof styles> &\n    ReturnType<typeof mapStateToProps> &\n    typeof mapDispatchToProps,\n  State\n> {\n  timeout: number = 0;\n\n  state: State = {\n    tabIndex: 0,\n    experiment: \"\",\n    loading: false,\n  };\n\n  refreshTuneInfo = async () => {\n    try {\n      if (\n        this.props.tuneAvailability &&\n        this.props.tuneAvailability.available\n      ) {\n        const tuneInfo = await getTuneInfo();\n        this.props.setTuneInfo(tuneInfo);\n      }\n    } catch (error) {\n      this.props.setError(error.toString());\n    } finally {\n      this.timeout = window.setTimeout(this.refreshTuneInfo, 1000);\n    }\n  };\n\n  async componentWillUnmount() {\n    window.clearTimeout(this.timeout);\n  }\n\n  handleTabChange = (event: React.ChangeEvent<{}>, value: number) => {\n    this.setState({\n      tabIndex: value,\n    });\n  };\n\n  handleExperimentChange = (event: React.ChangeEvent<{ value: any }>) => {\n    this.setState({\n      experiment: event.target.value,\n    });\n  };\n\n  handleExperimentSubmit = async () => {\n    this.setState({ loading: true });\n    try {\n      await setTuneExperiment(this.state.experiment);\n      window.clearTimeout(this.timeout);\n      await this.refreshTuneInfo();\n      this.setState({ loading: false });\n    } catch (error) {\n      this.props.setError(error.toString());\n      this.setState({ loading: false });\n    }\n  };\n\n  experimentChoice = (prompt: boolean) => {\n    const { classes } = this.props;\n\n    const { loading } = this.state;\n    return (\n      <div>\n        {prompt && (\n          <Typography className={classes.heading} color=\"textPrimary\">\n            You can use this tab to monitor Tune jobs, their statuses,\n            hyperparameters, and more. For more information, read the\n            documentation{\" \"}\n            <a href=\"https://docs.ray.io/en/master/ray-dashboard.html#tune\">\n              here\n            </a>\n            .\n          </Typography>\n        )}\n        <div>\n          <Typography className={classes.prompt} color=\"textSecondary\">\n            Enter Tune Log Directory Here:\n          </Typography>\n          <TextField\n            className={classes.input}\n            id=\"standard-basic\"\n            value={this.state.experiment}\n            onChange={this.handleExperimentChange}\n          />\n          <Button\n            className={classes.submit}\n            variant=\"outlined\"\n            onClick={this.handleExperimentSubmit}\n          >\n            Submit\n          </Button>\n          {loading && (\n            <CircularProgress className={classes.progress} size={25} />\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    const { classes, tuneInfo, tuneAvailability } = this.props;\n\n    if (tuneAvailability && !tuneAvailability.trialsAvailable) {\n      return this.experimentChoice(true);\n    }\n\n    const { tabIndex } = this.state;\n\n    const tabs = [\n      { label: \"Table\", component: TuneTable },\n      { label: \"TensorBoard\", component: TuneTensorBoard },\n    ];\n\n    if (tuneInfo !== null && Object.keys(tuneInfo.errors).length > 0) {\n      tabs.push({ label: \"Errors\", component: TuneErrors });\n    }\n\n    const SelectedComponent = tabs[tabIndex].component;\n    return (\n      <div className={classes.root}>\n        {this.experimentChoice(false)}\n        <Tabs\n          className={classes.tabs}\n          indicatorColor=\"primary\"\n          onChange={this.handleTabChange}\n          textColor=\"primary\"\n          value={tabIndex}\n        >\n          {tabs.map(({ label }) => (\n            <Tab key={label} label={label} />\n          ))}\n        </Tabs>\n        <SelectedComponent />\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(Tune));\n","import {\n  Button,\n  createStyles,\n  makeStyles,\n  Tab,\n  Tabs,\n  Theme,\n  Typography,\n} from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  getActorGroups,\n  getNodeInfo,\n  getTuneAvailability,\n  getUsageStatsEnabled,\n} from \"../../api\";\nimport { StoreState } from \"../../store\";\nimport LastUpdated from \"./LastUpdated\";\nimport LogicalView from \"./logical-view/LogicalView\";\nimport MemoryInfo from \"./memory/Memory\";\nimport NodeInfo from \"./node-info/NodeInfo\";\nimport RayConfig from \"./ray-config/RayConfig\";\nimport { dashboardActions } from \"./state\";\nimport Tune from \"./tune/Tune\";\n\nconst { setNodeInfo, setTuneAvailability, setActorGroups, setError, setTab } =\n  dashboardActions;\nconst useDashboardStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      backgroundColor: theme.palette.background.paper,\n      padding: theme.spacing(2),\n      \"& > :not(:first-child)\": {\n        marginTop: theme.spacing(4),\n      },\n      position: \"relative\",\n    },\n    tabs: {\n      borderBottomColor: theme.palette.divider,\n      borderBottomStyle: \"solid\",\n      borderBottomWidth: 1,\n    },\n  }),\n);\n\nconst tabSelector = (state: StoreState) => state.dashboard.tab;\nconst tuneAvailabilitySelector = (state: StoreState) =>\n  state.dashboard.tuneAvailability;\n\nconst allTabs = [\n  { label: \"Machine view\", component: NodeInfo },\n  { label: \"Logical view\", component: LogicalView },\n  { label: \"Memory\", component: MemoryInfo },\n  { label: \"Ray config\", component: RayConfig },\n  { label: \"Tune\", component: Tune },\n];\n\nconst Dashboard: React.FC = () => {\n  const dispatch = useDispatch();\n  const tuneAvailability = useSelector(tuneAvailabilitySelector);\n  const tab = useSelector(tabSelector);\n  const classes = useDashboardStyles();\n  const history = useHistory();\n\n  // Polling Function\n  const refreshInfo = useCallback(async () => {\n    try {\n      const [nodeInfo, tuneAvailability, actorGroups] = await Promise.all([\n        getNodeInfo(),\n        getTuneAvailability(),\n        getActorGroups(),\n      ]);\n      dispatch(setNodeInfo({ nodeInfo }));\n      dispatch(setTuneAvailability(tuneAvailability));\n      dispatch(setActorGroups(actorGroups));\n      dispatch(setError(null));\n    } catch (error) {\n      dispatch(setError(error.toString()));\n    }\n  }, [dispatch]);\n\n  // Run the poller\n  const intervalId = useRef<any>(null);\n  useEffect(() => {\n    if (intervalId.current === null) {\n      refreshInfo();\n      intervalId.current = setInterval(refreshInfo, 1000);\n    }\n    const cleanup = () => {\n      clearInterval(intervalId.current);\n    };\n    return cleanup;\n  }, [refreshInfo]);\n\n  const handleTabChange = (_: any, value: number) => dispatch(setTab(value));\n\n  const tabs = allTabs.slice();\n\n  // if Tune information is not available, remove Tune tab from the dashboard\n  if (tuneAvailability === null || !tuneAvailability.available) {\n    tabs.splice(4);\n  }\n\n  const SelectedComponent = tabs[tab].component;\n  const [usageStatsPromptEnabled, setUsageStatsPromptEnabled] = useState(false);\n  const [usageStatsEnabled, setUsageStatsEnabled] = useState(false);\n  useEffect(() => {\n    getUsageStatsEnabled().then((res) => {\n      setUsageStatsPromptEnabled(res.usageStatsPromptEnabled);\n      setUsageStatsEnabled(res.usageStatsEnabled);\n    });\n  }, []);\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h5\">Ray Dashboard</Typography>\n      <Button\n        style={{ position: \"absolute\", right: 16, top: 16 }}\n        variant=\"contained\"\n        size=\"small\"\n        color=\"primary\"\n        onClick={() => history.push(\"/node\")}\n      >\n        Try Experimental Dashboard\n      </Button>\n      <Tabs\n        className={classes.tabs}\n        indicatorColor=\"primary\"\n        onChange={handleTabChange}\n        textColor=\"primary\"\n        value={tab}\n      >\n        {tabs.map(({ label }) => (\n          <Tab key={label} label={label} />\n        ))}\n      </Tabs>\n      <SelectedComponent />\n      {usageStatsPromptEnabled ? (\n        <Alert style={{ marginTop: 30 }} severity=\"info\">\n          {usageStatsEnabled ? (\n            <span>\n              Usage stats collection is enabled. To disable this, add\n              `--disable-usage-stats` to the command that starts the cluster, or\n              run the following command: `ray disable-usage-stats` before\n              starting the cluster. See{\" \"}\n              <a\n                href=\"https://docs.ray.io/en/master/cluster/usage-stats.html\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                https://docs.ray.io/en/master/cluster/usage-stats.html\n              </a>{\" \"}\n              for more details.\n            </span>\n          ) : (\n            <span>Usage stats collection is disabled.</span>\n          )}\n        </Alert>\n      ) : null}\n      <LastUpdated />\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import axios from \"axios\";\nimport { EventGlobalRsp, EventRsp } from \"../type/event\";\n\nexport const getEvents = (jobId: string) => {\n  if (jobId) {\n    return axios.get<EventRsp>(`events?job_id=${jobId}`);\n  }\n};\n\nexport const getPipelineEvents = (jobId: string) => {\n  if (jobId) {\n    return axios.get<EventRsp>(`events?job_id=${jobId}&view=pipeline`);\n  }\n};\n\nexport const getGlobalEvents = () => {\n  return axios.get<EventGlobalRsp>(\"events\");\n};\n","import {\n  Button,\n  Chip,\n  Grid,\n  InputAdornment,\n  LinearProgress,\n  makeStyles,\n  TextField,\n  TextFieldProps,\n  Tooltip,\n} from \"@material-ui/core\";\nimport { SearchOutlined } from \"@material-ui/icons\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport dayjs from \"dayjs\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { GlobalContext } from \"../App\";\nimport { getEvents, getGlobalEvents } from \"../service/event\";\nimport { Event } from \"../type/event\";\nimport { useFilter } from \"../util/hook\";\nimport LogVirtualView from \"./LogView/LogVirtualView\";\nimport { StatusChip } from \"./StatusChip\";\n\ntype EventTableProps = {\n  job_id?: string;\n};\n\nconst useStyles = makeStyles((theme) => ({\n  table: {\n    marginTop: theme.spacing(4),\n    padding: theme.spacing(2),\n  },\n  pageMeta: {\n    padding: theme.spacing(2),\n    marginTop: theme.spacing(2),\n  },\n  search: {\n    margin: theme.spacing(1),\n    display: \"inline-block\",\n    fontSize: 12,\n    lineHeight: \"46px\",\n  },\n  infokv: {\n    margin: theme.spacing(1),\n  },\n  li: {\n    color: theme.palette.text.secondary,\n    fontSize: 12,\n  },\n  code: {\n    wordBreak: \"break-all\",\n    whiteSpace: \"pre-line\",\n    margin: 12,\n    fontSize: 14,\n    color: theme.palette.text.primary,\n  },\n}));\n\nconst useEventTable = (props: EventTableProps) => {\n  const { job_id } = props;\n  const { nodeMap } = useContext(GlobalContext);\n  const [loading, setLoading] = useState(true);\n  const { changeFilter: _changeFilter, filterFunc } = useFilter();\n  const [events, setEvents] = useState<Event[]>([]);\n  const [jobOptions, setJobOp] = useState<string[]>([]);\n  const [pagination, setPagination] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    total: 0,\n  });\n  const changePage = (key: string, value: number) => {\n    setPagination({ ...pagination, [key]: value });\n  };\n  const realLen = events.filter(filterFunc).length;\n  const { pageSize } = pagination;\n  const changeFilter: typeof _changeFilter = (...params) => {\n    _changeFilter(...params);\n    setPagination({\n      ...pagination,\n      pageNo: 1,\n    });\n  };\n\n  useEffect(() => {\n    const getEvent = async () => {\n      try {\n        if (job_id) {\n          const rsp = await getEvents(job_id);\n          if (rsp?.data?.data?.events) {\n            setEvents(\n              rsp.data.data.events.sort(\n                (a, b) => Number(b.timestamp) - Number(a.timestamp),\n              ),\n            );\n          }\n        } else {\n          const rsp = await getGlobalEvents();\n          if (rsp?.data?.data?.events) {\n            setJobOp(Object.keys(rsp.data.data.events).filter((e) => e !== \"\"));\n            setEvents(\n              Object.values(rsp.data.data.events)\n                .reduce((a, b) => a.concat(b))\n                .sort((a, b) => Number(b.timestamp) - Number(a.timestamp)),\n            );\n          }\n        }\n      } catch (e) {\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getEvent();\n  }, [job_id]);\n\n  useEffect(() => {\n    setPagination((p) => ({\n      ...p,\n      total: Math.ceil(realLen / p.pageSize),\n      pageNo: 1,\n    }));\n  }, [realLen, pageSize]);\n\n  const range = [\n    (pagination.pageNo - 1) * pagination.pageSize,\n    pagination.pageNo * pagination.pageSize,\n  ];\n\n  return {\n    events: events.filter(filterFunc).slice(range[0], range[1]),\n    changeFilter,\n    isJob: !!job_id,\n    jobOptions,\n    pagination,\n    changePage,\n    labelOptions: Array.from(new Set(events.map((e) => e.label))),\n    hostOptions: Array.from(\n      new Set(events.map((e) => e.sourceHostname || e.hostName)),\n    ),\n    sourceOptions: Array.from(new Set(events.map((e) => e.sourceType))),\n    severityOptions: Array.from(new Set(events.map((e) => e.severity))),\n    loading,\n    reverseEvents: () => {\n      setEvents([...events.reverse()]);\n    },\n    nodeMap,\n  };\n};\n\nconst EventTable = (props: EventTableProps) => {\n  const classes = useStyles();\n  const {\n    events,\n    changeFilter,\n    isJob,\n    jobOptions,\n    pagination,\n    changePage,\n    labelOptions,\n    hostOptions,\n    sourceOptions,\n    severityOptions,\n    loading,\n    reverseEvents,\n    nodeMap,\n  } = useEventTable(props);\n\n  if (loading) {\n    return <LinearProgress />;\n  }\n\n  return (\n    <div style={{ position: \"relative\" }}>\n      <div>\n        <Autocomplete\n          className={classes.search}\n          style={{ width: 200 }}\n          options={labelOptions}\n          onInputChange={(_: any, value: string) => {\n            changeFilter(\"label\", value.trim());\n          }}\n          renderInput={(params: TextFieldProps) => (\n            <TextField {...params} label=\"Label\" />\n          )}\n        />\n        <Autocomplete\n          className={classes.search}\n          style={{ width: 200 }}\n          options={hostOptions}\n          onInputChange={(_: any, value: string) => {\n            changeFilter(\"sourceHostname\", value.trim());\n          }}\n          renderInput={(params: TextFieldProps) => (\n            <TextField {...params} label=\"Host\" />\n          )}\n        />\n        <Autocomplete\n          className={classes.search}\n          style={{ width: 100 }}\n          options={sourceOptions}\n          onInputChange={(_: any, value: string) => {\n            changeFilter(\"sourceType\", value.trim());\n          }}\n          renderInput={(params: TextFieldProps) => (\n            <TextField {...params} label=\"Source\" />\n          )}\n        />\n        <Autocomplete\n          className={classes.search}\n          style={{ width: 140 }}\n          options={severityOptions}\n          onInputChange={(_: any, value: string) => {\n            changeFilter(\"severity\", value.trim());\n          }}\n          renderInput={(params: TextFieldProps) => (\n            <TextField {...params} label=\"Severity\" />\n          )}\n        />\n        {!isJob && (\n          <Autocomplete\n            className={classes.search}\n            style={{ width: 100 }}\n            options={jobOptions}\n            onInputChange={(_: any, value: string) => {\n              changeFilter(\"jobId\", value.trim());\n            }}\n            renderInput={(params: TextFieldProps) => (\n              <TextField {...params} label=\"Job\" />\n            )}\n          />\n        )}\n        <TextField\n          className={classes.search}\n          label=\"Msg\"\n          InputProps={{\n            onChange: ({ target: { value } }) => {\n              changeFilter(\"message\", value.trim());\n            },\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <SearchOutlined />\n              </InputAdornment>\n            ),\n          }}\n        />\n        <TextField\n          className={classes.search}\n          label=\"Page Size\"\n          InputProps={{\n            onChange: ({ target: { value } }) => {\n              changePage(\"pageSize\", Math.min(Number(value), 500) || 10);\n            },\n            value: pagination.pageSize,\n          }}\n        />\n        <Button className={classes.search} onClick={() => reverseEvents()}>\n          Reverse\n        </Button>\n      </div>\n      <div>\n        <Pagination\n          count={pagination.total}\n          page={pagination.pageNo}\n          onChange={(event: React.ChangeEvent<unknown>, value: number) => {\n            changePage(\"pageNo\", value);\n          }}\n        />\n      </div>\n      <div className={classes.pageMeta}>\n        {!events.length\n          ? \"No Events Yet.\"\n          : events.map(\n              ({\n                label,\n                message,\n                timestamp,\n                timeStamp,\n                sourceType,\n                sourceHostname,\n                hostName,\n                sourcePid,\n                pid,\n                eventId,\n                jobId,\n                jobName,\n                nodeId,\n                severity,\n                customFields,\n              }) => {\n                const realTimestamp =\n                  timeStamp ||\n                  dayjs(Math.floor(timestamp * 1000)).format(\n                    \"YYYY-MM-DD HH:mm:ss\",\n                  );\n                const hostname = sourceHostname || hostName;\n                const realPid = pid || sourcePid;\n                return (\n                  <article className={classes.li} key={eventId}>\n                    <Grid container spacing={4}>\n                      <Grid item>\n                        <StatusChip status={label} type={severity} />\n                      </Grid>\n                      <Grid item>{realTimestamp}</Grid>\n                      {customFields && (\n                        <Grid item>\n                          <Tooltip\n                            interactive\n                            title={\n                              <pre style={{ whiteSpace: \"pre-wrap\" }}>\n                                {JSON.stringify(customFields, null, 2)}\n                              </pre>\n                            }\n                          >\n                            <Chip size=\"small\" label=\"CustomFields\" />\n                          </Tooltip>\n                        </Grid>\n                      )}\n                    </Grid>\n                    <Grid container>\n                      <Grid item className={classes.infokv}>\n                        severity: {severity}\n                      </Grid>\n                      <Grid item className={classes.infokv}>\n                        source: {sourceType}\n                      </Grid>\n                      <Grid item className={classes.infokv}>\n                        hostname:{\" \"}\n                        {nodeMap[hostname] ? (\n                          <Link to={`/node/${nodeMap[hostname]}`}>\n                            {hostname}\n                          </Link>\n                        ) : (\n                          hostname\n                        )}\n                      </Grid>\n                      <Grid item className={classes.infokv}>\n                        pid: {realPid}\n                      </Grid>\n                      {jobId && (\n                        <Grid item className={classes.infokv}>\n                          jobId: <Link to={`/job/${jobId}`}>{jobId}</Link>\n                        </Grid>\n                      )}\n                      {jobName && (\n                        <Grid item className={classes.infokv}>\n                          jobId: {jobName}\n                        </Grid>\n                      )}\n                      {eventId && (\n                        <Grid item className={classes.infokv}>\n                          eventId: {eventId}\n                        </Grid>\n                      )}\n                      {nodeId && (\n                        <Grid item className={classes.infokv}>\n                          nodeId: {nodeId}\n                        </Grid>\n                      )}\n                    </Grid>\n                    <LogVirtualView content={message} language=\"prolog\" />\n                  </article>\n                );\n              },\n            )}\n      </div>\n      <div>\n        <Pagination\n          count={pagination.total}\n          page={pagination.pageNo}\n          onChange={(event: React.ChangeEvent<unknown>, value: number) => {\n            changePage(\"pageNo\", value);\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default EventTable;\n","import { makeStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport EventTable from \"../../components/EventTable\";\nimport TitleCard from \"../../components/TitleCard\";\n\nconst useStyle = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}));\n\nconst Events = () => {\n  const classes = useStyle();\n\n  return (\n    <div className={classes.root}>\n      <TitleCard title=\"Event\">\n        <EventTable />\n      </TitleCard>\n    </div>\n  );\n};\n\nexport default Events;\n","import React from \"react\";\nimport Logo from \"../../logo.svg\";\n\nconst fn = () => {\n  return (\n    <div style={{ height: \"100vh\", width: \"100vw\" }}>\n      <div\n        style={{\n          margin: \"250px auto 0 auto\",\n          textAlign: \"center\",\n          fontSize: 40,\n          fontWeight: 500,\n        }}\n      >\n        <img src={Logo} alt=\"Loading\" width={100} />\n        <br />\n        Loading...\n      </div>\n    </div>\n  );\n};\n\nexport default fn;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { dashboardReducer } from \"./pages/dashboard/state\";\n\nexport const store = configureStore({\n  reducer: {\n    dashboard: dashboardReducer,\n  },\n  devTools: process.env.NODE_ENV === \"development\",\n});\n\nexport type StoreState = ReturnType<typeof store.getState>;\n","import { blue, blueGrey, grey, lightBlue } from \"@material-ui/core/colors\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\n\nconst basicTheme = {\n  typography: {\n    fontSize: 12,\n    fontFamily: [\n      \"-apple-system\",\n      \"BlinkMacSystemFont\",\n      '\"Segoe UI\"',\n      \"Roboto\",\n      '\"Helvetica Neue\"',\n      \"Arial\",\n      \"sans-serif\",\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(\",\"),\n  },\n  props: {\n    MuiPaper: {\n      elevation: 0,\n    },\n  },\n};\n\nexport const lightTheme = createMuiTheme({\n  ...basicTheme,\n  palette: {\n    primary: blue,\n    secondary: lightBlue,\n    text: {\n      primary: grey[900],\n      secondary: grey[800],\n      disabled: grey[400],\n      hint: grey[300],\n    },\n    background: {\n      paper: \"#fff\",\n      default: blueGrey[50],\n    },\n  },\n});\n\nexport const darkTheme = createMuiTheme({\n  ...basicTheme,\n  palette: {\n    primary: blue,\n    secondary: lightBlue,\n    text: {\n      primary: blueGrey[50],\n      secondary: blueGrey[100],\n      disabled: blueGrey[200],\n      hint: blueGrey[300],\n    },\n    background: {\n      paper: grey[800],\n      default: grey[900],\n    },\n  },\n});\n","import { CssBaseline } from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport React, { Suspense, useEffect, useState } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport Dashboard from \"./pages/dashboard/Dashboard\";\nimport Events from \"./pages/event/Events\";\nimport Loading from \"./pages/exception/Loading\";\nimport { getNodeList } from \"./service/node\";\nimport { store } from \"./store\";\nimport { darkTheme, lightTheme } from \"./theme\";\nimport { getLocalStorage, setLocalStorage } from \"./util/localData\";\n\n// lazy loading fro prevent loading too much code at once\nconst Actors = React.lazy(() => import(\"./pages/actor\"));\nconst CMDResult = React.lazy(() => import(\"./pages/cmd/CMDResult\"));\nconst Index = React.lazy(() => import(\"./pages/index/Index\"));\nconst Job = React.lazy(() => import(\"./pages/job\"));\nconst JobDetail = React.lazy(() => import(\"./pages/job/JobDetail\"));\nconst BasicLayout = React.lazy(() => import(\"./pages/layout\"));\nconst Logs = React.lazy(() => import(\"./pages/log/Logs\"));\nconst Node = React.lazy(() => import(\"./pages/node\"));\nconst NodeDetail = React.lazy(() => import(\"./pages/node/NodeDetail\"));\n\n// key to store theme in local storage\nconst RAY_DASHBOARD_THEME_KEY = \"ray-dashboard-theme\";\n\n// a global map for relations\nexport const GlobalContext = React.createContext({\n  nodeMap: {} as { [key: string]: string },\n  ipLogMap: {} as { [key: string]: string },\n  namespaceMap: {} as { [key: string]: string[] },\n});\n\nexport const getDefaultTheme = () =>\n  getLocalStorage<string>(RAY_DASHBOARD_THEME_KEY) || \"light\";\nexport const setLocalTheme = (theme: string) =>\n  setLocalStorage(RAY_DASHBOARD_THEME_KEY, theme);\n\nconst App = () => {\n  const [theme, _setTheme] = useState(getDefaultTheme());\n  const [context, setContext] = useState<{\n    nodeMap: { [key: string]: string };\n    ipLogMap: { [key: string]: string };\n    namespaceMap: { [key: string]: string[] };\n  }>({ nodeMap: {}, ipLogMap: {}, namespaceMap: {} });\n  const getTheme = (name: string) => {\n    switch (name) {\n      case \"dark\":\n        return darkTheme;\n      case \"light\":\n      default:\n        return lightTheme;\n    }\n  };\n  const setTheme = (name: string) => {\n    setLocalTheme(name);\n    _setTheme(name);\n  };\n  useEffect(() => {\n    getNodeList().then((res) => {\n      if (res?.data?.data?.summary) {\n        const nodeMap = {} as { [key: string]: string };\n        const ipLogMap = {} as { [key: string]: string };\n        res.data.data.summary.forEach(({ hostname, raylet, ip, logUrl }) => {\n          nodeMap[hostname] = raylet.nodeId;\n          ipLogMap[ip] = logUrl;\n        });\n        setContext({ nodeMap, ipLogMap, namespaceMap: {} });\n      }\n    });\n  }, []);\n\n  return (\n    <ThemeProvider theme={getTheme(theme)}>\n      <Suspense fallback={Loading}>\n        <GlobalContext.Provider value={context}>\n          <Provider store={store}>\n            <CssBaseline />\n            <HashRouter>\n              <Switch>\n                <Route component={Dashboard} exact path=\"/\" />\n                <Route\n                  render={(props) => (\n                    <BasicLayout {...props} setTheme={setTheme} theme={theme}>\n                      <Route component={Index} exact path=\"/summary\" />\n                      <Route component={Job} exact path=\"/job\" />\n                      <Route component={Node} exact path=\"/node\" />\n                      <Route component={Actors} exact path=\"/actors\" />\n                      <Route component={Events} exact path=\"/events\" />\n                      <Route\n                        render={(props) => (\n                          <Logs {...props} theme={theme as \"light\" | \"dark\"} />\n                        )}\n                        exact\n                        path=\"/log/:host?/:path?\"\n                      />\n                      <Route component={NodeDetail} path=\"/node/:id\" />\n                      <Route component={JobDetail} path=\"/job/:id\" />\n                      <Route component={CMDResult} path=\"/cmd/:cmd/:ip/:pid\" />\n                      <Route component={Loading} exact path=\"/loading\" />\n                    </BasicLayout>\n                  )}\n                />\n              </Switch>\n            </HashRouter>\n          </Provider>\n        </GlobalContext.Provider>\n      </Suspense>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","export const getLocalStorage = <T>(key: string) => {\n  const data = window.localStorage.getItem(key);\n  try {\n    return JSON.parse(data || \"\") as T;\n  } catch {\n    return data;\n  }\n};\n\nexport const setLocalStorage = (key: string, value: any) => {\n  return window.localStorage.setItem(key, JSON.stringify(value));\n};\n"],"sourceRoot":""}