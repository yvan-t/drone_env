{"version":3,"sources":["pages/cmd/CMDResult.tsx","service/util.ts"],"names":["useStyles","makeStyles","theme","root","padding","spacing","width","table","marginTop","pageMeta","search","margin","CMDResult","props","classes","params","match","cmd","ip","pid","useState","result","setResult","option","setOption","executeJstat","useCallback","options","axios","get","getJstat","then","rsp","data","output","msg","catch","err","toString","useEffect","getJstack","getJmap","className","TitleCard","title","Paper","Grid","container","item","Select","value","onChange","e","target","map","MenuItem","Button","onClick","LogVirtualView","content","language","height"],"mappings":"gQAcMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAASF,EAAMG,QAAQ,GACvBC,MAAO,QAETC,MAAO,CACLC,UAAWN,EAAMG,QAAQ,GACzBD,QAASF,EAAMG,QAAQ,IAEzBI,SAAU,CACRL,QAASF,EAAMG,QAAQ,GACvBG,UAAWN,EAAMG,QAAQ,IAE3BK,OAAQ,CACNC,OAAQT,EAAMG,QAAQ,QA4GXO,UAxGG,SAChBC,GAEA,IAAMC,EAAUd,IAELe,EACPF,EADFG,MAASD,OAEHE,EAAiBF,EAAjBE,IAAKC,EAAYH,EAAZG,GAAIC,EAAQJ,EAARI,IACjB,EAA4BC,qBAA5B,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA4BF,mBAAS,UAArC,mBAAOG,EAAP,KAAeC,EAAf,KACMC,EAAeC,uBACnB,kBCfoB,SAACR,EAAYC,EAAaQ,GAChD,OAAOC,IAAMC,IAAY,cAAe,CACtCd,OAAQ,CACNG,KACAC,MACAQ,aDWAG,CAASZ,EAAIC,EAAKI,GACfQ,MAAK,SAACC,GACDA,EAAIC,KAAKZ,OACXC,EAAUU,EAAIC,KAAKA,KAAKC,QAExBZ,EAAUU,EAAIC,KAAKE,QAGtBC,OAAM,SAACC,GAAD,OAASf,EAAUe,EAAIC,iBAClC,CAACpB,EAAIC,EAAKI,IAoCZ,OAjCAgB,qBAAU,WACR,OAAQtB,GACN,IAAK,UChDc,SAACC,EAAYC,GACpC,OAAOS,IAAMC,IAAY,eAAgB,CACvCd,OAAQ,CACNG,KACAC,UD6CEqB,CAAUtB,EAAIC,GACXY,MAAK,SAACC,GACDA,EAAIC,KAAKZ,OACXC,EAAUU,EAAIC,KAAKA,KAAKC,QAExBZ,EAAUU,EAAIC,KAAKE,QAGtBC,OAAM,SAACC,GAAD,OAASf,EAAUe,EAAIC,eAChC,MACF,IAAK,QClDY,SAACpB,EAAYC,GAClC,OAAOS,IAAMC,IAAY,aAAc,CACrCd,OAAQ,CACNG,KACAC,UD+CEsB,CAAQvB,EAAIC,GACTY,MAAK,SAACC,GACDA,EAAIC,KAAKZ,OACXC,EAAUU,EAAIC,KAAKA,KAAKC,QAExBZ,EAAUU,EAAIC,KAAKE,QAGtBC,OAAM,SAACC,GAAD,OAASf,EAAUe,EAAIC,eAChC,MACF,IAAK,QACHb,IACA,MACF,QACEH,EAAU,WAAD,OAAYL,EAAZ,0BAGZ,CAACA,EAAKQ,EAAcP,EAAIC,IAGzB,yBAAKuB,UAAW5B,EAAQX,MACtB,kBAACwC,EAAA,EAAD,CAAWC,MAAO3B,GACP,UAARA,GACC,kBAAC4B,EAAA,EAAD,CAAOH,UAAW5B,EAAQL,UACxB,kBAACqC,EAAA,EAAD,CAAMC,WAAS,EAAC1C,QAAS,GACvB,kBAACyC,EAAA,EAAD,CAAME,MAAI,GACR,kBAACC,EAAA,EAAD,CACEC,MAAO3B,EACP4B,SAAU,SAACC,GAAD,OAAO5B,EAAU4B,EAAEC,OAAOH,SAEnC,CACC,QACA,WACA,KACA,aACA,iBACA,QACA,gBACA,QACA,gBACA,SACA,UACA,oBACAI,KAAI,SAACF,GAAD,OACJ,kBAACG,EAAA,EAAD,CAAUL,MAAOE,GAAIA,QAI3B,kBAACN,EAAA,EAAD,CAAME,MAAI,GACR,kBAACQ,EAAA,EAAD,CAAQC,QAAShC,GAAjB,eAMV,kBAACkB,EAAA,EAAD,CAAWC,MAAK,cAAS1B,EAAT,mBAAsBC,IACpC,kBAACuC,EAAA,EAAD,CACEC,QAAStC,GAAU,UACnBuC,SAAS,SACTC,OAAQ","file":"static/js/10.2031d9d2.chunk.js","sourcesContent":["import {\n  Button,\n  Grid,\n  makeStyles,\n  MenuItem,\n  Paper,\n  Select,\n} from \"@material-ui/core\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport LogVirtualView from \"../../components/LogView/LogVirtualView\";\nimport TitleCard from \"../../components/TitleCard\";\nimport { getJmap, getJstack, getJstat } from \"../../service/util\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(4),\n    width: \"100%\",\n  },\n  table: {\n    marginTop: theme.spacing(4),\n    padding: theme.spacing(2),\n  },\n  pageMeta: {\n    padding: theme.spacing(2),\n    marginTop: theme.spacing(2),\n  },\n  search: {\n    margin: theme.spacing(1),\n  },\n}));\n\nconst CMDResult = (\n  props: RouteComponentProps<{ cmd: string; ip: string; pid: string }>,\n) => {\n  const classes = useStyles();\n  const {\n    match: { params },\n  } = props;\n  const { cmd, ip, pid } = params;\n  const [result, setResult] = useState<string>();\n  const [option, setOption] = useState(\"gcutil\");\n  const executeJstat = useCallback(\n    () =>\n      getJstat(ip, pid, option)\n        .then((rsp) => {\n          if (rsp.data.result) {\n            setResult(rsp.data.data.output);\n          } else {\n            setResult(rsp.data.msg);\n          }\n        })\n        .catch((err) => setResult(err.toString())),\n    [ip, pid, option],\n  );\n\n  useEffect(() => {\n    switch (cmd) {\n      case \"jstack\":\n        getJstack(ip, pid)\n          .then((rsp) => {\n            if (rsp.data.result) {\n              setResult(rsp.data.data.output);\n            } else {\n              setResult(rsp.data.msg);\n            }\n          })\n          .catch((err) => setResult(err.toString()));\n        break;\n      case \"jmap\":\n        getJmap(ip, pid)\n          .then((rsp) => {\n            if (rsp.data.result) {\n              setResult(rsp.data.data.output);\n            } else {\n              setResult(rsp.data.msg);\n            }\n          })\n          .catch((err) => setResult(err.toString()));\n        break;\n      case \"jstat\":\n        executeJstat();\n        break;\n      default:\n        setResult(`Command ${cmd} is not supported.`);\n        break;\n    }\n  }, [cmd, executeJstat, ip, pid]);\n\n  return (\n    <div className={classes.root}>\n      <TitleCard title={cmd}>\n        {cmd === \"jstat\" && (\n          <Paper className={classes.pageMeta}>\n            <Grid container spacing={1}>\n              <Grid item>\n                <Select\n                  value={option}\n                  onChange={(e) => setOption(e.target.value as string)}\n                >\n                  {[\n                    \"class\",\n                    \"compiler\",\n                    \"gc\",\n                    \"gccapacity\",\n                    \"gcmetacapacity\",\n                    \"gcnew\",\n                    \"gcnewcapacity\",\n                    \"gcold\",\n                    \"gcoldcapacity\",\n                    \"gcutil\",\n                    \"gccause\",\n                    \"printcompilation\",\n                  ].map((e) => (\n                    <MenuItem value={e}>{e}</MenuItem>\n                  ))}\n                </Select>\n              </Grid>\n              <Grid item>\n                <Button onClick={executeJstat}>Execute</Button>\n              </Grid>\n            </Grid>\n          </Paper>\n        )}\n      </TitleCard>\n      <TitleCard title={`IP: ${ip} / Pid: ${pid}`}>\n        <LogVirtualView\n          content={result || \"loading\"}\n          language=\"prolog\"\n          height={800}\n        />\n      </TitleCard>\n    </div>\n  );\n};\n\nexport default CMDResult;\n","import axios from \"axios\";\n\ntype CMDRsp = {\n  result: boolean;\n  msg: string;\n  data: {\n    output: string;\n  };\n};\n\nexport const getJstack = (ip: string, pid: string) => {\n  return axios.get<CMDRsp>(\"utils/jstack\", {\n    params: {\n      ip,\n      pid,\n    },\n  });\n};\n\nexport const getJmap = (ip: string, pid: string) => {\n  return axios.get<CMDRsp>(\"utils/jmap\", {\n    params: {\n      ip,\n      pid,\n    },\n  });\n};\n\nexport const getJstat = (ip: string, pid: string, options: string) => {\n  return axios.get<CMDRsp>(\"utils/jstat\", {\n    params: {\n      ip,\n      pid,\n      options,\n    },\n  });\n};\n\ntype NamespacesRsp = {\n  result: boolean;\n  msg: string;\n  data: {\n    namespaces: {\n      namespaceId: string;\n      hostNameList: string[];\n    }[];\n  };\n};\n\nexport const getNamespaces = () => {\n  return axios.get<NamespacesRsp>(\"namespaces\");\n};\n"],"sourceRoot":""}