{"version":3,"sources":["components/SearchComponent.tsx","util/converter.ts","util/func.tsx","components/ActorTable.tsx","components/PercentageBar.tsx","components/StatesCounter.tsx","../node_modules/@material-ui/icons/esm/KeyboardArrowDown.js","../node_modules/@material-ui/icons/esm/KeyboardArrowRight.js","components/WorkerTable.tsx","../node_modules/@material-ui/core/esm/TableContainer/TableContainer.js","pages/actor/index.tsx","service/actor.ts"],"names":["useStyles","makeStyles","theme","search","margin","spacing","marginTop","SearchInput","label","onChange","defaultValue","classes","className","size","InputProps","value","target","endAdornment","position","SearchSelect","options","select","SelectProps","style","width","map","e","memoryConverter","bytes","toFixed","longTextCut","text","len","title","interactive","length","slice","ActorTable","actors","workers","useState","pageNo","setPageNo","useFilter","changeFilter","filterFunc","pageSize","setPageSize","ipLogMap","useContext","GlobalContext","actorList","Object","values","functionDesc","taskSpec","functionDescriptor","javaFunctionDescriptor","pythonFunctionDescriptor","join","filter","list","Fragment","flex","display","alignItems","Array","from","Set","state","onInputChange","_","trim","renderInput","params","address","ipAddress","Math","min","Number","page","num","count","ceil","type","col","align","key","actorId","jobId","pid","name","numRestarts","coreWorkerStats","expandComponent","actorMap","mini","color","orange","port","status","to","encodeURIComponent","useStyle","container","background","border","padding","height","lineHeight","boxSizing","borderRadius","displayBar","palette","paper","right","transition","borderTopLeftRadius","borderBottomLeftRadius","fontSize","zIndex","primary","textAlign","PercentageBar","props","total","per","round","max","children","StateCounter","stateMap","forEach","item","suffix","entries","s","createSvgIcon","React","createElement","d","ExpandableTableRow","stateKey","otherProps","isExpanded","setIsExpanded","useEffect","startsWith","TableRow","TableCell","IconButton","onClick","KeyboardArrowDown","KeyboardArrowRight","colSpan","WorkerDetailTable","TableContainer","RayletWorkerTable","setKey","nodeMap","Button","random","Table","TableHead","TableBody","sort","aWorker","bWorker","a","cpuPercent","cpuTimes","memoryInfo","cmdline","createTime","language","ip","hostname","maxHeight","overflow","val","lineBreak","dayjs","format","Grid","window","open","ref","_props$component","component","Component","other","_objectWithoutProperties","_extends","clsx","root","withStyles","overflowX","Actors","setActors","get","then","res","data","TitleCard"],"mappings":"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","file":"static/js/5.42fdf097.chunk.js","sourcesContent":["import {\n  InputAdornment,\n  makeStyles,\n  MenuItem,\n  TextField,\n} from \"@material-ui/core\";\nimport { SearchOutlined } from \"@material-ui/icons\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  search: {\n    margin: theme.spacing(1),\n    marginTop: 0,\n  },\n}));\n\nexport const SearchInput = ({\n  label,\n  onChange,\n  defaultValue,\n}: {\n  label: string;\n  defaultValue?: string;\n  onChange?: (value: string) => void;\n}) => {\n  const classes = useStyles();\n\n  return (\n    <TextField\n      className={classes.search}\n      size=\"small\"\n      label={label}\n      InputProps={{\n        onChange: ({ target: { value } }) => {\n          if (onChange) {\n            onChange(value);\n          }\n        },\n        defaultValue,\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <SearchOutlined />\n          </InputAdornment>\n        ),\n      }}\n    />\n  );\n};\n\nexport const SearchSelect = ({\n  label,\n  onChange,\n  options,\n}: {\n  label: string;\n  onChange?: (value: string) => void;\n  options: (string | [string, string])[];\n}) => {\n  const classes = useStyles();\n  return (\n    <TextField\n      className={classes.search}\n      size=\"small\"\n      label={label}\n      select\n      SelectProps={{\n        onChange: ({ target: { value } }) => {\n          if (onChange) {\n            onChange(value as string);\n          }\n        },\n        style: {\n          width: 100,\n        },\n      }}\n    >\n      <MenuItem value=\"\">All</MenuItem>\n      {options.map((e) =>\n        typeof e === \"string\" ? (\n          <MenuItem value={e}>{e}</MenuItem>\n        ) : (\n          <MenuItem value={e[0]}>{e[1]}</MenuItem>\n        ),\n      )}\n    </TextField>\n  );\n};\n","export const memoryConverter = (bytes: number) => {\n  if (bytes < 1024) {\n    return `${bytes}KB`;\n  }\n\n  if (bytes < 1024 ** 2) {\n    return `${(bytes / 1024 ** 1).toFixed(2)}KB`;\n  }\n\n  if (bytes < 1024 ** 3) {\n    return `${(bytes / 1024 ** 2).toFixed(2)}MB`;\n  }\n\n  if (bytes < 1024 ** 4) {\n    return `${(bytes / 1024 ** 3).toFixed(2)}GB`;\n  }\n\n  if (bytes < 1024 ** 5) {\n    return `${(bytes / 1024 ** 4).toFixed(2)}TB`;\n  }\n\n  if (bytes < 1024 ** 6) {\n    return `${(bytes / 1024 ** 5).toFixed(2)}TB`;\n  }\n\n  return \"\";\n};\n","import { Tooltip } from \"@material-ui/core\";\nimport React, { CSSProperties } from \"react\";\n\nexport const longTextCut = (text: string = \"\", len: number = 28) => (\n  <Tooltip title={text} interactive>\n    <span>{text.length > len ? text.slice(0, len) + \"...\" : text}</span>\n  </Tooltip>\n);\n\nexport const jsonFormat = (str: string | object) => {\n  const preStyle = {\n    textAlign: \"left\",\n    wordBreak: \"break-all\",\n    whiteSpace: \"pre-wrap\",\n  } as CSSProperties;\n  if (typeof str === \"object\") {\n    return <pre style={preStyle}>{JSON.stringify(str, null, 2)}</pre>;\n  }\n  try {\n    const j = JSON.parse(str);\n    if (typeof j !== \"object\") {\n      return JSON.stringify(j);\n    }\n    return <pre style={preStyle}>{JSON.stringify(j, null, 2)}</pre>;\n  } catch (e) {\n    return str;\n  }\n};\n","import {\n  InputAdornment,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TextField,\n  TextFieldProps,\n} from \"@material-ui/core\";\nimport { orange } from \"@material-ui/core/colors\";\nimport { SearchOutlined } from \"@material-ui/icons\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport React, { useContext, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { GlobalContext } from \"../App\";\nimport { Actor } from \"../type/actor\";\nimport { Worker } from \"../type/worker\";\nimport { longTextCut } from \"../util/func\";\nimport { useFilter } from \"../util/hook\";\nimport StateCounter from \"./StatesCounter\";\nimport { StatusChip } from \"./StatusChip\";\nimport RayletWorkerTable, { ExpandableTableRow } from \"./WorkerTable\";\n\nconst ActorTable = ({\n  actors = {},\n  workers = [],\n}: {\n  actors: { [actorId: string]: Actor };\n  workers?: Worker[];\n}) => {\n  const [pageNo, setPageNo] = useState(1);\n  const { changeFilter, filterFunc } = useFilter();\n  const [pageSize, setPageSize] = useState(10);\n  const { ipLogMap } = useContext(GlobalContext);\n  const actorList = Object.values(actors || {})\n    .map((e) => ({\n      ...e,\n      functionDesc: Object.values(\n        e.taskSpec?.functionDescriptor?.javaFunctionDescriptor ||\n          e.taskSpec?.functionDescriptor?.pythonFunctionDescriptor ||\n          {},\n      ).join(\" \"),\n    }))\n    .filter(filterFunc);\n  const list = actorList.slice((pageNo - 1) * pageSize, pageNo * pageSize);\n\n  return (\n    <React.Fragment>\n      <div style={{ flex: 1, display: \"flex\", alignItems: \"center\" }}>\n        <Autocomplete\n          style={{ margin: 8, width: 120 }}\n          options={Array.from(\n            new Set(Object.values(actors).map((e) => e.state)),\n          )}\n          onInputChange={(_: any, value: string) => {\n            changeFilter(\"state\", value.trim());\n          }}\n          renderInput={(params: TextFieldProps) => (\n            <TextField {...params} label=\"State\" />\n          )}\n        />\n        <Autocomplete\n          style={{ margin: 8, width: 150 }}\n          options={Array.from(\n            new Set(Object.values(actors).map((e) => e.address?.ipAddress)),\n          )}\n          onInputChange={(_: any, value: string) => {\n            changeFilter(\"address.ipAddress\", value.trim());\n          }}\n          renderInput={(params: TextFieldProps) => (\n            <TextField {...params} label=\"IP\" />\n          )}\n        />\n        <TextField\n          style={{ margin: 8, width: 120 }}\n          label=\"PID\"\n          size=\"small\"\n          InputProps={{\n            onChange: ({ target: { value } }) => {\n              changeFilter(\"pid\", value.trim());\n            },\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <SearchOutlined />\n              </InputAdornment>\n            ),\n          }}\n        />\n        <TextField\n          style={{ margin: 8, width: 200 }}\n          label=\"Task Func Desc\"\n          size=\"small\"\n          InputProps={{\n            onChange: ({ target: { value } }) => {\n              changeFilter(\"functionDesc\", value.trim());\n            },\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <SearchOutlined />\n              </InputAdornment>\n            ),\n          }}\n        />\n        <TextField\n          style={{ margin: 8, width: 120 }}\n          label=\"Name\"\n          size=\"small\"\n          InputProps={{\n            onChange: ({ target: { value } }) => {\n              changeFilter(\"name\", value.trim());\n            },\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <SearchOutlined />\n              </InputAdornment>\n            ),\n          }}\n        />\n        <TextField\n          style={{ margin: 8, width: 120 }}\n          label=\"Actor ID\"\n          size=\"small\"\n          InputProps={{\n            onChange: ({ target: { value } }) => {\n              changeFilter(\"actorId\", value.trim());\n            },\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <SearchOutlined />\n              </InputAdornment>\n            ),\n          }}\n        />\n        <TextField\n          style={{ margin: 8, width: 120 }}\n          label=\"Page Size\"\n          size=\"small\"\n          InputProps={{\n            onChange: ({ target: { value } }) => {\n              setPageSize(Math.min(Number(value), 500) || 10);\n            },\n          }}\n        />\n      </div>\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        <div>\n          <Pagination\n            page={pageNo}\n            onChange={(e, num) => setPageNo(num)}\n            count={Math.ceil(actorList.length / pageSize)}\n          />\n        </div>\n        <div>\n          <StateCounter type=\"actor\" list={actorList} />\n        </div>\n      </div>\n      <Table>\n        <TableHead>\n          <TableRow>\n            {[\n              \"\",\n              \"ID(Num Restarts)\",\n              \"Name\",\n              \"Task Func Desc\",\n              \"Job Id\",\n              \"Pid\",\n              \"IP\",\n              \"Port\",\n              \"State\",\n              \"Log\",\n            ].map((col) => (\n              <TableCell align=\"center\" key={col}>\n                {col}\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {list.map(\n            ({\n              actorId,\n              functionDesc,\n              jobId,\n              pid,\n              address,\n              state,\n              name,\n              numRestarts,\n            }) => (\n              <ExpandableTableRow\n                length={\n                  workers.filter(\n                    (e) =>\n                      e.pid === pid &&\n                      address.ipAddress === e.coreWorkerStats[0].ipAddress,\n                  ).length\n                }\n                expandComponent={\n                  <RayletWorkerTable\n                    actorMap={{}}\n                    workers={workers.filter(\n                      (e) =>\n                        e.pid === pid &&\n                        address.ipAddress === e.coreWorkerStats[0].ipAddress,\n                    )}\n                    mini\n                  />\n                }\n                key={actorId}\n              >\n                <TableCell\n                  align=\"center\"\n                  style={{\n                    color: Number(numRestarts) > 0 ? orange[500] : \"inherit\",\n                  }}\n                >\n                  {actorId}({numRestarts})\n                </TableCell>\n                <TableCell align=\"center\">{name}</TableCell>\n                <TableCell align=\"center\">\n                  {longTextCut(functionDesc, 60)}\n                </TableCell>\n                <TableCell align=\"center\">{jobId}</TableCell>\n                <TableCell align=\"center\">{pid}</TableCell>\n                <TableCell align=\"center\">{address?.ipAddress}</TableCell>\n                <TableCell align=\"center\">{address?.port}</TableCell>\n                <TableCell align=\"center\">\n                  <StatusChip type=\"actor\" status={state} />\n                </TableCell>\n                <TableCell align=\"center\">\n                  {ipLogMap[address?.ipAddress] && (\n                    <Link\n                      target=\"_blank\"\n                      to={`/log/${encodeURIComponent(\n                        ipLogMap[address?.ipAddress],\n                      )}?fileName=${jobId}-${pid}`}\n                    >\n                      Log\n                    </Link>\n                  )}\n                </TableCell>\n              </ExpandableTableRow>\n            ),\n          )}\n        </TableBody>\n      </Table>\n    </React.Fragment>\n  );\n};\n\nexport default ActorTable;\n","import { makeStyles } from \"@material-ui/core\";\nimport React, { PropsWithChildren } from \"react\";\n\nconst useStyle = makeStyles((theme) => ({\n  container: {\n    background: \"linear-gradient(45deg, #21CBF3ee 30%, #2196F3ee 90%)\",\n    border: `1px solid #ffffffbb`,\n    padding: \"0 12px\",\n    height: 18,\n    lineHeight: \"18px\",\n    position: \"relative\",\n    boxSizing: \"content-box\",\n    borderRadius: 4,\n  },\n  displayBar: {\n    background: theme.palette.background.paper,\n    position: \"absolute\",\n    right: 0,\n    height: 18,\n    transition: \"0.5s width\",\n    borderRadius: 2,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n    border: \"2px solid transparent\",\n    boxSizing: \"border-box\",\n  },\n  text: {\n    fontSize: 12,\n    zIndex: 2,\n    position: \"relative\",\n    color: theme.palette.text.primary,\n    width: \"100%\",\n    textAlign: \"center\",\n  },\n}));\n\nconst PercentageBar = (\n  props: PropsWithChildren<{ num: number; total: number }>,\n) => {\n  const { num, total } = props;\n  const classes = useStyle();\n  const per = Math.round((num / total) * 100);\n\n  return (\n    <div className={classes.container}>\n      <div\n        className={classes.displayBar}\n        style={{\n          width: `${Math.min(Math.max(0, 100 - per), 100)}%`,\n        }}\n      />\n      <div className={classes.text}>{props.children}</div>\n    </div>\n  );\n};\n\nexport default PercentageBar;\n","import { Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport { StatusChip } from \"./StatusChip\";\n\nconst StateCounter = ({\n  type,\n  list,\n}: {\n  type: string;\n  list: { state: string }[];\n}) => {\n  const stateMap = {} as { [state: string]: number };\n  list.forEach(({ state }) => {\n    stateMap[state] = stateMap[state] + 1 || 1;\n  });\n\n  return (\n    <Grid container spacing={2} alignItems=\"center\">\n      <Grid item>\n        <StatusChip status=\"TOTAL\" type={type} suffix={`x ${list.length}`} />\n      </Grid>\n      {Object.entries(stateMap).map(([s, num]) => (\n        <Grid item>\n          <StatusChip status={s} type={type} suffix={` x ${num}`} />\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default StateCounter;\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\"\n}), 'KeyboardArrowDown');","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z\"\n}), 'KeyboardArrowRight');","import {\n  Button,\n  Grid,\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport { KeyboardArrowDown, KeyboardArrowRight } from \"@material-ui/icons\";\nimport dayjs from \"dayjs\";\nimport React, {\n  PropsWithChildren,\n  ReactNode,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { GlobalContext } from \"../App\";\nimport { Actor } from \"../type/actor\";\nimport { CoreWorkerStats, Worker } from \"../type/worker\";\nimport { memoryConverter } from \"../util/converter\";\nimport { longTextCut } from \"../util/func\";\n\nimport { useFilter } from \"../util/hook\";\nimport ActorTable from \"./ActorTable\";\nimport PercentageBar from \"./PercentageBar\";\nimport { SearchInput } from \"./SearchComponent\";\n\nexport const ExpandableTableRow = ({\n  children,\n  expandComponent,\n  length,\n  stateKey = \"\",\n  ...otherProps\n}: PropsWithChildren<{\n  expandComponent: ReactNode;\n  length: number;\n  stateKey?: string;\n}>) => {\n  const [isExpanded, setIsExpanded] = React.useState(false);\n\n  useEffect(() => {\n    if (stateKey.startsWith(\"ON\")) {\n      setIsExpanded(true);\n    } else if (stateKey.startsWith(\"OFF\")) {\n      setIsExpanded(false);\n    }\n  }, [stateKey]);\n\n  if (length < 1) {\n    return (\n      <TableRow {...otherProps}>\n        <TableCell padding=\"checkbox\" />\n        {children}\n      </TableRow>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <TableRow {...otherProps}>\n        <TableCell padding=\"checkbox\">\n          <IconButton\n            style={{ color: \"inherit\" }}\n            onClick={() => setIsExpanded(!isExpanded)}\n          >\n            {length}\n            {isExpanded ? <KeyboardArrowDown /> : <KeyboardArrowRight />}\n          </IconButton>\n        </TableCell>\n        {children}\n      </TableRow>\n      {isExpanded && (\n        <TableRow>\n          <TableCell colSpan={24}>{expandComponent}</TableCell>\n        </TableRow>\n      )}\n    </React.Fragment>\n  );\n};\n\nconst WorkerDetailTable = ({\n  actorMap,\n  coreWorkerStats,\n}: {\n  actorMap: { [actorId: string]: Actor };\n  coreWorkerStats: CoreWorkerStats[];\n}) => {\n  const actors = {} as { [actorId: string]: Actor };\n  (coreWorkerStats || [])\n    .filter((e) => actorMap[e.actorId])\n    .forEach((e) => (actors[e.actorId] = actorMap[e.actorId]));\n\n  if (!Object.values(actors).length) {\n    return <p>The Worker Haven't Had Related Actor Yet.</p>;\n  }\n\n  return (\n    <TableContainer>\n      <ActorTable actors={actors} />\n    </TableContainer>\n  );\n};\n\nconst RayletWorkerTable = ({\n  workers = [],\n  actorMap,\n  mini,\n}: {\n  workers: Worker[];\n  actorMap: { [actorId: string]: Actor };\n  mini?: boolean;\n}) => {\n  const { changeFilter, filterFunc } = useFilter();\n  const [key, setKey] = useState(\"\");\n  const { nodeMap, ipLogMap } = useContext(GlobalContext);\n  const open = () => setKey(`ON${Math.random()}`);\n  const close = () => setKey(`OFF${Math.random()}`);\n\n  return (\n    <React.Fragment>\n      {!mini && (\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <SearchInput\n            label=\"Pid\"\n            onChange={(value) => changeFilter(\"pid\", value)}\n          />\n          <Button onClick={open}>Expand All</Button>\n          <Button onClick={close}>Collapse All</Button>\n        </div>\n      )}{\" \"}\n      <Table>\n        <TableHead>\n          <TableRow>\n            {[\n              \"\",\n              \"Pid\",\n              \"CPU\",\n              \"CPU Times\",\n              \"Memory\",\n              \"CMD Line\",\n              \"Create Time\",\n              \"Log\",\n              \"Ops\",\n              \"IP/Hostname\",\n            ].map((col) => (\n              <TableCell align=\"center\" key={col}>\n                {col}\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {workers\n            .filter(filterFunc)\n            .sort((aWorker, bWorker) => {\n              const a =\n                (aWorker.coreWorkerStats || []).filter(\n                  (e) => actorMap[e.actorId],\n                ).length || 0;\n              const b =\n                (bWorker.coreWorkerStats || []).filter(\n                  (e) => actorMap[e.actorId],\n                ).length || 0;\n              return b - a;\n            })\n            .map(\n              ({\n                pid,\n                cpuPercent,\n                cpuTimes,\n                memoryInfo,\n                cmdline,\n                createTime,\n                coreWorkerStats = [],\n                language,\n                ip,\n                hostname,\n              }) => (\n                <ExpandableTableRow\n                  expandComponent={\n                    <WorkerDetailTable\n                      actorMap={actorMap}\n                      coreWorkerStats={coreWorkerStats}\n                    />\n                  }\n                  length={\n                    (coreWorkerStats || []).filter((e) => actorMap[e.actorId])\n                      .length\n                  }\n                  key={pid}\n                  stateKey={key}\n                >\n                  <TableCell align=\"center\">{pid}</TableCell>\n                  <TableCell align=\"center\">\n                    <PercentageBar num={Number(cpuPercent)} total={100}>\n                      {cpuPercent}%\n                    </PercentageBar>\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <div style={{ maxHeight: 55, overflow: \"auto\" }}>\n                      {Object.entries(cpuTimes || {}).map(([key, val]) => (\n                        <div style={{ margin: 4 }}>\n                          {key}:{val}\n                        </div>\n                      ))}\n                    </div>\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <div style={{ maxHeight: 55, overflow: \"auto\" }}>\n                      {Object.entries(memoryInfo || {}).map(([key, val]) => (\n                        <div style={{ margin: 4 }}>\n                          {key}:{memoryConverter(val)}\n                        </div>\n                      ))}\n                    </div>\n                  </TableCell>\n                  <TableCell align=\"center\" style={{ lineBreak: \"anywhere\" }}>\n                    {cmdline && longTextCut(cmdline.filter((e) => e).join(\" \"))}\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    {dayjs(createTime * 1000).format(\"YYYY/MM/DD HH:mm:ss\")}\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <Grid container spacing={2}>\n                      {ipLogMap[ip] && (\n                        <Grid item>\n                          <Link\n                            target=\"_blank\"\n                            to={`/log/${encodeURIComponent(\n                              ipLogMap[ip],\n                            )}?fileName=${\n                              coreWorkerStats[0].jobId || \"\"\n                            }-${pid}`}\n                          >\n                            Log\n                          </Link>\n                        </Grid>\n                      )}\n                    </Grid>\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    {language === \"JAVA\" && (\n                      <div>\n                        <Button\n                          onClick={() => {\n                            window.open(\n                              `#/cmd/jstack/${coreWorkerStats[0]?.ipAddress}/${pid}`,\n                            );\n                          }}\n                        >\n                          jstack\n                        </Button>{\" \"}\n                        <Button\n                          onClick={() => {\n                            window.open(\n                              `#/cmd/jmap/${coreWorkerStats[0]?.ipAddress}/${pid}`,\n                            );\n                          }}\n                        >\n                          jmap\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            window.open(\n                              `#/cmd/jstat/${coreWorkerStats[0]?.ipAddress}/${pid}`,\n                            );\n                          }}\n                        >\n                          jstat\n                        </Button>\n                      </div>\n                    )}\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    {ip}\n                    <br />\n                    {nodeMap[hostname] ? (\n                      <Link target=\"_blank\" to={`/node/${nodeMap[hostname]}`}>\n                        {hostname}\n                      </Link>\n                    ) : (\n                      hostname\n                    )}\n                  </TableCell>\n                </ExpandableTableRow>\n              ),\n            )}\n        </TableBody>\n      </Table>\n    </React.Fragment>\n  );\n};\n\nexport default RayletWorkerTable;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    width: '100%',\n    overflowX: 'auto'\n  }\n};\nvar TableContainer = /*#__PURE__*/React.forwardRef(function TableContainer(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref,\n    className: clsx(classes.root, className)\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableContainer.propTypes = {\n  /**\n   * The table itself, normally `<Table />`\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTableContainer'\n})(TableContainer);","import { makeStyles } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport ActorTable from \"../../components/ActorTable\";\nimport TitleCard from \"../../components/TitleCard\";\nimport { getActors } from \"../../service/actor\";\nimport { Actor } from \"../../type/actor\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n    width: \"100%\",\n  },\n}));\n\nconst Actors = () => {\n  const classes = useStyles();\n  const [actors, setActors] = useState<{ [actorId: string]: Actor }>({});\n\n  useEffect(() => {\n    getActors().then((res) => {\n      if (res?.data?.data?.actors) {\n        setActors(res.data.data.actors);\n      }\n    });\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <TitleCard title=\"ACTORS\">\n        <ActorTable actors={actors} />\n      </TitleCard>\n    </div>\n  );\n};\n\nexport default Actors;\n","import { Actor } from \"../type/actor\";\nimport { get } from \"./requestHandlers\";\n\nexport const getActors = () => {\n  return get<{\n    result: boolean;\n    message: string;\n    data: {\n      actors: {\n        [actorId: string]: Actor;\n      };\n    };\n  }>(\"logical/actors\");\n};\n"],"sourceRoot":""}